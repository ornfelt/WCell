<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCell.Intercommunication</name>
    </assembly>
    <members>
        <member name="M:WCell.Intercommunication.Client.AuthenticationClientAdapter.UpdateRealmServer(System.String,System.Int32,System.Int32,WCell.Constants.Login.RealmServerType,WCell.Constants.Login.RealmFlags,WCell.Constants.Realm.RealmCategory,WCell.Constants.Login.RealmStatus)">
            <summary>
            Updates this Realm's status at the AuthServer.
            </summary>
            <param name="serverName"></param>
            <param name="serverType"></param>
            <param name="flags"></param>
            <param name="serverCategory"></param>
            <param name="serverStatus"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.Intercommunication.Client.AuthenticationClientAdapter.SetAccountRole(System.Int64,System.String)">
            <summary>
            Set the Account information remotely.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.Client.AuthenticationClientAdapter.SetAccountEmail(System.Int64,System.String)">
            <summary>
            Set the Account information remotely.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.Client.AuthenticationClientAdapter.SetAccountActive(System.Int64,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Set the Account information remotely.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.Client.AuthenticationClientAdapter.SetAccountPass(System.Int64,System.String,System.Byte[])">
            <summary>
            Set the Account information remotely.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.Client.AuthenticationClientAdapter.SetHighestLevel(System.Int64,System.Int32)">
            <summary>
            Set the Account information remotely.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.FullAccountInfo.AccountId">
            <summary>
            ID of this account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.FullAccountInfo.EmailAddress">
            <summary>
            E-mail address of this account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.FullAccountInfo.ClientId">
            <summary>
            Highest supported version
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.FullAccountInfo.RoleGroupName">
            <summary>
            The name of the Account's RoleGroup
            </summary>
        </member>
        <member name="T:WCell.Intercommunication.DataTypes.AccountInfo">
            <summary>
            Holds information about an account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.AccountInfo.AccountId">
            <summary>
            ID of this account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.AccountInfo.EmailAddress">
            <summary>
            E-mail address of this account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.AccountInfo.ClientId">
            <summary>
            Highest supported version
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.AccountInfo.RoleGroupName">
            <summary>
            The name of the Account's RoleGroup
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IAccountInfo.AccountId">
            <summary>
            ID of this account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IAccountInfo.EmailAddress">
            <summary>
            E-mail address of this account
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IAccountInfo.ClientId">
            <summary>
            Supported WoW version
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IAccountInfo.RoleGroupName">
            <summary>
            The name of the Account's RoleGroup
            </summary>
        </member>
        <member name="T:WCell.Intercommunication.DataTypes.AuthenticationInfo">
            <summary>
            Holds authentication information
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.AuthenticationInfo.SessionKey">
            <summary>
            Session key used for the session
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.AuthenticationInfo.Salt">
            <summary>
            Salt used for the session
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.AuthenticationInfo.Verifier">
            <summary>
            Verifier used for the session
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.AuthenticationInfo.SystemInformation">
            <summary>
            System information of the client
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.Name">
            <summary>
            The name of the role.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.Status">
            <summary>
            What kind of status this roll represents
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.MaySkipAuthQueue">
            <summary>
            Whether the User may login, even if the server is full.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.ScrambleChat">
            <summary>
            Whether the player's chat will be scrambled
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.AppearAsGM">
            <summary>
            Whether or not the role makes the player a GM.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.AppearAsQA">
            <summary>
            Whether or not the role makes the player a QA.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.Rank">
            <summary>
            The actual Rank of this Role
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.CanUseCommandsOnOthers">
            <summary>
            Whether this Role is allowed to call commands on others (eg. using double prefix)
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.CanHandleTickets">
            <summary>
            Whether this Role sees ticket information and can handle tickets
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.InheritanceList">
            <summary>
            A list of the other roles the role inherits from, permissions-wise.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.IRoleGroup.CommandNames">
            <summary>
            A list of the names of all allowed Commands.
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.RoleGroupInfo.HighestRole">
            <summary>
            Represents the highest role that has been loaded (usually: Owner).
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.RoleGroupInfo.LowestRole">
            <summary>
            Represents the lowest role that has been loaded (usually: Guest).
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.RoleGroupInfo.AllCommands">
            <summary>
            Represents the command name that allows all commands for a Role.
            </summary>
        </member>
        <member name="F:WCell.Intercommunication.DataTypes.RoleGroupInfo.StatusCommands">
            <summary>
            Represents the command name that allows all Commands that belong to the Role's status by default.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.DataTypes.RoleGroupInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.DataTypes.RoleGroupInfo.#ctor(System.String,System.Int32,WCell.Intercommunication.DataTypes.RoleStatus,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="roleName">the name of the role</param>
            <param name="gm">whether or not this role makes you a GM</param>
            <param name="qa">whether or not this role makes you a QA</param>
            <param name="inherits">the other roles this role inherits from</param>
        </member>
        <member name="M:WCell.Intercommunication.DataTypes.RoleGroupInfo.#ctor(System.String,System.Int32,WCell.Intercommunication.DataTypes.RoleStatus,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String[],System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="roleName">the name of the role</param>
            <param name="gm">whether or not this role makes you a GM</param>
            <param name="qa">whether or not this role makes you a QA</param>
            <param name="inherits">the other roles this role inherits from</param>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.Name">
            <summary>
            The name of the role.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.Status">
            <summary>
            What kind of status this roll represents
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.MaySkipAuthQueue">
            <summary>
            Whether the User may login, even if the server is full.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.ScrambleChat">
            <summary>
            Whether the player's chat will be scrambled
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.AppearAsGM">
            <summary>
            Whether or not the role makes the player a GM.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.AppearAsQA">
            <summary>
            Whether or not the role makes the player a QA.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.Rank">
            <summary>
            The actual Rank of this Role
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.CanUseCommandsOnOthers">
            <summary>
            Whether this Role is allowed to call commands on others (eg. using double prefix)
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.CanHandleTickets">
            <summary>
            Whether this Role sees ticket information and can handle tickets
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.InheritanceList">
            <summary>
            A list of the other roles the role inherits from, permissions-wise.
            </summary>
        </member>
        <member name="P:WCell.Intercommunication.DataTypes.RoleGroupInfo.CommandNames">
            <summary>
            A list of the names of all allowed Commands.
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.GetAuthenticationInfo(System.String)">
            <summary>
            Handles authentication information requests
            </summary>
            <param name="accountName">the account name to return information on</param>
            <returns>the AuthenticationInfo for an account</returns>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.RequestAccountInfo(System.String,System.Byte[])">
            <summary>
            Handles account information requests
            </summary>
            <param name="accountName">the account name to return information on</param>
            <returns>the AccountInfo for an account</returns>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.RequestFullAccountInfo(System.String)">
            <summary>
            Retrieves all information of the corresponding Account
            </summary>
            <param name="accountName">the account name to return information on</param>
            <returns>the AccountInfo for an account</returns>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.RegisterRealmServer(System.String,System.String,System.Int32,System.Int32,System.Int32,WCell.Constants.Login.RealmServerType,WCell.Constants.Login.RealmFlags,WCell.Constants.Realm.RealmCategory,WCell.Constants.Login.RealmStatus,WCell.Constants.ClientVersion)">
            <summary>
            Registers a realm server with the authentication server
            </summary>
            <param name="realmName">the name of the server</param>
            <param name="serverType">the type of the server</param>
            <param name="flags">the up/down status of the serer (green/red)</param>
            <param name="serverCategory">the timezone the server is in</param>
            <param name="serverStatus">the status of the server (locked or not)</param>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.UpdateRealmServer(System.String,System.Int32,System.Int32,WCell.Constants.Login.RealmServerType,WCell.Constants.Login.RealmFlags,WCell.Constants.Realm.RealmCategory,WCell.Constants.Login.RealmStatus)">
            <summary>
            Updates a realm server's entry in the realm list
            </summary>
            <param name="serverName">the name of the server</param>
            <param name="serverType">the type of the server</param>
            <param name="flags">the up/down status of the serer (green/red)</param>
            <param name="serverCategory">the timezone the server is in</param>
            <param name="serverStatus">the status of the server (locked or not)</param>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAllActiveAccounts(System.String[])">
            <summary>
            Sets multiple accounts as logged in
            </summary>
            <param name="accNames">the account names to login</param>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetMultipleAccountsLoggedOut(System.String[])">
            <summary>
            Removes multiple accounts from the 'logged in' list
            </summary>
            <param name="accNames">the account names to log out</param>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAccountLoggedIn(System.String)">
            <summary>
            Sets an account as logged in
            </summary>
            <param name="accName">the account to log in</param>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAccountLoggedOut(System.String)">
            <summary>
            Removes an account from the 'logged in' list
            </summary>
            <param name="accName">the account to log out</param>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.RetrieveRoleGroups">
            <summary>
            Retrieves the RoleGroupInfos
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.RetrieveRoleGroup(System.String)">
            <summary>
            Retrieves the RoleGroupInfo
            </summary>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAccountRole(System.Int64,System.String)">
            <summary>
            Sets the Account's Role
            </summary>
            <returns>Whether it succeeded.</returns>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAccountEmail(System.Int64,System.String)">
            <summary>
            Sets the Account's Role
            </summary>
            <returns>Whether it succeeded.</returns>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAccountActive(System.Int64,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Activates or deactivates the Account
            </summary>
            <returns>Whether it succeeded.</returns>
        </member>
        <member name="M:WCell.Intercommunication.IWCellIntercomService.SetAccountPass(System.Int64,System.String,System.Byte[])">
            <summary>
            Sets the Account password
            </summary>
            <returns>Whether it succeeded.</returns>
        </member>
    </members>
</doc>
