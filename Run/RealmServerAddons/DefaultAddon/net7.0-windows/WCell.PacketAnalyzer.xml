<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCell.PacketAnalyzer</name>
    </assembly>
    <members>
        <member name="F:WCell.PacketAnalysis.SimpleType.CString">
            <summary>
            0-terminated string
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.SimpleType.PascalStringByte">
            <summary>
            String that is preceeded with its length in one byte
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.SimpleType.PascalStringUShort">
            <summary>
            String that is preceeded with its length in a UShort
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.SimpleType.PascalStringUInt">
            <summary>
            String that is preceeded with its length in a UInt
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.AdvancedLogParser">
            <summary>
            A log parser that can be used to easily extract information from packet-logs.
            Make sure that all Packets that you use are defined in the XML files.
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.AdvancedLogParser.#ctor(WCell.PacketAnalysis.Logs.LogParser)">
            <summary>
            
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.AdvancedLogParser.#ctor(WCell.PacketAnalysis.Logs.LogParser,WCell.PacketAnalysis.Logs.LogHandler[])">
            <summary>
            
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.KSnifferLogConverter.Extract(System.String[],System.Boolean,WCell.PacketAnalysis.Logs.LogHandler[])">
            <summary>
            Extracts all Packets out of the given logged and default-formatted lines
            </summary>
            <param name="singleLinePackets">Whether the packet content is one single line (or false in case of the fancy ksniffer format)</param>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.KSnifferLogConverter.ConvertLog(System.String,System.String)">
            <summary>
            Renders the given log file to the given output.
            </summary>
            <param name="outputFile">The location of the file that the result should be written to</param>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.KSnifferLogConverter.ConvertLog(System.String,System.IO.TextWriter,System.Boolean)">
            <summary>
            Renders the given log file to the given output.
            </summary>
            <param name="output">A StreamWriter or Console.Out etc</param>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.KSnifferZorLogConverter">
            <summary>
            A converter for Log-files, using the format that is generated by the KSnifferZor packet sniffer.
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.KSnifferZorLogConverter.Extract(System.String,WCell.PacketAnalysis.Logs.LogHandler[])">
            <summary>
            Extracts all Packets out of the given logged and default-formatted lines
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.KSnifferZorLogConverter.ConvertLog(System.String,System.IO.TextWriter)">
            <summary>
            Renders the given log file to the given output.
            </summary>
            <param name="logFile">The log file.</param>
            <param name="output">A StreamWriter or Console.Out etc</param>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.SniffitztLog">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztLog.Header">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztLog.Packets">
            <remarks/>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.SniffitztlogHeader">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogHeader.AccountName">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogHeader.ClientBuild">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogHeader.ClientLang">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogHeader.RealmName">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogHeader.RealmAddress">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogHeader.Version">
            <remarks/>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.SniffitztlogPacket">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogPacket.Date">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogPacket.Direction">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogPacket.Opcode">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztlogPacket.Value">
            <remarks/>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztDirection.S2C">
            <summary>
            Server
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.Logs.SniffitztDirection.C2S">
            <summary>
            Client
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.SniffitztLogConverter">
            <summary>
            A converter for Log-files, using the format that is generated by the Sniffitzt-logger.
            See: http://sharesource.org/project/sniffitzt/
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.SniffitztLogConverter.Extract(System.String,WCell.PacketAnalysis.Logs.LogHandler[])">
            <summary>
            Extracts all Packets out of the given logged and default-formatted lines
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.SniffitztLogConverter.ConvertLog(System.String,System.IO.TextWriter)">
            <summary>
            Renders the given log file to the given output.
            </summary>
            <param name="logFile">The log file.</param>
            <param name="output">A StreamWriter or Console.Out etc</param>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.WlpConverter">
            <summary>
            A converter for Log-files, using the format that is generated by the Wlp packet sniffer.
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.WlpConverter.Extract(System.String,WCell.PacketAnalysis.Logs.LogHandler[])">
            <summary>
            Extracts all Packets out of the given logged and default-formatted lines
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.WlpConverter.ConvertLog(System.String,System.IO.TextWriter)">
            <summary>
            Renders the given log file to the given output.
            </summary>
            <param name="logFile">The log file.</param>
            <param name="output">A StreamWriter or Console.Out etc</param>
        </member>
        <member name="T:WCell.PacketAnalysis.Logs.ZorLogConverter">
            <summary>
            A converter for Log-files, using the format that is generated by the Zor's .NET packet sniffer.
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.ZorLogConverter.Extract(System.String,WCell.PacketAnalysis.Logs.LogHandler[])">
            <summary>
            Extracts all Packets out of the given logged and default-formatted lines
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Logs.ZorLogConverter.ConvertLog(System.String,System.IO.TextWriter)">
            <summary>
            Renders the given log file to the given output.
            </summary>
            <param name="logFile">The log file.</param>
            <param name="output">A StreamWriter or Console.Out etc</param>
        </member>
        <member name="P:WCell.PacketAnalysis.PacketAnalyzer.DefinitionCount">
            <summary>
            Amount of defined Packets.
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketAnalyzer.RegisterDefintion(WCell.PacketAnalysis.PacketDefinition)">
            <summary>
            Registers a new PacketDefinition. Overrides existing Definitions (if any)
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketAnalyzer.GetDefinition(WCell.Core.Network.PacketId,WCell.PacketAnalysis.PacketSender)">
            <summary>
            Gets the PacketDefinition for the PacketId
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketAnalyzer.GetDefinition(WCell.Core.Network.ServiceType,WCell.PacketAnalysis.DirectedPacketId)">
            <summary>
            Gets the PacketDefinition for the PacketId
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketAnalyzer.GetDefinition(WCell.Core.Network.ServiceType,System.UInt32,WCell.PacketAnalysis.PacketSender)">
            <summary>
            Gets the PacketDefinition of the given service for the given opcode
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketAnalyzer.GetDefinitions(WCell.Core.Network.ServiceType)">
            <summary>
            Gets all PacketDefinitions of the given service
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketAnalyzer.Dump(WCell.PacketAnalysis.Logs.ParsablePacketInfo,WCell.Util.IndentTextWriter)">
            <summary>
            Renders a single WoW - Packet
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.PacketParser">
            <summary>
            Parses Packets into a human-readable format
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.PacketParser.Packet">
            <summary>
            The packet being parsed
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.StaticListPacketSegmentStructure">
            <summary>
            The same as ListPacketSegmentStructure, just that the length of the list is a constant
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.ListPacketSegmentStructure.LengthSegmentName">
            <summary>
            The name of the Segment that contains the length (usually not necessary)
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.ListPacketSegmentStructure.LengthSegment">
            <summary>
            The Segment that contains the length (usually not necessary)
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.ListPacketSegmentStructure.MaxLength">
            <summary>
            Reads a single element by default
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.ComplexPacketSegmentStructure.MaxLength">
            <summary>
            Reads a single element by default
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.SwitchPacketSegmentStructure">
            <summary>
            A PacketSegmentStructure-wrapper whose content decides a switch in another segment of the packet
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.SwitchPacketSegmentStructure.MaxLength">
            <summary>
            The maximum length of this segment
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.PacketSegmentStructure.Name">
            <summary>
            An optional Name for this Segment
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.PacketSegmentStructure.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.PacketSegmentStructure.SegmentType">
            <summary>
            The type in which values should be converted after parsing (should be an enum)
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.PacketSegmentStructure.Index">
            <summary>
            The index of this segment within the packet's structure
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.PacketSegmentStructure.MaxLength">
            <summary>
            A Single element by default
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.PacketSegmentStructure.ConvertToUnderlyingType(System.Object)">
            <summary>
            Converts and returns the given value into the underlying SimpleType of this Segment.
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.ParsedSegment">
            <summary>
            Represents a part of a parsed packet
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.ParsedSegment.Empty">
            <summary>
            This is used to prevent Nullrefexceptions and a lot of extra null-checks.
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.ParsedSegment.ReturnEmptyInsteadOfNull">
            <summary>
            If set to true, instead of null, the indexer will always return an empty ParsedSegment object.
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.ParsedSegment.#ctor">
            <summary>
            Root ctor
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.ParsedSegment.Item(System.Int32)">
            <summary>
            Retrieve the element at the given index within a ListPacketSegmentStructure.
            Does not work for non-list segments.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.PacketAnalysis.Samples.MixedPASample.HandleGOQueryPackets(WCell.PacketAnalysis.PacketParser)">
            <summary>
            Writes the content of the given parsed Packet to an SQL file
            </summary>
            <param name="parser">Parsed SMSG_GAMEOBJECT_QUERY_RESPONSE packet</param>
        </member>
        <member name="M:WCell.PacketAnalysis.Samples.MixedPASample.HandleQuestPackets(WCell.PacketAnalysis.PacketParser)">
            <summary>
            Write human-readable version of log to ParsedQuestOutput.txt
            </summary>
            <param name="parser">Any kind of Quest-packet</param>
        </member>
        <member name="M:WCell.PacketAnalysis.Samples.MixedPASample.HandleUpdatePackets(WCell.PacketAnalysis.Updates.ParsedUpdatePacket)">
            <summary>
            Write human-readable version of log to ParsedQuestOutput.txt
            </summary>
            <param name="packet">Any kind of Update-packet</param>
        </member>
        <member name="T:WCell.PacketAnalysis.Samples.VehicleExtractor">
            <summary>
            Extracts vehicle-information from Update packets
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.SegmentReader">
            <summary>
            Reads and renders the next segment of the given packet.
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.SegmentRenderer">
            <summary>
            Reads and renders the next segment of the given packet.
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.SwitchCase">
            <summary>
            Represents a condition to be matched for determinig a <c>SwitchPacketSegmentStructure</c>
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.SwitchCase.m_valueList">
            <summary>
            Might be relevant for some switch-cases
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.SwitchCase.m_switch">
            <summary>
            This is mutual referencing (since Switches also hold a reference to Condition objects).
            If you often create/destroy Conditions on a running system, add a cleanup method to unset this variable.
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.SwitchCase.Value">
            <summary>
            The first (and maybe only) supplied value
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.SwitchCase.ValueList">
            <summary>
            All values as a list
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Updates.FieldRenderer.Render(WCell.Constants.Updates.ExtendedUpdateFieldId,WCell.PacketAnalysis.Updates.UpdateBlock)">
            <summary>
            Returns a string representation of the given field in the given block
            </summary>
        </member>
        <member name="T:WCell.PacketAnalysis.Updates.RenderHandler">
            <summary>
            Returns the amount of fields rendered (one field is 4 bytes)
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Updates.FieldRenderUtil.SetRenderer(System.Object,System.UInt32,WCell.PacketAnalysis.Updates.RenderHandler)">
            <summary>
            Sets the given RenderHandler for startField and fieldCount fields after it
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Updates.ParsedUpdatePacket.#ctor(System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="singleBlock">whether the given bytes represent a single UpdateBlock or a complete Packet</param>
        </member>
        <member name="M:WCell.PacketAnalysis.Updates.ParsedUpdatePacket.GetBlocks(WCell.Constants.Updates.UpdateType)">
            <summary>
            Returns all blocks of the given type
            </summary>
        </member>
        <member name="M:WCell.PacketAnalysis.Updates.ParsedUpdatePacket.Dispose">
            <summary>
            Removes circular references
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.Updates.UpdateBlock.UpdateCount">
            <summary>
            The actual amount of fields that got updated
            </summary>
        </member>
        <member name="P:WCell.PacketAnalysis.Updates.UpdateBlock.Item(WCell.Constants.Updates.ExtendedUpdateFieldId)">
            <summary>
            Renders the entry at the given id (or null if field is not set) as a string
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.PacketAnalysis.Updates.UpdateBlock.Dispose">
            <summary>
            Removes circular references
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.Xml.ChangeLog.Changes">
            <summary>
            Used to allow simple conversion etc
            </summary>
        </member>
        <member name="F:WCell.PacketAnalysis.Xml.XmlPacketDefinitions.CurrentVersion">
            <summary>
            Used for compliancy
            </summary>
        </member>
    </members>
</doc>
