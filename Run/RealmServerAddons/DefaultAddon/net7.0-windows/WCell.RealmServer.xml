<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCell.RealmServer</name>
    </assembly>
    <members>
        <member name="T:WCell.RealmServer.Achievements.AchievementCollection">
            <summary>
            Represents the Player's Achievements.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.HasCompleted(System.UInt32)">
            <summary>
            Checks if player has completed the given achievement.
            </summary>
            <param name="achievementEntry"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.GetAchievementCriteriaProgress(System.UInt32)">
            <summary>
            Returns progress with given achievement's criteria
            </summary>
            <param name="achievementCriteriaId"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementCollection.Owner">
            <summary>
            Returns the Achievement's Owner.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementCollection.AchievementsCount">
            <summary>
            Returns the amount of completed achievements.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.IsAchievementCompletable(WCell.RealmServer.Achievements.AchievementEntry)">
            <summary>
            Checks if the given achievement is completable.
            </summary>
            <param name="achievementEntry"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.IsCriteriaCompletable(WCell.RealmServer.Achievements.AchievementCriteriaEntry)">
            <summary>
            Checks if the given criteria is completable
            </summary>
            <param name="achievementCriteriaEntry"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.AddAchievement(WCell.RealmServer.Achievements.AchievementRecord)">
            <summary>
            Adds a new achievement to the list.
            </summary>
            <param name="achievementRecord"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.EarnAchievement(System.UInt32)">
            <summary>
            Adds a new achievement to the list, when achievement is earned.
            </summary>
            <param name="achievementEntry"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.EarnAchievement(WCell.RealmServer.Achievements.AchievementEntry)">
            <summary>
            Adds a new achievement to the list, when achievement is earned.
            </summary>
            <param name="achievementEntry"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.GetOrCreateProgressRecord(System.UInt32)">
            <summary>
            Returns the corresponding ProgressRecord. Creates a new one if the player doesn't have progress record.
            </summary>
            <param name="achievementCriteriaId"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.AddProgressRecord(WCell.RealmServer.Achievements.AchievementProgressRecord)">
            <summary>
            Adds a new progress record to the list.
            </summary>
            <param name="achievementProgressRecord"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.RemoveAchievement(System.UInt32)">
            <summary>
            Removes achievement from the player.
            </summary>
            <param name="achievementEntryId"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.RemoveAchievement(WCell.RealmServer.Achievements.AchievementRecord)">
            <summary>
            Removes achievement from the player.
            </summary>
            <param name="achievementRecord"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.RemoveProgress(System.UInt32)">
            <summary>
            Removes criteria progress from the player.
            </summary>
            <param name="achievementCriteriaId"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.RemoveProgress(WCell.RealmServer.Achievements.AchievementProgressRecord)">
            <summary>
            Removes criteria progress from the player.
            </summary>
            <param name="achievementProgressRecord"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.RemoveAchievementProgress(WCell.RealmServer.Achievements.AchievementEntry)">
            <summary>
            Removes all the progress of a given achievement.
            </summary>
            <param name="achievementEntry"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.IsAchieveable(WCell.RealmServer.Achievements.AchievementCriteriaEntry)">
            <summary>
            Checks if the player can ever complete the given achievement.
            </summary>
            <param name="achievementCriteriaEntry"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.CheckPossibleAchievementUpdates(WCell.Constants.Achievements.AchievementCriteriaType,System.UInt32,System.UInt32,WCell.RealmServer.Entities.Unit)">
            <summary>
            A method that will try to update the progress of all the related criterias.
            </summary>
            <param name="type">The Criteria Type.</param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="involved"></param>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementCollection.SetCriteriaProgress(WCell.RealmServer.Achievements.AchievementCriteriaEntry,System.UInt32,WCell.Constants.Achievements.ProgressType)">
            <summary>
            Sets the progress with a given Criteria entry.
            </summary>
            <param name="entry"></param>
            <param name="newValue"></param>
            <param name="progressType"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:WCell.RealmServer.Achievements.AchievementCriteriaGroupFlags" -->
        <member name="T:WCell.RealmServer.Achievements.AchievementCriteriaEntry">
            <summary>
            Do not change the layout of this class!
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Achievements.AchievementEntry.Criteria">
            <summary>
            List of criteria that needs to be satisfied to achieve this achievement
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Achievements.AchievementEntry.Rewards">
            <summary>
            List of all rewards that will be given once achievement is completed.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Achievements.AchievementMgr">
            <summary>
            Global container for Achievement-related data
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementMgr.IsRealmFirst(System.UInt32)">
            <summary>
            </summary>
            <param name="achievementEntryId">Achievement entry</param>
            <returns>Return false only if the achievement has RealmFirst flag and already achieved by someone</returns>
        </member>
        <member name="T:WCell.RealmServer.Achievements.AchievementProgressRecord">
            <summary>
            Represents the progress in one criterion of one Achievement.
            One Achievement can have many criteria.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementProgressRecord.CreateAchievementProgressRecord(WCell.RealmServer.Entities.Character,System.UInt32,System.UInt32)">
            <summary>
            Creates a new AchievementProgressRecord row in the database with the given information.
            </summary>
            <param name="account">the account this character is on</param>
            <param name="name">the name of the new character</param>
            <returns>the <seealso cref="T:WCell.RealmServer.Achievements.AchievementProgressRecord"/> object</returns>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementProgressRecord.RecordId">
            <summary>
            Encode char id and achievement id into RecordId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementProgressRecord.StartOrUpdateTime">
            <summary>
            The time when this record was inserted or last updated (depends on the kind of criterion)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Achievements.AchievementRecord.CreateNewAchievementRecord(WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Creates a new AchievementRecord row in the database with the given information.
            </summary>
            <param name="account">the account this character is on</param>
            <param name="name">the name of the new character</param>
            <returns>the <seealso cref="T:WCell.RealmServer.Achievements.AchievementRecord"/> object</returns>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementRecord.RecordId">
            <summary>
            Encode char id and achievement id into RecordId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementReward.DefaultSubject">
            <summary>
            Subject of the mail.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Achievements.AchievementReward.DefaultBody">
            <summary>
            Body of the mail.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Addons.RealmAddonMgr">
            <summary>
            Static helper and container class of all kinds of Addons
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Addons.RealmAddonMgr.IgnoredAddonFiles">
            <summary>
            A semicolon-separated (;) list of all libs or folders in the AddonDir that are not to be loaded.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.AIAction">
            <summary>
            Abstract atomary action of AI
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.AIAction.Owner">
            <summary>
            Owner of the action
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.AIAction.InterruptFlags">
            <summary>
            What can break the action.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.AIAction.Start">
            <summary>
            Start a new Action
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.AIAction.Update">
            <summary>
            Update
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.AIAction.Stop">
            <summary>
            Stop (usually called before switching to another Action)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.IAIAction.Start">
            <summary>
            Start executing current action
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.IAIAction.Update">
            <summary>
            Updates current action
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.IAIAction.Stop">
            <summary>
            Stops this Action
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.AIActionResult">
            <summary>
            All possible outcomes of AI Action.
            Some actions will never succeed (eg following a moving Target),
            some cannot even be executed (eg follow Master without a Master)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.AIActionResult.Success">
            <summary>
            The action has been successfully executed
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.AIActionResult.Executing">
            <summary>
            The action is in execution, needs an update
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.AIActionResult.Failure">
            <summary>
            The action cannot be executed. 
            Indicates to the Brain that it should resume DefaultAction
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.AITargetedAction">
            <summary>
            Abstract class representing an AI Action that has a target
            (casting spell for example)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.AITargetedAction.Range">
            <summary>
            Range in which the action can be executed
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.Combat.AIAttackAction">
            <summary>
            Attack with the main weapon
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Combat.AIAttackAction.Start">
            <summary>
            Called when starting to attack a new Target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Combat.AIAttackAction.Update">
            <summary>
            Called during every Brain tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Combat.AIAttackAction.Stop">
            <summary>
            Called when we stop attacking a Target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Combat.AIAttackAction.TryCastSpell">
            <summary>
            Tries to cast a Spell that is ready and allowed in the current context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.IAIActionCollection">
            <summary>
            An interface for AI Actions collections (i.e. a set of AI Action factories)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.IAIActionCollection.Item(WCell.RealmServer.AI.BrainState)">
            <summary>
            Gets action of specific type. If there is more than one suitable action, the best fitting one is chosen
            (using evalutor)
            </summary>
            <returns>AI Action</returns>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.Movement.AIMoveToThenExecAction.ActionCallback">
            <summary>
            The Action to execute, once the Target has been approached
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Movement.AIMoveIntoRangeOfGOThenExecAction.MoveToTargetPoint">
            <summary>
            Gets a preferred point, close to the current target and walks towards it
            </summary>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.Movement.AIMoveThenEnterAction.ArrivedState">
            <summary>
            The State to switch to, once arrived
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.Movement.AIMoveThenExecAction.ActionCallback">
            <summary>
            The Action to execute, once arrived
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.Movement.AIMoveToTargetAction">
            <summary>
            Moves to the Target and then enters Idle mode
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.Movement.AIOrientedTargetMoveAction">
            <summary>
            Lets the owner stay in a specific angle and distance towards a Target
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.Movement.AIOrientedTargetMoveAction.SameOrientation">
            <summary>
            Whether the Owner should have the same orientation as the Target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Movement.AIOrientedTargetMoveAction.CreateStayBehindAction(WCell.RealmServer.Entities.Unit)">
            <summary>
            Creates a Movement action that lets the owner stay behind its Target
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Movement.AIOrientedTargetMoveAction.CreateStayInFrontAction(WCell.RealmServer.Entities.Unit)">
            <summary>
            Creates a Movement action that lets the owner stay in front of its Target
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.Movement.AITargetMoveAction">
            <summary>
            Lets the owner stay in a specific distance towards a Target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.Movement.AITargetMoveAction.MoveToTargetPoint">
            <summary>
            Gets a preferred point, close to the current target and walks towards it
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.Movement.AIWaypointMoveAction">
            <summary>
            Movement AI action for moving through a set of waypoints
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.Movement.AIWaypointMoveAction.GoingBack">
            <summary>
            The direction of movement on waypoints. True - moving backwards, false - moving forward
            Only used for AIMovementType.ForwardThenBack
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.Movement.AIWaypointMoveAction.StayingOnWaypoint">
            <summary>
            Whether we are staying on a waypoint (pause)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.Movement.AIWaypointMoveAction.DesiredStartMovingTime">
            <summary>
            When to start moving again
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.Movement.AIWaypointMoveAction.Count">
            <summary>
            Amount of Waypoints
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.Spells.AISpellCastAction">
            <summary>
            AI Action for casting a spell
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.States.AICombatAction">
            <summary>
            An action of NPCs that selects targets, according to Threat and other factors and then
            updates the given <see cref="P:WCell.RealmServer.AI.Actions.States.AICombatAction.Strategy"/> to kill the current target.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Actions.States.AICombatAction.ReevaluateThreatTicks">
            <summary>
            Only check for a Threat update every 20 ticks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.States.AICombatAction.Strategy">
            <summary>
            Action to be executed after the highest aggro target has been selected.
            Start/stop is called everytime the Target changes.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.States.AICombatAction.WantsToRetreat">
            <summary>
            If true, the owner wants to retreat from combat and go back to its AttractionPoint
            due to too big distance and not being hit or hitting itself
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.States.AICombatAction.StartEngagingCurrentTarget(WCell.RealmServer.Entities.Unit)">
            <summary>
            Start attacking a new target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.States.AICombatAction.Disengage(WCell.RealmServer.Entities.Unit)">
            <summary>
            Stop attacking the old guy
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.States.AIEvadeAction">
            <summary>
            NPC leaves combat and goes home
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.States.AIFormationMoveAction">
            <summary>
            Lets the owner move in Formation
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.States.AIRoamAction">
            <summary>
            AI movemement action for roaming
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Actions.States.AIRoamAction.Strategy">
            <summary>
            The strategy to be used while roaming
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Actions.States.AIRoamAction.TryCastSpell">
            <summary>
            Tries to cast a Spell that is ready and allowed in the current context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.AI.Actions.States.IAIStateAction">
            <summary>
            Default Actions for States
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Idle">
            <summary>
            Don't do anything
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Roam">
            <summary>
            Do default actions (move along waypoints, if there are any)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Combat">
            <summary>
            Attack nearby enemies
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Evade">
            <summary>
            Toughen mob back up, run back Home then fall back to DefaultState
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Follow">
            <summary>
            Follow
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Guard">
            <summary>
            Follow and guard
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.FormationMove">
            <summary>
            Move in formation
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.BrainState.Dead">
            <summary>
            Dead.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Brains.BaseBrain">
            <summary>
            The default class for monsters' AI
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.BaseBrain.m_state">
            <summary>
            Current state
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.BaseBrain.m_defaultState">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.BaseBrain.m_SourcePoint">
            <summary>
            Actions to be executed in the idle state
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.BaseBrain.NPC">
            <summary>
            Owner as NPC.
            Returns null if Owner is not an NPC
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.BaseBrain.DefaultState">
            <summary>
            The State to fall back to when nothing else is up.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.BaseBrain.Actions">
            <summary>
            Collection of all actions that this brain can execute
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.BaseBrain.SourcePoint">
            <summary>
            The point of attraction where we took off when we started with the
            last action
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.BaseBrain.DefaultCombatAction">
            <summary>
            Returns the default AIAction for the Combat BrainState (to be executed when using State = BrainState.Combat).
            Returns null if that Action is not an AICombatAction - In that case use Actions[BrainState.Combat] instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.BaseBrain.Update(System.Int32)">
            <summary>
            Updates the AIAction by calling Perform. Called every tick by the Map
            </summary>
            <param name="dt">not used</param>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.BaseBrain.Perform">
            <summary>
            Performs a full Brain cycle
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.BaseBrain.OnDamageReceived(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.BaseBrain.OnActivate">
            <summary>
            Called when entering the World and when resurrected
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.BaseBrain.ScanAndAttack">
            <summary>
            Returns whether it found enemies and started attacking or false if none found.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.AI.Brains.IBrain">
            <summary>
            The interface to any brain (usually belonging to an NPC)
            A brain is a finite automaton with a queue of actions
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.State">
            <summary>
            Current state of the brain
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.DefaultState">
            <summary>
            Default state of the brain
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.IsAggressive">
            <summary>
            Aggressive brains actively seek for combat Action
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.IsRunning">
            <summary>
            Current Running state
            </summary>
            <value>if false, Brain will not update</value>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.Actions">
            <summary>
            The collection of all actions the IBrain can execute
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.CurrentAction">
            <summary>
            The AIAction that is currently being executed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.Brains.IBrain.SourcePoint">
            <summary>
            The origin location to which this Brain will always want to go back to (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.IBrain.Perform">
            <summary>
            Executes a brain cycle
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.IBrain.ClearCombat(WCell.RealmServer.AI.BrainState)">
            <summary>
            Used to get the owner of this brain out of combat and leave all fighting behind
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.IBrain.OnGroupChange(WCell.RealmServer.AI.Groups.AIGroup)">
            <summary>
            Called when the AIGroup of an NPC is about to change
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCEmoteType.NPC_Yell">
            <summary>
            Npc yells( Red text, big area )
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCEmoteType.NPC_Say">
            <summary>
            Npc says( Orange text, small area )
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCEmoteType.NPC_Emote">
            <summary>
            Does creature emote.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCEmoteType.NPC_Whisper">
            <summary>
            Wispers in-range players.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCBrainEvents.OnEnterCombat">
            <summary>
            Called when AI holder enters combat.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCBrainEvents.OnLeaveCombat">
            <summary>
            Called when AI holder leaves combat.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCBrainEvents.OnDeath">
            <summary>
            Called on AI holders death.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCBrainEvents.OnTargetDied">
            <summary>
            Called on AI holders main target death.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.Brains.NPCBrainEvents.OnUpdateEvent">
            <summary>
            Called on Update Event.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.Brains.MobBrain">
            <summary>
            TODO: Consider visibility of targets - Don't pursue target nor remove it from Threat list if not visible
            </summary>
            
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.MobBrain.DoEmote(System.String)">
            <summary>
            Makes npc Yell text.
            </summary>
            <param name="pText">Wanted text.</param>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.MobBrain.DoEmote(System.String,WCell.RealmServer.AI.Brains.NPCEmoteType)">
            <summary>
            Makes npc emote text.
            </summary>
            <param name="pText">Wanted Text.</param>
            <param name="pType">Type of emote, Yell, Say, etc.</param>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.MobBrain.DoEmote(System.String,WCell.RealmServer.AI.Brains.NPCEmoteType,System.UInt32)">
            <summary>
            Makes npc emote text. And play wanted sound.
            </summary>
            <param name="pText">Wanted Text,</param>
            <param name="pType">Type of emote, Yell, Say, etc.</param>
            <param name="pSoundId">Id of sound(Found in DBC).</param>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.MobBrain.OnDebuff(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellCast,WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Called when owner received a debuff by the given caster
            </summary>
            <param name="caster"></param>
            <param name="cast"></param>
            <param name="debuff"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.Brains.MobBrain.OnDamageReceived(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Called whenever someone performs a harmful action on this Mob.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.DefaultAIActionCollection.Init(WCell.RealmServer.Entities.Unit)">
            <summary>
            Method is called before the Unit is actually in the World
            to initialize the set of Actions.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="T:WCell.RealmServer.AI.Groups.AIGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.Groups.AIGroup.Add(WCell.RealmServer.Entities.NPC)">
            <summary>
            Adds the given NPC to this group
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnEnterCombat">
            <summary>
            Called on entering combat
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnDebuff(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellCast,WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Called on Brain's owner taking damage
            </summary>
            <param name="caster"></param>
            <param name="cast">instance of SpellCast (null for physical damage)</param>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnLeaveCombat">
            <summary>
            Called on leaving combat
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnHeal(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.Unit,System.Int32)">
            <summary>
            Called when the given healed Unit was healed by the given healer
            </summary>
            <param name="healer"></param>
            <param name="healed"></param>
            <param name="amtHealed"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnKilled(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.Unit)">
            <summary>
            Called when any Unit in visible range has been killed
            </summary>
            <param name="killerUnit">killer unit</param>
            <param name="victimUnit">killed unit</param>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnDeath">
            <summary>
            Called when the Owner is killed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnCombatTargetOutOfRange">
            <summary>
            Called when receiver is out of range for a strike in combat
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.IAICombatEventHandler.OnActivate">
            <summary>
            Called when the receiver's enters the world or gets resurrected
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AI.ThreatCollection">
            <summary>
            Collection representing threat values of an NPC against its foes
            TODO: Implement as priority list (B-Tree or Fibonacci Heap)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AI.ThreatCollection.RequiredHighestThreatPct">
            <summary>
            Percentage of the current highest threat to become the new one.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.ThreatCollection.Taunter">
            <summary>
            The NPC is forced to only attack the taunter
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.ThreatCollection.Group">
            <summary>
            The AIGroup the owner of this collection belongs to
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AI.ThreatCollection.Item(WCell.RealmServer.Entities.Unit)">
            <summary>
            Use this indexer to get or set absolute values of Threat.
            Returns -1 for non-aggressor Units.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.ThreatCollection.AddNewIfNotExisted(WCell.RealmServer.Entities.Unit)">
            <summary>
            Call this method when encountering a new Unit
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.ThreatCollection.IsNewHighestThreat(System.Int32)">
            <summary>
            Whether the given amount is at least RequiredHighestThreatPct more than the current highest Threat
            </summary>
            <param name="threat"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AI.ThreatCollection.GetHighestThreatAggressorPairs(System.Int32)">
            <summary>
            Returns an array of size 0-max, containing the Units with the highest Threat and their amount.
            </summary>
            <param name="max"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.ThreatCollection.GetHighestThreatAggressors(System.Int32)">
            <summary>
            Returns an array of size 0-max, containing the Units with the highest Threat.
            </summary>
            <param name="max"></param>
        </member>
        <member name="M:WCell.RealmServer.AI.ThreatCollection.GetAggressorByThreatRank(System.Int32)">
            <summary>
            Returns the aggressor at the given 0-based index within the collection.
            Selects the least one in the list, if there is no such low rank
            Note: The aggressor with Rank = 0 is usually the CurrentAggressor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AI.ThreatCollection.Clear">
            <summary>
            Removes all Threat
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AreaTriggers.AreaTrigger">
            <summary>
            AreaTriggers are invisible areas ingame that are always known by the client.
            An AreaTrigger is triggered when a Character steps on it.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTrigger.IsInArea(WCell.RealmServer.Entities.Character)">
            <summary>
            Returns whether the given object is within the bounds of this AreaTrigger.
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTrigger.CheckTrigger(WCell.RealmServer.Entities.Character)">
            <summary>
            Does general checks, for whether the given Character may trigger this and sends
            an error response if not.
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTrigger.Trigger(WCell.RealmServer.Entities.Character)">
            <summary>
            Triggers this trigger
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="T:WCell.RealmServer.AreaTriggers.AreaTriggerHandler">
            <summary>
            Returns whether the given Character has triggered the given trigger or false if not allowed.
            </summary>
            <param name="chr"></param>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.NoAction(WCell.RealmServer.Entities.Character,WCell.RealmServer.AreaTriggers.AreaTrigger)">
            <summary>
            Do nothing
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.HandleTeleport(WCell.RealmServer.Entities.Character,WCell.RealmServer.AreaTriggers.AreaTrigger)">
            <summary>
            Teleports into an instance
            </summary>
            <param name="chr"></param>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.HandleQuestTrigger(WCell.RealmServer.Entities.Character,WCell.RealmServer.AreaTriggers.AreaTrigger)">
            <summary>
            Triggers Quest
            </summary>
            <param name="chr"></param>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.HandleRest(WCell.RealmServer.Entities.Character,WCell.RealmServer.AreaTriggers.AreaTrigger)">
            <summary>
            Start resting
            </summary>
            <param name="chr"></param>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.HandleSpell(WCell.RealmServer.Entities.Character,WCell.RealmServer.AreaTriggers.AreaTrigger)">
            <summary>
            Cast a spell on the Character.
            [NYI]
            </summary>
            <param name="chr"></param>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.Initialize">
            <summary>
            Depends on Table-Creation (Third)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.AreaTriggers.AreaTriggerMgr.Loaded">
            <summary>
            Loaded flag
            </summary>
        </member>
        <member name="T:WCell.RealmServer.AreaTriggers.ATTemplate">
            <summary>
            All information associated with AreaTriggers
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.RequiredItemId">
            <summary>
            Item, required for triggering
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.RequiredItem2Id">
            <summary>
            Item, required for triggering
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.RequiredHeroicKeyId">
            <summary>
            Required heoric key
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.RequiredHeroicKey2Id">
            <summary>
            Required heoric key
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.RequiredQuestId">
            <summary>
            Required quest to be finished
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.TriggerQuestId">
            <summary>
            Quest to be triggered
            </summary>
        </member>
        <member name="F:WCell.RealmServer.AreaTriggers.ATTemplate.RequiredFailedText">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.Arenas.Arena">
            <summary>
            CMSG_BATTLEMASTER_JOIN_ARENA
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.Arenas.ArenaMgr.OfflineChars">
            <summary>
            Maps char-id to the corresponding ArenaTeamMember object so it can be looked up when char reconnects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaMgr.RegisterArenaTeam(WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam)">
            <summary>
            New or loaded arena team
            </summary>
            <param name="guild"></param>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.SyncRoot">
            <summary>
            The SyncRoot against which to synchronize this arena team(when iterating over it or making certain changes)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Id">
            <summary>
            Id of this team
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Name">
            <summary>
            Arena team's name
            </summary>
            <remarks>length is limited with MAX_ARENATEAM_LENGTH</remarks>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Type">
            <summary>
            Type of this arena team
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Slot" -->
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Leader">
            <summary>
            Arena team leader's ArenaTeamMember
            Setting it does not send event to the team. Use ArenaTeam.SendEvent
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Stats">
            <summary>
            Stats of the arena team
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.MemberCount">
            <summary>
            Number of arena team's members
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.#ctor(WCell.RealmServer.Database.CharacterRecord,System.String,System.UInt32)">
            <summary>
            Creates a new ArenaTeamRecord row in the database with the given information.
            </summary>
            <param name="leader">leader's character record</param>
            <param name="name">the name of the new character</param>
            <returns>the <seealso cref="T:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam"/> object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.InitAfterLoad" -->
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Register">
            <summary>
            Initializes arena team after its creation or restoration from DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.AddMember(WCell.RealmServer.Database.CharacterRecord)">
            <summary>
            Adds a new arena team member
            Calls ArenaTeamMgr.OnJoinTeam
            </summary>
            <param name="chr">character to add</param>
            <returns>ArenaTeamMember of new member</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.RemoveMember(WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember)">
            <summary>
            Removes ArenaTeamMember from the arena team
            </summary>
            <param name="member">member to remove</param>
            <param name="update">if true, sends event to the team</param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.RemoveMember(WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember,System.Boolean)">
            <summary>
            Removes ArenaTeamMember from the arena team
            </summary>
            <param name="member">member to remove</param>
            <param name="update">if false, changes to the team will not be promoted anymore (used when the team is being disbanded)</param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.OnRemoveMember(WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember)">
            <summary>
            Called before the given member is removed to clean up everything related to the given member
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.SendMessage(WCell.RealmServer.Chat.IChatter,System.String)">
            <summary>
            Say something to this target
            </summary>		
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Item(System.UInt32)">
            <summary>
            Requests member by his low id
            </summary>
            <param name="lowMemberId">low id of member's character</param>
            <returns>requested member or null</returns>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Item(System.String)">
            <summary>
            Requests member by his name
            </summary>
            <param name="name">name of member's character (not case-sensitive)</param>
            <returns>requested member</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.Disband">
            <summary>
            Disbands the arena team
            </summary>
            <param name="update">if true, sends event to the team</param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam.ChangeLeader(WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember)">
            <summary>
            Changes leader of the arena team
            </summary>
            <param name="newLeader">ArenaTeamMember of new leader</param>
            <param name="update">if true, sends event to the team</param>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember">
            <summary>
            Represents the relationship between a Character and its Arena Team.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember.Id">
            <summary>
            The low part of the Character's EntityId. Use EntityId.GetPlayerId(Id) to get a full EntityId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember.Name">
            <summary>
            The name of this ArenaTeamMember's character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember.Class">
            <summary>
            Class of ArenaTeamMember
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember.Character">
            <summary>
            Returns the Character or null, if this member is offline
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Arenas.ArenaTeamMember.LeaveArenaTeam">
            <summary>
            Removes this member from its team
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.Battleground.AddPlayersToBiggerTeamDefault">
            <summary>
            Whether to add to a Team even if it already has more players
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.Battleground.BuffSmallerBGTeam">
            <summary>
            Whether to buff <see cref="T:WCell.RealmServer.Entities.Character"/>s of smaller Teams if they have less players
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.Battleground.DefaultShutdownDelayMillis">
            <summary>
            Default delay until shutdown when player-count drops 
            below minimum in seconds
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.Battleground.StartPlayerPct">
            <summary>
            Start the BG once this many % of players joined
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.Battleground._instanceQueue">
            <summary>
            All currently pending requests of Characters who want to join this particular Battleground.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.Status">
            <summary>
            The current <see cref="T:WCell.Constants.BattlegroundStatus"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.InstanceQueue">
            <summary>
            The <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/> that manages requests for this particular Instance
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.ParentQueue">
            <summary>
            The <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/> that manages general requests (not for a particular Instance)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.Winner">
            <summary>
            The team that won (or null if still in progress)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.IsShuttingDown">
            <summary>
            Get/sets whether this Battleground will shutdown soon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.StartTime">
            <summary>
            The time when this BG started. default(DateTime) before it actually started.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.RuntimeMillis">
            <summary>
            Returns the time since the Battleground started in millis or 0 while still preparing.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.PreparationTimeMillis">
            <summary>
            Preparation time of this BG
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.RemainingShutdownDelay">
            <summary>
            Time until shutdown.
            Non-positive value cancels shutdown.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.IsActive">
            <summary>
            Whether or not this battleground is currently active. (in progress)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.IsOpen">
            <summary>
            Whether to allow people to join this Battleground
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.IsAddingPlayers">
            <summary>
            Whether Characters can still join
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.IsHolidayBG">
            <summary>
            Whether to start the mode "Call To Arms" and change timers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.CanShutdown">
            <summary>
            Whether to start the Shutdown timer when <see cref="P:WCell.RealmServer.Global.Map.PlayerCount"/> drops below the minimum
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.AddPlayersToBiggerTeam">
            <summary>
            Whether to add Players from the Queue even if the Team
            already has more Players
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.Battleground.Template">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.StartShutdown(System.Int32)">
            <summary>
            Starts the shutdown timer with the given delay
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.FinishFight">
            <summary>
            Enter the final state
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.CheckShutdown">
            <summary>
            Toggle <see cref="P:WCell.RealmServer.Battlegrounds.Battleground.IsShuttingDown"/> or <see cref="P:WCell.RealmServer.Battlegrounds.Battleground.CanShutdown"/> if required
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.GetTeam(WCell.Constants.BattlegroundSide)">
            <summary>
            Returns the <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundTeam"/> of the given side
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.TryJoin(WCell.RealmServer.Entities.Character,System.Boolean,WCell.Constants.BattlegroundSide)">
            <summary>
            Adds the given Character (or optionally his/her Group) to the Queue of this Battleground if possible.
            Make sure that HasQueue is true before calling this method.
            </summary>
            <param name="chr"></param>
            <param name="asGroup"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.ProcessPendingPlayers">
            <summary>
            Add as many players possible to both Teams
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.ProcessPendingPlayers(WCell.RealmServer.Battlegrounds.BattlegroundTeam)">
            <summary>
            Removes up to the max possible amount of players from the Queues
            and adds them to the Battleground.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.ProcessPendingPlayers(WCell.Constants.BattlegroundSide,System.Int32)">
            <summary>
            Removes up to the given amount of players from the Queues
            and adds them to the Battleground.
            </summary>
            <param name="amount"></param>
            <remarks>Map-Context required. Cannot be used once the Battleground is over.</remarks>
            <returns>The amount of remaining players</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.FinalizeBattleground(System.Boolean)">
            <summary>
            Starts to clean things up once the BG is over.
            Might be called right before the BG is disposed.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.CreateHordeTeam">
            <summary>
            Creates a new BattlegroundTeam during initialization of the BG
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.CreateAllianceTeam">
            <summary>
            Creates a new BattlegroundTeam during initialization of the BG
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.RewardPlayers">
            <summary>
            Override this to give the players mark of honors and whatnot.
            Note: Usually should trigger  a spell on the characters
            e.g. SpellId.CreateWarsongMarkOfHonorWinner
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.Battleground.LogBackIn(WCell.RealmServer.Entities.Character)">
            <summary>
            Is called when a Character logs back in
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundFaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundInfo">
            <summary>
            Contains all the neccessary battleground information about a player.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.Character">
            <summary>
            The character this information is associated with.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.Team">
            <summary>
            The battlegrounds team this character is associated with.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.Stats">
            <summary>
            Stats of current or last Battleground (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.Invitation">
            <summary>
            Holds the outstanding, if any, invitation to a battleground team.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.EntryMap">
            <summary>
            The map that this character was originally in before going to the battlegrounds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.EntryPosition">
            <summary>
            The position that this character was originally at before going to the battlegrounds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.EntryOrientation">
            <summary>
            The orientation that this character was originally in before going to the battlegrounds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.IsDeserter">
            <summary>
            Whether or not this character is considered a deserter. (Deserters cannot join battlegrounds)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.IsEnqueuedForBattleground">
            <summary>
            Whether or not this character is enqueued for any battlegrounds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.Relations">
            <summary>
            The battlegrounds relations for this character, if any.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.RelationCount">
            <summary>
            The number of current battlegrounds relations.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.HasAvailableQueueSlots">
            <summary>
            Whether or not this character can queue for any more battlegrounds.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.TeleportBack">
            <summary>
            Returns the character to their original location prior to entering the Battleground.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.SetCharacterEntry(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3@,System.Single)">
            <summary>
            Sets the entry position of the character.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.GetRelation(WCell.Constants.BattlegroundId)">
            <summary>
            Gets the <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundRelation"/> for the given Battleground for
            the Character.
            </summary>
            <param name="bgId"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.RemoveRelation(WCell.Constants.BattlegroundId)">
            <summary>
            Removes the <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundRelation"/> for the given Battleground.
            This also cancels invitations and leaves the Battleground.
            If it was a Queue request for the Group and this is the GroupLeader, it also
            removes everyone else from the Queue.
            </summary>
            <param name="id"></param>
            <returns>The index of the removed relation or -1 if none removed</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.CancelRelation(WCell.Constants.BattlegroundId)">
            <summary>
            Removes the corresponding relation and removes it from the queue
            if it is enqueued.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.RemoveRelation(System.Int32)">
            <summary>
            Make sure the given index is valid
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.InviteTo(WCell.RealmServer.Battlegrounds.BattlegroundTeam)">
            <summary>
            Invites this Character to the given Battleground or enqueues him/her.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.AddRelation(WCell.RealmServer.Battlegrounds.BattlegroundRelation)">
            <summary>
            
            </summary>
            <param name="relation"></param>
            <returns>The index of the newly created relation</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.GetIndex(WCell.Constants.BattlegroundId)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>Requires Context</remarks>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundInfo.CancelAllRelations">
            <summary>
            Cancel all relations
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundMgr.Instances">
            <summary>
            All Battleground instances
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundMgr.Templates">
            <summary>
            Indexed by BattlegroundId
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundMgr.FlagDeserters">
            <summary>
            Whether to flag <see cref="T:WCell.RealmServer.Entities.Character"/>s with the <see cref="P:WCell.RealmServer.Battlegrounds.BattlegroundMgr.DeserterSpell"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundMgr.InvitationTimeoutMillis">
            <summary>
            Time until an invitation to a Battleground will be cancelled.
            Default: 2 minutes
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundMgr.MaxHonorableDeaths">
            <summary>
            Amount of deaths that yield honor to the killing opponent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundMgr.MaxQueuesPerChar">
            <summary>
            Max amount of Battlegrounds one Character may queue up for at a time
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundMgr.DeserterSpellId">
            <summary>
            The spell casted on players who leave a battleground before completion.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundMgr.GetGlobalQueue(WCell.Constants.BattlegroundId,WCell.RealmServer.Entities.Unit)">
            <summary>
            Gets the global <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/> for the given Battleground for
            the given Character.
            </summary>
            <param name="bgid"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundMgr.GetGlobalQueue(WCell.Constants.BattlegroundId,System.Int32)">
            <summary>
            Gets the global <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/> for the given Battleground for
            the given Character.
            </summary>
            <param name="bgid"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundMgr.GetInstanceQueue(WCell.Constants.BattlegroundId,System.UInt32,WCell.RealmServer.Entities.Unit)">
            <summary>
            Gets the <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/> for a specific instance of the given Battleground for
            the given Character.
            </summary>
            <param name="bgid"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundMgr.GetInstanceQueue(WCell.Constants.BattlegroundId,System.UInt32,System.Int32)">
            <summary>
            Gets the <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/> for a specific instance of the given Battleground for
            the given Character.
            </summary>
            <param name="bgid"></param>
            <param name="level">The level determines the bracket id of the queue.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundMgr.TalkToBattlemaster(WCell.RealmServer.Entities.NPC,WCell.RealmServer.Entities.Character)">
            <summary>
            
            </summary>
            <param name="bm"></param>
            <param name="chr"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundMgr.EnqueuePlayers(WCell.RealmServer.Entities.Character,WCell.Constants.BattlegroundId,System.UInt32,System.Boolean)">
            <summary>
            Enqueues players in a battleground queue.
            </summary>
            <param name="chr">the character who enqueued</param>
            <param name="bgId">the type of battleground</param>
            <param name="instanceId">the instance id of the battleground</param>
            <param name="asGroup">whether or not to enqueue the character or his/her group</param>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue">
            <summary>
            A BattlegroundQueue manages access of Players to Battlegrounds
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundRelation">
            <summary>
            Represents the relation between one or multiple Character and a Battleground.
            This is enqueued in the <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundQueue"/>s once a Character
            requests to join one.
            Each Character maintains the relation during the entire stay in a <see cref="T:WCell.RealmServer.Battlegrounds.Battleground"/>.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundRelation.IsEnqueued">
            <summary>
            Whether this is still enqueued
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundStats.WriteSpecialStats(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Append bg-specific stats to pvp-stats Packet
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundTeam">
            <summary>
            Represents a team in a Battleground
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.ReservedSlots">
            <summary>
            Amount of reserved slots.
            This is used to hold slots open for invited Players.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.OpposingTeam">
            <summary>
            The <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundTeam"/> which currently fights against this one
            in a <see cref="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.Battleground"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.IsFull">
            <summary>
            A full team has reached its max player count: <see cref="F:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.MaxPlayersPerTeam"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.TotalCount">
            <summary>
            The amount of all Players in this team, including offline ones
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.OpenPlayerSlotCount">
            <summary>
            Amount of available slots (can be negative)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeam.CharacterCount">
            <summary>
            The amount of online Characters
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTeam.ForeachCharacter(System.Action{WCell.RealmServer.Entities.Character})">
            <summary>
            Iterates over all online Characters in this team
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTeam.DistributeSharedHonor(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Distributes honor to Teammates within 40 yards of honorable kill.
            </summary>
            <param name="earner">Character that made the honorable kill.</param>
            <param name="honorPoints">Honor earned by the earner.</param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTeam.Enqueue(WCell.RealmServer.Entities.ICharacterSet)">
            <summary>
            Make sure that Battleground.HasQueue is true before calling this method.
            Adds the given set of Characters to this team's queue. 
            Will invite immediately if there are enough open slots and
            <see cref="P:WCell.RealmServer.Battlegrounds.Battleground.IsAddingPlayers"/> is true.
            </summary>
            <param name="chrs"></param>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundTeamQueue">
            <summary>
            Each side of a Battelground has its own Queue
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.BattlegroundTeamQueue.ParentQueue">
            <summary>
            Warning: May be null if this belongs to an <see cref="T:WCell.RealmServer.Battlegrounds.InstanceBattlegroundQueue"/> after the BG has been disposed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTeamQueue.DequeueCharacters(System.Int32,WCell.RealmServer.Battlegrounds.Battleground)">
            <summary>
            Removes the given amount of Characters from this Queue and adds them
            to the given <see cref="T:WCell.RealmServer.Battlegrounds.Battleground"/>
            </summary>
            <param name="amount"></param>
            <param name="bg"></param>
            <returns>The amount of dequeued Characters</returns>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.BattlegroundTemplate">
            <summary>
            Battleground information
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.AllianceStartPosIndex">
            <summary>
            Load pos from DBCs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.HordeStartPosIndex">
            <summary>
            Load pos from DBCs
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.GetQueue(WCell.RealmServer.Entities.Character)">
            <summary>
            Gets the appropriate queue for the given character.
            </summary>
            <param name="chr">the character</param>
            <returns>the appropriate queue for the given character</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.GetQueue(System.Int32)">
            <summary>
            Gets the appropriate queue for a character of the given level.
            </summary>
            <param name="level">the level of the character</param>
            <returns>the appropriate queue for the given character level</returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.EnqueueCharacter(WCell.RealmServer.Entities.Character,WCell.Constants.BattlegroundSide)">
            <summary>
            Enqueues a single Character to the global Queue of this Template
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.TryEnqueue(WCell.RealmServer.Entities.Character,System.Boolean)">
            <summary>
            Tries to enqueue the given Character or -if specified- his/her entire Group
            </summary>
            <param name="chr"></param>
            <param name="asGroup"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.TryEnqueue(WCell.RealmServer.Entities.Character,System.Boolean,WCell.Constants.BattlegroundSide)">
            <summary>
            Tries to enqueue the given Character or -if specified- his/her entire Group
            </summary>
            <param name="chr"></param>
            <param name="asGroup"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.TryEnqueue(WCell.RealmServer.Entities.Character,System.Boolean,System.UInt32)">
            <summary>
            Tries to enqueue the given Character or -if specified- his/her entire Group
            </summary>
            <param name="chr"></param>
            <param name="asGroup"></param>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.BattlegroundTemplate.TryEnqueue(WCell.RealmServer.Entities.Character,System.Boolean,System.UInt32,WCell.Constants.BattlegroundSide)">
            <summary>
            Tries to enqueue the given character or his whole group for the given battleground.
            </summary>
            <param name="chr">the character who enqueued</param>
            <param name="asGroup">whether or not to enqueue the character or his/her group</param>
        </member>
        <member name="T:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue">
            <summary>
            A <see cref="T:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue"/> contains all instances of a particular level-range
            of one <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundTemplate"/>.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue.DefaultBGCreationPlayerThresholdPct">
            <summary>
            A new BG is created and invitation will start once the queue contains at least this percentage
            of the BG's max player limit.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue.Instances">
            <summary>
            All <see cref="P:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue.Battleground"/>-instances of this queue's <see cref="T:WCell.RealmServer.Battlegrounds.BattlegroundTemplate"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue.CreateBattleground">
            <summary>
            Make sure to load GOs before calling this method
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue.CreateBattleground``1">
            <summary>
            Make sure to load GOs before calling this method
            </summary>
            <typeparam name="B"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Battlegrounds.GlobalBattlegroundQueue.Enqueue(WCell.RealmServer.Entities.ICharacterSet,WCell.Constants.BattlegroundSide)">
            <summary>
            Enqueues the given Character(s) for the given side
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Calendars.Count5">
            <summary>
            Placeholder class for unknown values in calendar packets
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChannelMember">
            <summary>
            Defines a member of a chat channel.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChannelMember.User">
            <summary>
            The member of the channel.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChannelMember.Flags">
            <summary>
            The member's channel flags.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChannelMember.#ctor(WCell.RealmServer.Misc.IUser)">
            <summary>
            Creates a new <see cref="T:WCell.RealmServer.Chat.ChannelMember" /> given the user.
            </summary>
            <param name="user">the user being represented</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChannelMember.#ctor(WCell.RealmServer.Misc.IUser,WCell.Constants.Chat.ChannelMemberFlags)">
            <summary>
            Creates a new <see cref="T:WCell.RealmServer.Chat.ChannelMember" /> given the user and their flags.
            </summary>
            <param name="user">the user being represented</param>
            <param name="flags">the flags of the user</param>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChannelMember.IsOwner">
            <summary>
            Whether or not the user is the owner of the channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChannelMember.IsModerator">
            <summary>
            Whether or not the user is a moderator on the channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChannelMember.IsVoiced">
            <summary>
            Whether the user is voiced on the channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChannelMember.IsMuted">
            <summary>
            Whether the user is muted on the channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChannelMember.IsVoiceMuted">
            <summary>
            Whether the user is voice muted on the channel.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChannelMember.op_GreaterThan(WCell.RealmServer.Chat.ChannelMember,WCell.RealmServer.Chat.ChannelMember)">
            <summary>
            Operator overload for the greater-than operator.
            </summary>
            <param name="member">the first <see cref="T:WCell.RealmServer.Chat.ChannelMember" /></param>
            <param name="member2">the second <see cref="T:WCell.RealmServer.Chat.ChannelMember" /></param>
            <returns>true if the first member is greater than the second, based on role, ownership
            of the channel, and moderator status on the channel</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChannelMember.op_LessThan(WCell.RealmServer.Chat.ChannelMember,WCell.RealmServer.Chat.ChannelMember)">
            <summary>
            Operator overload for the greater-than operator.
            </summary>
            <param name="member1">the first <see cref="T:WCell.RealmServer.Chat.ChannelMember" /></param>
            <param name="member2">the second <see cref="T:WCell.RealmServer.Chat.ChannelMember" /></param>
            <returns>true if the first member is greater than the second, based on role, ownership
            of the channel, and moderator status on the channel</returns>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatChannel">
            <summary>
             TODO: Implement Channel ids correctly: Send channel id and hope its used by the client to lookup the correct name locally
             TODO: Have Zone channels stored in a list per ZoneInfo object and updated correctly
             TODO: Cleanup/move special handling to seperate handlers 
             TODO: Get rid of ImmutableDictionary and instead put channel-specific stuff into its own message-loop
             
             The chat channel class
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatChannel.JoinValidationHandler">
            <summary>
            Delegate for join validators.
            </summary>
            <param name="chatChannel">the channel being joined</param>
            <param name="user">the user joining the channel</param>
            <returns>whether or not the user can join the channel</returns>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatChannel.StaffValidator">
            <summary>
            Default validator for staff-only channels.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatChannel.Staff">
            <summary>
            Default staff-only channel.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.#ctor(WCell.RealmServer.Chat.ChatChannelGroup)">
            <summary>
            Default Ctor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.#ctor(WCell.RealmServer.Chat.ChatChannelGroup,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.#ctor(WCell.RealmServer.Chat.ChatChannelGroup,System.String,WCell.RealmServer.Chat.ChatChannelFlagsEntry,System.Boolean,WCell.RealmServer.Chat.ChatChannel.JoinValidationHandler)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.#ctor(WCell.RealmServer.Chat.ChatChannelGroup,System.String,WCell.Constants.Chat.ChatChannelFlags,System.Boolean,WCell.RealmServer.Chat.ChatChannel.JoinValidationHandler)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of channel</param>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.Manager">
            <summary>
            Gets the chat channel manager that this channel resides under.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.JoinValidator">
            <summary>
            The join validator for this channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.Members">
            <summary>
            A map of all users in the channel, sorted by low entity ID.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.Owner">
            <summary>
            Gets or sets the owner of this channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.Password">
            <summary>
            Gets or sets the password for the channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.Announces">
            <summary>
            Determines whether or not joins/parts of the channel 
            are announced to all the channel users.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.IsConstant">
            <summary>
            Whether or not the channel is constant. That is, General/LFG/Guild Rec., etc.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.IsModerated">
            <summary>
            Whether or not the channel is moderated.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.IsLFG">
            <summary>
            TODO: Looking for Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.IsTrade">
            <summary>
            TODO: Trade
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannel.RequiresUnguilded">
            <summary>
            TODO: Guild Recruitment
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.IsPresent(System.UInt32)">
            <summary>
            Whether the given Entity-id is present in this channel
            </summary>
            <param name="lowId">the player to look for</param>
            <returns>true if the player is in this channel; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.EnsurePresence(WCell.RealmServer.Misc.IUser,WCell.RealmServer.Chat.ChannelMember@)">
            <summary>
            Whether the given Entity-id is present in this channel
            </summary>
            <returns>true if the player is in this channel; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.TryJoin(WCell.RealmServer.Misc.IUser)">
            <summary>
            Adds a player to this channel.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.TryJoin(WCell.RealmServer.Misc.IUser,System.String,System.Boolean)">
            <summary>
            Adds a player to this channel.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.Leave(WCell.RealmServer.Misc.IUser,System.Boolean)">
            <summary>
            Removes a player from a channel.
            </summary>
            <param name="silent">whether or not to tell the player/channel they have left</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.Delete">
            <summary>
            Deletes this channel
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.Kick(WCell.RealmServer.Chat.ChannelMember,System.String)">
            <summary>
            Kicks and -maybe- bans a player from the channel.
            </summary>
            <returns>Whether the player was found and kicked or false if not found or privs were insufficient.</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.Kick(WCell.RealmServer.Chat.ChannelMember,WCell.RealmServer.Misc.IUser)">
            <summary>
            Kicks and -maybe- bans a player from the channel.
            </summary>
            <returns>Whether the player was kicked or false if privs were insufficient.</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.IsBanned(System.UInt32)">
            <summary>
            Whether given Entity-id is banned from this channel
            </summary>
            <param name="lowId">the player to look for</param>
            <returns>true if the player is banned; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.SetBanned(WCell.RealmServer.Chat.ChannelMember,WCell.RealmServer.Misc.IUser,System.Boolean)">
            <summary>
            Returns whether the Ban could be added/removed or false if privs were insufficient.
            </summary>
            <param name="member"></param>
            <param name="target"></param>
            <param name="addBan"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.EnsureModerator(WCell.RealmServer.Misc.IUser,System.String)">
            <summary>
            Ensures that the given user is on the channel and has mod status.
            If not, sends corresponding error messages to user.
            </summary>
            <param name="user"></param>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.EnsurePresence(WCell.RealmServer.Misc.IUser,System.String,WCell.RealmServer.Chat.ChannelMember@)">
            <summary>
            Retrieves the given ChannelMember and the Channel it is on. 
            If not, sends corresponding error messages to user and returns null.
            </summary>
            <param name="user"></param>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.EnsurePresence(WCell.RealmServer.Misc.IUser,System.String,System.String,WCell.RealmServer.Chat.ChannelMember@,WCell.RealmServer.Chat.ChannelMember@)">
            <summary>
            Retrieve the given two ChannelMembers and the Channel they are on, if they
            are all on the channel. If not, sends corresponding error messages to user.
            </summary>
            <param name="user"></param>
            <param name="channelName"></param>
            <param name="targetName"></param>
            <param name="userMember"></param>
            <param name="targetMember"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.CheckPrivs(WCell.RealmServer.Chat.ChannelMember,WCell.RealmServer.Chat.ChannelMember,System.Boolean)">
            <summary>
            Checks for whether the given member can perform a beneficial or harmful action on the targetMember
            within this channel.
            </summary>
            <param name="member"></param>
            <param name="targetMember"></param>
            <param name="beneficial"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannel.SendMessage(WCell.RealmServer.Chat.IChatter,System.String)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="sender">the chatter saying the message</param>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatChannelGroup">
            <summary>
             Manager for chat channels of one Faction.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.#cctor">
            <summary>
            Default static constructor.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatChannelGroup.Global">
            <summary>
            Channel manager for Global channels.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatChannelGroup.Alliance">
            <summary>
            Channel manager for the Alliance channels.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatChannelGroup.Horde">
            <summary>
            Channel manager for the Horde channels.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.InitializeDefaultChannels">
            <summary>
            Initializes all the default zone channels. (general, local defense, etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatChannelGroup.ZoneChannels">
            <summary>
            All based Channels that exist per Zone, indexed by <see cref="T:WCell.Constants.World.ZoneId"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.#ctor(WCell.Constants.Factions.FactionGroup)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.ChatChannelGroup.Channels">
            <summary>
            The channels for this manager;
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.CreateGeneralChannel(WCell.RealmServer.Global.ZoneTemplate)">
            <summary>
            Creates a zone channel, which is a constant, non-moderated channel specific to one or more Zones.
            TODO: Fix: Channels exist per Zone instance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.CreateLocalDefenseChannel(WCell.RealmServer.Global.ZoneTemplate)">
            <summary>
            Creates a zone channel, which is a constant, non-moderated channel specific to one or more Zones.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.DeleteChannel(WCell.RealmServer.Chat.ChatChannel)">
            <summary>
            Deletes a channel.
            </summary>
            <param name="chnl">the channel to delete</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.GetChannel(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve a specific channel.
            </summary>
            <param name="name">the name of the channel</param>
            <param name="create">whether or not to create the channel if it doesn't exist</param>
            <returns>the channel instance</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.GetGroup(WCell.Constants.Factions.FactionGroup)">
            <summary>
            Gets the appropriate <see cref="T:WCell.RealmServer.Chat.ChatChannelGroup"/> for the given <see cref="F:WCell.RealmServer.Chat.ChatChannelGroup.FactionGroup"/>.
            </summary>
            <param name="faction">the faction</param>
            <returns>the appropriate channel manager, or null if an invalid faction is given</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatChannelGroup.RetrieveChannel(WCell.RealmServer.Misc.IUser,System.String)">
            <summary>
            Tries to retrieve a channel for the given character.
            </summary>
            <param name="channelName">the channel name</param>
            <returns>the requested channel; null if there was an error or it doesn't exist</returns>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatMgr">
            <summary>
            Manager for sending and receiving chat messages.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatMgr.LowercaseAlphabetStart">
            <summary>
            The start of the lowercase alphabet in the ASCII table.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatMgr.LowercaseAlphabetEnd">
            <summary>
            The end of the lowercase alphabet in the ASCII table.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatMgr.ListeningRadius">
            <summary>
            The radius in which people can hear a someone else say something.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatMgr.YellRadius">
            <summary>
            The radius in which people can hear a someone else say something.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatMgr.GlobalChat">
            <summary>
            Whether normal say/yell/emote is global. (sent to everyone in the world)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Chat.ChatMgr.ScrambleChat">
            <summary>
            Whether chat messages of opposite factions will be scrambled
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WCell.RealmServer.Chat.ChatMgr.ChatParsers" -->
        <member name="M:WCell.RealmServer.Chat.ChatMgr.#cctor">
            <summary>
            Default static constructor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SayYellEmoteParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming say, yell, or emote messages.
            </summary>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.GroupParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming party or raid messages.
            </summary>
            <param name="sender">The character sending the message</param>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SubGroupParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming party or raid messages.
            </summary>
            <param name="sender">The character sending the message</param>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.GuildParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming guild message.
            </summary>
            <param name="sender">The character sending the message</param>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.OfficerParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming officer message.
            </summary>
            <param name="sender">The character sending the message</param>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.WhisperParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming whispers.
            </summary>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.ChannelParser(WCell.RealmServer.Entities.Character,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Parses any incoming channel messages.
            </summary>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendChatPlayerNotFoundReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Sends a message that the whisper target wasn't found.
            </summary>
            <param name="client">the client to send to</param>
            <param name="recipient">the name of the target player</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendChatPlayerWrongTeamReply(WCell.RealmServer.Network.IPacketReceiver)">
            <summary>
            Sends a message that the whisper target isn't the same faction.
            </summary>
            <param name="client">the client to send to</param>
            <param name="recipient">the name of the target player</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.CreateObjectChatMessage(WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.Entities.INamedEntity,System.String,WCell.Constants.ChatTag)">
            <summary>
            Creates a chat message packet for a non-player object.
            </summary>
            <param name="type">the type of chat message</param>
            <param name="language">the language the message is in</param>
            <param name="obj">the object "saying" the message</param>
            <param name="msg">the message itself</param>
            <param name="tag">any chat tags for the object</param>
            <returns>the generated chat packet</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.CreateCharChatMessage(WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.Entities.IEntity,WCell.RealmServer.Entities.IEntity,System.String,System.String,WCell.Constants.ChatTag)">
            <summary>
            Creates a chat message packet for a player.
            </summary>
            <param name="type">the type of chat message</param>
            <param name="language">the language the message is in</param>
            <param name="id1">the ID of the chatter</param>
            <param name="id2">the ID of the receiver</param>
            <param name="target">the target or null (if its an area message)</param>
            <param name="msg">the message itself</param>
            <param name="tag">the chat tag of the chatter</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.CreateCharChatMessage(WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.RealmServer.Chat.IChatter,WCell.RealmServer.Chat.IChatter,System.String,System.String)">
            <summary>
            Creates a chat message packet for a player.
            </summary>
            <param name="type">the type of chat message</param>
            <param name="language">the language the message is in</param>
            <param name="id1">the ID of the chatter</param>
            <param name="id2">the ID of the receiver</param>
            <param name="target">the target or null (if its an area message)</param>
            <param name="msg">the message itself</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.CreateCharChatMessage(WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,WCell.Core.EntityId,WCell.Core.EntityId,System.String,System.String,WCell.Constants.ChatTag)">
            <summary>
            Creates a chat message packet for a player.
            </summary>
            <param name="type">the type of chat message</param>
            <param name="language">the language the message is in</param>
            <param name="id1">the ID of the chatter</param>
            <param name="id2">the ID of the receiver</param>
            <param name="target">the target or null (if its an area message)</param>
            <param name="msg">the message itself</param>
            <param name="tag">the chat tag of the chatter</param>
            <returns>Might return null</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendSystemMessage(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Sends a system message.
            </summary>
            <param name="target">the receiver of the message</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendSystemMessage(System.Collections.Generic.IEnumerable{WCell.RealmServer.Entities.Character},WCell.RealmServer.Lang.TranslatableItem)">
            <summary>
            Sends a system message.
            TODO: Improve performance
            </summary>
            <param name="targets">an enumerable collection of players to send the message to</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendSystemMessage(System.Collections.Generic.IEnumerable{WCell.RealmServer.Entities.Character},WCell.RealmServer.Lang.RealmLangKey,System.Object[])">
            <summary>
            Sends a system message.
            </summary>
            <param name="targets">an enumerable collection of players to send the message to</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendSystemMessage(System.Collections.Generic.IEnumerable{WCell.RealmServer.Entities.Character},System.String,System.Object[])">
            <summary>
            Sends a system message.
            </summary>
            <param name="targets">an enumerable collection of players to send the message to</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendSystemMessage(System.Collections.Generic.IEnumerable{WCell.RealmServer.Entities.Character},System.String)">
            <summary>
            Sends a system message.
            </summary>
            <param name="targets">an enumerable collection of players to send the message to</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendCombatLogExperienceMessage(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.ClientLocale,WCell.RealmServer.Lang.RealmLangKey,System.Object[])">
            <summary>
            Sends the amount of experience gained to the characters combat log.
            </summary>
            <param name="target">the character to receieve the combat log message</param>
            <param name="message">the message to display in the characters combat log</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendWhisper(WCell.RealmServer.Chat.IChatter,WCell.RealmServer.Chat.IChatter,System.String)">
            <summary>
            Sends a whisper from one player to another.
            </summary>
            <param name="sender">the sender of the whisper</param>
            <param name="receiver">the target of the whisper</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendRaidBossWhisper(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Chat.IChatter,System.String)">
            <summary>
            Sends a whisper from one player to another.
            </summary>
            <param name="sender">the sender of the whisper</param>
            <param name="receiver">the target of the whisper</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendGuildMessage(WCell.RealmServer.Chat.IChatter,WCell.RealmServer.Guilds.Guild,System.String)">
            <summary>
            Sends a message to guild chat.
            </summary>
            <param name="sender">the sender/guild member of the message</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendGuildOfficerMessage(WCell.RealmServer.Chat.IChatter,WCell.RealmServer.Guilds.Guild,System.String)">
            <summary>
            Sends an officer-only message to guild chat.
            </summary>
            <param name="sender">the sender/guild member of the message</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendMonsterMessage(WCell.RealmServer.Entities.WorldObject,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,System.String)">
            <summary>
            Sends a monster message.
            </summary>
            <param name="obj">the monster the message is being sent from</param>
            <param name="chatType">the type of message</param>
            <param name="language">the language to send the message in</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendMonsterMessage(WCell.RealmServer.Entities.WorldObject,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,System.String[])">
            <summary>
            Sends a monster message.
            </summary>
            <param name="obj">the monster the message is being sent from</param>
            <param name="chatType">the type of message</param>
            <param name="language">the language to send the message in</param>
            <param name="message">the message to send</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.SendMonsterMessage(WCell.RealmServer.Entities.WorldObject,WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,System.String,System.Single)">
            <summary>
            Sends a monster message.
            </summary>
            <param name="obj">the monster the message is being sent from</param>
            <param name="chatType">the type of message</param>
            <param name="language">the language to send the message in</param>
            <param name="message">the message to send</param>
            <param name="radius">The radius or -1 to be heard by everyone in the Map</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.Convert(WCell.Constants.Chat.ChatChannelFlags)">
            <summary>
            Converts chat channel flags from DBC format to client format.
            </summary>
            <param name="dbcFlags">the DBC chat channel flags</param>
            <returns>converted client chat channel flags</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.ReadMessage(WCell.RealmServer.RealmPacketIn)">
            <summary>
            Reads a string from a packet, and treats it like a chat message, purifying it.
            </summary>
            <param name="packet">the packet to read from</param>
            <returns>the purified chat message</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.ScrambleMessage(System.String)">
            <summary>
            Takes a string, and scrambles any letters or numbers with random letters.
            </summary>
            <param name="originalMsg">the original unscrambled string</param>
            <returns>the randomized/scrambled string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.ChatNotify(WCell.RealmServer.Chat.IChatter,System.String,WCell.Constants.Misc.ChatLanguage,WCell.Constants.Misc.ChatMsgType,WCell.RealmServer.Chat.IGenericChatTarget)">
            <summary>
            Triggers a chat notification event.
            </summary>
            <param name="chatter">the person chatting</param>
            <param name="message">the chat message</param>
            <param name="language">the chat language</param>
            <param name="chatType">the type of chat</param>
            <param name="target">the target of the message (channel, whisper, etc)</param>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatMgr.ChatParserDelegate">
            <summary>
            Delegate used for parsing an incoming chat message.
            </summary>
            <param name="type">the type of chat message indicated by the client</param>
            <param name="language">the chat language indicated by the client</param>
            <param name="packet">the actual chat message packet</param>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatMgr.ChatNotifyDelegate">
            <summary>
            Delegate used for passing chat notification information.
            </summary>
            <param name="chatter">the person hatting</param>
            <param name="message">the chat message</param>
            <param name="lang">the language of the message</param>
            <param name="chatType">the type of message</param>
            <param name="target">the target of the message (channel, whisper, etc)</param>
        </member>
        <member name="E:WCell.RealmServer.Chat.ChatMgr.MessageSent">
            <summary>
            Event for chat notifications.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.HandleChatMessage(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming chat message.
            </summary>
            <param name="client">the client that sent to us</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatMgr.CreateChatPacket(WCell.Constants.Misc.ChatMsgType,WCell.Constants.Misc.ChatLanguage,System.String,WCell.Constants.ChatTag)">
            <summary>
            Creates a packet
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatUtility">
            <summary>
            Utility class for creating and filtering chat messages.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Strip(System.String)">
            <summary>
            Strips all color controls from a string.
            </summary>
            <param name="msg">the message to strip colors from</param>
            <returns>a string with any color controls removed from it</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Colorize(System.String,WCell.Util.Graphics.Color)">
            <summary>
            Colorizes the given message with the given color.
            </summary>
            <param name="msg">the message to colorize</param>
            <param name="color">the color value</param>
            <returns>a colorized string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Colorize(System.String,WCell.Util.Graphics.Color,System.Boolean)">
            <summary>
            Colorizes the given message with the given color.
            </summary>
            <param name="msg">the message to colorize</param>
            <param name="color">the color value</param>
            <param name="enclose">whether to only have this string in the given color or to let the color code open for following text</param>
            <returns>a colorized string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Colorize(System.String,System.String)">
            <summary>
            Colorizes the given message with the given color.
            </summary>
            <param name="msg">the message to colorize</param>
            <param name="colorRgb">the color value</param>
            <returns>a colorized string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Colorize(System.String,System.String,System.Boolean)">
            <summary>
            Colorizes the given message with the given color.
            </summary>
            <param name="msg">the message to colorize</param>
            <param name="colorRgb">the color value</param>
            <param name="enclose">whether to only have this string in the given color or to let the color code open for following text</param>
            <returns>a colorized string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Colorize(System.String,System.String,System.String,System.String)">
            <summary>
            Colorizes the given message with the given color.
            </summary>
            <param name="msg">the message to colorize</param>
            <param name="red">the red color value</param>
            <param name="green">the green color value</param>
            <param name="blue">the blue color value</param>
            <returns>a colorized string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Colorize(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Colorizes the given message with the given color.
            </summary>
            <param name="msg">the message to colorize</param>
            <param name="red">the red color value</param>
            <param name="green">the green color value</param>
            <param name="blue">the blue color value</param>
            <param name="enclose">whether to only have this string in the given color or to let the color code open for following text</param>
            <returns>a colorized string</returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatUtility.Purify(System.String@)">
            <summary>
            Filters a string, removing any illegal control characters or character sequences.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.EmoteDBC.EmoteRelationConverter">
            <summary>
            Emote relation holder, searches via TextEmote
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.IGenericChatTarget">
            <summary>
            Defines an object that can accept simple messages.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.IGenericChatTarget.SendMessage(System.String)">
            <summary>
            Sends a message to the target.
            </summary>
            <param name="message">the message to send</param>
        </member>
        <member name="T:WCell.RealmServer.Chat.IChatTarget">
            <summary>
            Defines an object that can accept messages from other players in different languages.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.IChatTarget.SendMessage(WCell.RealmServer.Chat.IChatter,System.String)">
            <summary>
            Send a message to the target.
            </summary>
            <param name="sender">the target of the message</param>
            <param name="message">the message to send</param>
        </member>
        <member name="T:WCell.RealmServer.Chat.IChatter">
            <summary>
            Defines an object that can actively chat.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.IChatter.ChatTag">
            <summary>
            The chat tags of the object.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Chat.IChatter.SpokenLanguage">
            <summary>
            The spoken language of the player.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.ChatHelper">
            <summary>
            Helper class for chat-related extension methods and other misc. methods.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.ChatHelper.SendMessage(WCell.RealmServer.Chat.IGenericChatTarget,System.String,System.Object[])">
            <summary>
            Sends a system message to the target.
            </summary>
            <param name="target">the target being sent a system message</param>
            <param name="msg">the message to send</param>
            <param name="args">any arguments to be formatted in the message</param>
        </member>
        <member name="T:WCell.RealmServer.Chat.LanguageDescription">
            <summary>
            The Language description class
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Chat.LanguageHandler">
            <summary>
            Chat System class
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.LanguageHandler.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Chat.LanguageHandler.GetLanguageDescByType(WCell.Constants.Misc.ChatLanguage)">
            <summary>
            Get language description by Type
            </summary>
            <param name="language">the Language type</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.LanguageHandler.GetLanguageDescBySpellId(WCell.Constants.Spells.SpellId)">
            <summary>
            Get language description by Spell Id
            </summary>
            <param name="spell">spell type</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.LanguageHandler.GetLanguageDescByRace(WCell.Constants.RaceId)">
            <summary>
            Get language description by Spell Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Chat.LanguageHandler.GetLanguageDescBySkillType(WCell.Constants.Skills.SkillId)">
            <summary>
            Get language description by Skill Type
            </summary>
            <param name="skillLanguage">Skill type</param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Commands.AchievementCommands">
            <summary>
            TODO: Localize
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.ConfigCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.ConfigCommand.GetGlobalCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.ConfigCommand.ListGlobalsCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.ConfigCommand.SaveConfigCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.ConfigCommand.LoadConfigCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.BattlegroundCommand.BattlegroundListCommand.List(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs},System.Collections.Generic.IEnumerable{WCell.RealmServer.Battlegrounds.Battleground})">
            <summary>
            Shaky method - BG can be disposed at any point during the iteration
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.InventoryCommand">
            <summary>
            TODO: Enable selection of items and calling of commands on it
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.MapCommand.MapSpawnCommand.SpawnAllMaps(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs})">
            <summary>
            Spawns all active Maps
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="T:WCell.RealmServer.Commands.SetCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.SetCommand.Set(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs},System.Object)">
            <summary>
            Whether we have a valid target.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.GetCommand">
            <summary>
            General set-command. Can be used to register further set-handlers
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.CallCommand">
            <summary>
            Calls public methods.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.PasswordCommand">
            <summary>
            TODO: Figure out how to verify password
            TODO: PW should be queried after the command has been executed
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.AutoExecDir">
            <summary>
            A directory containing a list of autoexec files, containing autoexec files similar to this:
            charname.txt
            Every file will be executed when the Character with the given name logs in.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.AutoExecStartupFile">
            <summary>
            The file (within the Content dir) containing a set of commands to be executed upon startup
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.AutoExecAllCharsFile">
            <summary>
            The file (within the Content dir) containing a set of commands to be executed on everyone on login
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.AutoExecAllCharsFirstLoginFile">
            <summary>
            The file (within the Content dir) containing a set of commands to be executed on everyone's first login
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.CommandPrefixes">
            <summary>
            Sets the default command-prefixes that trigger commands when using chat
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.ExecCommandPrefix">
            <summary>
            Used for dynamic method calls
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Commands.RealmCommandHandler.SelectCommandPrefix">
            <summary>
            Used for selecting commands
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.Initialize">
            <summary>
            Clears the CommandsByAlias, invokes an instance of every Class that is inherited from Command and adds it
            to the CommandsByAlias and the List.
            Is automatically called when an instance of IrcClient is created in order to find all Commands.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.ConsumeCommandPrefix(WCell.Util.Strings.StringStream,System.Boolean@)">
            <summary>
            Removes the next char if it's a Command Prefix, and
            sets dbl = true, if it is double.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.IsCommandPrefix(System.Char)">
            <summary>
            Whether the given character is a command prefix
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.ExecuteInContext(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs})">
            <summary>
            Executes the trigger in Context
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.ExecuteInContext(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs},System.Action{WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs}},System.Action{WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs}})">
            <summary>
            Executes the trigger in Context
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.Execute(WCell.Util.Strings.StringStream)">
            <summary>
            Calls <code>return Execute(new CmdTrigger(text));</code>.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.Execute(System.String)">
            <summary>
            Calls <code>return Execute(new CmdTrigger(text));</code>.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.HandleCommand(WCell.RealmServer.Misc.IUser,System.String,WCell.RealmServer.Chat.IGenericChatTarget)">
            <summary>
            Default Command-Handling method
            </summary>
            <returns>Whether the given msg triggered a command</returns>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmCommandHandler.SelectCommand(WCell.RealmServer.Misc.IUser,System.String)">
            <summary>
            Tries to select the corresponding command for the given User
            </summary>
            <param name="user"></param>
            <param name="cmdString"></param>
            <returns>Whether Command was selected</returns>
        </member>
        <member name="M:WCell.RealmServer.Commands.CommandUtility.EvalNextOrTargetOrUser(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs})">
            <summary>
            Returns one of the possible values: EvalNext if next argument is in parentheses, else target ?? user
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.CommandUtility.InitTrigger(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs})">
            <summary>
            Check for selected Target and selected Command
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.CommandUtility.GetCharacter(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs},System.String)">
            <summary>
            Sets the Character of this trigger, according to the -a or -c switch, followed by the account- or character-name
            </summary>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.Double">
            <summary>
            Whether there was a double trigger-prefix
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.Context">
            <summary>
            The context for the Command.
            This is the Character's Context by default.
            Make sure to treat all Object involved properly.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.Target">
            <summary>
            Only available if IngameOnly = true
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.ChatTarget">
            <summary>
            The Channel, Group, Guild or person that the Command was directed to (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.Character">
            <summary>
            The Character who is performing this or null (if not ingame-triggered)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.User">
            <summary>
            The User who triggered the Command (might be null if used from Console etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.Role">
            <summary>
            The triggering User or null (if not ingame-triggered)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.SelectedGO">
            <summary>
            The GO that is currently selected by the User
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCmdArgs.TicketHandler">
            <summary>
            The TicketHandler triggering this Trigger (or null if there is none).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmServerCmdArgs.CheckArgs(WCell.Util.Commands.Command{WCell.RealmServer.Commands.RealmServerCmdArgs})">
            <summary>
            Whether this the supplied arguments match the specified target criteria.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.RealmServerCmdArgs.GetCharArgumentOrTarget(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs},System.String)">
            <summary>
            If the trigger has anymore text, it will get the Character whose name matches the next word, else
            takes the current Target.
            </summary>
            <param name="trigger"></param>
            <param name="playerName"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCommand.RequiredStatusDefault">
            <summary>
            The status that is required by a Command by default
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCommand.TargetTypes">
            <summary>
            The kind of target that is required for this command 
            (Target is set to the command-calling User, if he/she has none selected or not doubled the Command-Prefix).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCommand.RequiresCharacter">
            <summary>
            Whether the Character argument needs to be supplied by the trigger's Args
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Commands.RealmServerCommand.RequiresEqualOrHigherRank">
            <summary>
            Whether the command-user must be of equal or higher rank of the target.
            Used to prevent staff members of lower ranks to perform any kind
            of unwanted commands on staff members of higher ranks.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.AddSpellCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Commands.TaxiCommand.GetNodes(WCell.Util.Commands.CmdTrigger{WCell.RealmServer.Commands.RealmServerCmdArgs})">
            <summary>
            Returns all Nodes matching the arguments in the given trigger.
            </summary>
            <param name="trigger">[part of name|id]</param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Commands.IngameCmdTrigger">
            <summary>
            Represents a trigger for commands through ingame chat
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Commands.DefaultCmdTrigger">
            <summary>
            Default trigger for console
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Content.ContentMgr">
            <summary>
            TODO: Make it simple to add content from outside
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Content.ContentMgr.ErrorResponse">
            <summary>
            Determines how to interact with invalid content data.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Content.ContentMgr.ForceDataPresence">
            <summary>
            Causes an error to be thrown if certain data is not present when requested
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Content.ContentMgr.ContentProviderName">
            <summary>
            The name of the ContentProvider, which is also the name of the folder within the Content/Impl/ folder,
            in which to find the Table-definitions.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.OnInvalidClientData(System.String,System.Object[])">
            <summary>
            Reports incorrect data, that is not Database-provider dependent.
            </summary>
            <param name="msg"></param>
            <param name="args"></param>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.OnInvalidClientData(System.String)">
            <summary>
            Reports incorrect data, that is not Database-provider dependent.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.OnInvalidDBData(System.String,System.Object[])">
            <summary>
            Reports incorrect data, caused by the Database-provider.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.OnInvalidDBData(System.String)">
            <summary>
            Reports incorrect data, caused by the Database-provider.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.Check(System.Action{System.String})">
            <summary>
            Checks the validity of all Table definitions
            </summary>
            <returns>The amount of invalid columns.</returns>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.Load``1">
            <summary>
            Ensures that the DataHolder of the given type and those that are connected with it, are loaded.
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.Load``1(System.Boolean)">
            <summary>
            Ensures that the DataHolder of the given type and those that are connected with it, are loaded.
            
            </summary>
            <param name="force">Whether to re-load if already loaded.</param>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.FetchAll">
            <summary>
            Fetches all content of all registered DataHolders.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.CommitUpdate(WCell.Util.Data.IDataHolder)">
            <summary>
            Updates changes to the Object in the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.CommitInsert(WCell.Util.Data.IDataHolder)">
            <summary>
            Inserts the Object into the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.CommitDelete(WCell.Util.Data.IDataHolder)">
            <summary>
            Deletes the Object from the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.CommitUpdateAndFlush(WCell.Util.Data.IDataHolder)">
            <summary>
            Updates changes to the Object in the underlying Database.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.CommitInsertAndFlush(WCell.Util.Data.IDataHolder)">
            <summary>
            Inserts the Object into the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.CommitDeleteAndFlush(WCell.Util.Data.IDataHolder)">
            <summary>
            Deletes the Object from the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.IgnoreUnflushedChanges``1">
            <summary>
            Ignore all changes before last FlushCommit() (will not change the Object's state).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.FlushCommit``1">
            <summary>
            Flush all commited changes to the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            Will be executed in the global IO context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.FlushCommit(System.Type)">
            <summary>
            Flush all commited changes to the underlying Database.
            FlushCommit() needs to be called to persist the operation.
            Will be executed in the global IO context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.ContentMgr.PurgeCache">
            <summary>
            Deletes all cache-files
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Content.IModDataHolder">
            <summary>
            Can be used to assign data contained by this DataHolder to a specific mod/map only
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Content.NHibernateDbWrapper">
            <summary>
            <see cref="T:NHibernate.Persister.Entity.AbstractEntityPersister"/>
            <see cref="T:NHibernate.Persister.Entity.SingleTableEntityPersister"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.NHibernateDbWrapper.#ctor">
            <summary>
            Make sure to initialize ActiveRecord before calling this ctor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Content.NHibernateDbWrapper.GetDatabaseVersion(System.String,System.String)">
            <summary>
            Should return a version string in the format of a float.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Database.AccountDataRecord.TimeStamps">
            <summary>
            TODO: Can be changed to uint (unix time)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.AccountDataRecord.InitializeNewAccount(System.Int64)">
            <summary>
            This is used to initialize *skeleton* data for accounts that do not already have data stored server side.
            We initialize with DateTime.MinValue to cause the client to update the server side data.
            </summary>
            <param name="accountID">GUID of the account that needs to be initialized</param>
            <returns>An AccountDataRecord reference</returns>
        </member>
        <member name="M:WCell.RealmServer.Database.AuraRecord.NextId">
            <summary>
            Returns the next unique Id for a new SpellRecord
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Database.CharacterRecord.LowestCharId">
            <summary>
            Character will not have Ids below this threshold. 
            You can use those unused ids for self-implemented mechanisms, eg to fake participants in chat-channels etc.
            </summary>
            <remarks>
            Do not change this value once the first Character exists.
            If you want to change this value to reserve more (or less) ids for other use, make sure
            that none of the ids below this threshold are in the DB.
            </remarks>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.NextId">
            <summary>
            Returns the next unique Id for a new Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.CreateNewCharacterRecord(WCell.RealmServer.RealmAccount,System.String)">
            <summary>
            Creates a new CharacterRecord row in the database with the given information.
            </summary>
            <param name="account">the account this character is on</param>
            <param name="name">the name of the new character</param>
            <returns>the <seealso cref="T:WCell.RealmServer.Database.CharacterRecord"/> object</returns>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.GetRecordByName(System.String)">
            <summary>
            Retrieves a CharacterRecord based on the character name
            </summary>
            <param name="name">the character name</param>
            <returns>the corresponding <seealso cref="T:WCell.RealmServer.Database.CharacterRecord"/></returns>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.Exists(System.String)">
            <summary>
            Checks if a character with the given name already exists.
            </summary>
            <param name="characterName">the name to check for</param>
            <returns>true if the character exists; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.Exists(System.UInt32)">
            <summary>
            Checks if a character with the given Id already exists.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.LoadRecordByEntityId(System.UInt32)">
            <summary>
            Retrieves a CharacterRecord based on a character's entity ID
            </summary>
            <param name="lowUid">the character unique ID</param>		/// <returns>the corresponding <seealso cref="T:WCell.RealmServer.Database.CharacterRecord"/></returns>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.LoadRecordByID(System.Int64)">
            <summary>
            Retrieves a CharacterRecord based on a character's entity ID.
            </summary>
            <returns>the corresponding <seealso cref="T:WCell.RealmServer.Database.CharacterRecord"/></returns>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.CanSave">
            <summary>
            Whether this record should be saved to DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.IsOnline">
            <summary>
            Whether the Character that this Record belongs to is currently logged in.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.LastResTime">
            <summary>
            Time of last resurrection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.CorpseX">
            <summary>
            If CorpseX is null, there is no Corpse
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.AbilitySpells">
            <summary>
            Default spells; talents excluded.
            Talent spells can be found in <see cref="T:WCell.RealmServer.Talents.SpecProfile"/>.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.LoadedItems">
            <summary>
            Returns loaded Items.
            Call GetOrLoadItems from the IO-context if Items arent loaded yet.
            Characters will have their Items loaded before the Char-selection screen.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.RestXp">
            <summary>
            Amount of accumulated rest-XP 
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.RestTriggerId">
            <summary>
            The id of the AreaTrigger which is letting us rest (or 0 if there is none)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.PetSummonedCount">
            <summary>
            Amount of action-bar information etc for summoned pets
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.PetCount">
            <summary>
            Amount of Hunter pets
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.PetSummonSpellId">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.CharacterRecord.PetDuration">
            <summary>
            Remaining duration in millis
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRecord.FindAllOfAccount(WCell.RealmServer.RealmAccount)">
            <summary>
            Gets the characters for the given account.
            </summary>
            <param name="account">the account</param>
            <returns>a collection of character objects of the characters on the given account</returns>
        </member>
        <member name="T:WCell.RealmServer.Database.CharacterRelationRecord">
            <summary>
            Represents a character relationship entry in the database
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.CharacterRelationRecord.NextId">
            <summary>
            Returns the next unique Id for a new SpellRecord
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Database.EquipmentSet">
            <summary>
            This feature allows players to store sets of equipment, easily swap between saved sets using hotkeys, 
            and pull items directly from backpacks or bank slots (must be at the bank to equip inventory from the bank).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.EquipmentSet.NextId">
            <summary>
            Returns the next unique Id for a new Set
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.EquipmentSetItemMapping.ParentSet">
            <summary>
            Cannot be named "Set" because
            NHibernate doesn't quote table names right now.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Database.ItemRecord">
            <summary>
            The DB-representation of an Item
            TODO: Charges
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.ItemRecord.NextId">
            <summary>
            Returns the next unique Id for a new Item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.ItemRecord.ContainerSlot">
            <summary>
            The slot of the container, holding this Item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.ItemRecord.Charges">
            <summary>
            Charges of the Use-spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.ItemRecord.ContSlots">
            <summary>
            If this > 0, we have a container with this amount of slots.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.ItemRecord.Template">
            <summary>
            The life-time of the Item in seconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.ItemRecord.IsAuctioned">
            <summary>
            if this is true, the item actually is auctioned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Database.ItemRecord.MailId">
            <summary>
            The id of the mail that this Item is attached to (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.QuestRecord.NextId">
            <summary>
            Returns the next unique Id for a new Record
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Database.RealmDBMgr">
            <summary>
            TODO: Add method and command to re-create entire DB and resync server correspondingly
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Database.SpellRecord.NextId">
            <summary>
            Returns the next unique Id for a new SpellRecord
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Id">
            <summary>
            Id of this guild
            </summary>
            <remarks>UpdateField's GuildId is equal to it</remarks>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Name">
            <summary>
            Guild's name
            </summary>
            <remarks>length is limited with MAX_GUILDNAME_LENGTH</remarks>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.MOTD">
            <summary>
            Guild's message of the day
            </summary>
            <remarks>length is limited with MAX_GUILDMOTD_LENGTH</remarks>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Info">
            <summary>
            Guild's information
            </summary>
            <remarks>length is limited with MAX_GUILDINFO_LENGTH</remarks>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Created">
            <summary>
            Date and time of guild creation
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Leader">
            <summary>
            Guild leader's GuildMember
            Setting it does not send event to the guild. Use Guild.SendEvent
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Tabard">
            <summary>
            Guild's tabard
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.MemberCount">
            <summary>
            Number of guild's members
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.#ctor">
            <summary>
            Constructor is implicitely called when Guild is loaded from DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.#ctor(WCell.RealmServer.Database.CharacterRecord,System.String)">
            <summary>
            Creates a new GuildRecord row in the database with the given information.
            </summary>
            <param name="leader">leader's character record</param>
            <param name="name">the name of the new character</param>
            <returns>the <seealso cref="T:WCell.RealmServer.Guilds.Guild"/> object</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.InitAfterLoad">
            <summary>
            Initialize the Guild after loading from DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Register">
            <summary>
            Initializes guild after its creation or restoration from DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.AddMember(WCell.RealmServer.Database.CharacterRecord)">
            <summary>
            Adds a new guild member
            Calls GuildMgr.OnJoinGuild
            </summary>
            <param name="chr">character to add</param>
            <param name="update">if true, sends event to the guild</param>
            <returns>GuildMember of new member</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.RemoveMember(WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Removes GuildMember from the guild
            </summary>
            <param name="member">member to remove</param>
            <param name="update">if true, sends event to the guild</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.RemoveMember(WCell.RealmServer.Guilds.GuildMember,System.Boolean)">
            <summary>
            Removes GuildMember from the guild
            </summary>
            <param name="member">member to remove</param>
            <param name="update">if false, changes to the guild will not be promoted anymore (used when the Guild is being disbanded)</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.OnRemoveMember(WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Called before the given member is removed to clean up everything related to the given member
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Ranks">
            <summary>
            Guild ranks as an array
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.AddRank(System.String,WCell.Constants.Guilds.GuildPrivileges,System.Boolean)">
            <summary>
            Adds rank to the tail of ranks list
            </summary>
            <param name="name">name of new rank</param>
            <param name="privileges">privileges of new rank</param>
            <param name="update">if true, sends event to the guild</param>
            <returns>new rank</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.RemoveRank(System.Boolean)">
            <summary>
            Deletes last rank from ranks list
            </summary>
            <param name="update">if true, sends event to the guild</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.ChangeRank(System.Int32,System.String,WCell.Constants.Guilds.GuildPrivileges,System.Boolean)">
            <summary>
            Changes priviliges and name of a rank
            </summary>
            <param name="rankId">Id of rank to modify</param>
            <param name="newName">new name of rank</param>
            <param name="newPrivileges">new priviliges of rank</param>
            <param name="update">if true, sends event to the guild</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Promote(WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Promotes GuildMember. It's impossible to promote to guild leader
            </summary>
            <param name="member">member to promote</param>
            <returns>true, if success</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Demote(WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Demotes GuildMember
            </summary>
            <param name="member">member to promote</param>
            <returns>true, if success</returns>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Item(System.UInt32)">
            <summary>
            Requests member by his low id
            </summary>
            <param name="lowMemberId">low id of member's character</param>
            <returns>requested member or null</returns>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.Item(System.String)">
            <summary>
            Requests member by his name
            </summary>
            <param name="name">name of member's character (not case-sensitive)</param>
            <returns>requested member</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Disband">
            <summary>
            Disbands the guild
            </summary>
            <param name="update">if true, sends event to the guild</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.ChangeLeader(WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Changes leader of the guild
            </summary>
            <param name="newLeader">GuildMember of new leader</param>
            <param name="update">if true, sends event to the guild</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.CheckInvite(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character,System.String)">
            <summary>
            Check whether the given inviter may invite the given target
            Sends result to the inviter
            </summary>
            <param name="inviter">inviter's character, can be null. If null, sending result is suppressed</param>
            <param name="target">invitee's character, can be null</param>
            <param name="targetName">invitee character's name</param>
            <returs>result of invite</returs>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.CheckAction(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character,System.String,WCell.Constants.Guilds.GuildCommandId,WCell.Constants.Guilds.GuildPrivileges,System.Boolean)">
            <summary>
            Checks whether the given target exists in requester's guild and whether the given requestMember has needed privs
            Sends result of action to the requester
            </summary>
            <param name="reqChar">requester's character, can be null. If null, sending result is suppressed</param>
            <param name="targetChar">target's character, can be null</param>
            <param name="targetName">target character's name</param>
            <param name="commandId">executed command. Used for sending result</param>
            <param name="reqPrivs">priviliges required for executing this action</param>
            <param name="canAffectSelf">can this action be executed on self?</param>
            <returns>result of operation</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.CheckAction(WCell.RealmServer.Entities.Character,System.String,WCell.RealmServer.Guilds.GuildMember@,WCell.Constants.Guilds.GuildCommandId,WCell.Constants.Guilds.GuildPrivileges,System.Boolean)">
            <summary>
            Checks whether the given target exists in requester's guild and whether the given requestMember has needed privs
            Sends result of action to the requester
            </summary>
            <param name="reqChar">requester's character, can be null. If null, sending result is suppressed</param>
            <param name="targetName">target character's name</param>
            <param name="targetGM">target's GuildMember entry is returned through this</param>
            <param name="commandId">executed command. Used for sending result</param>
            <param name="reqPrivs">priviliges required for executing this action</param>
            <param name="canAffectSelf">can this action be executed on self?</param>
            <returns>result of operation</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.CheckPrivs(WCell.RealmServer.Entities.Character,WCell.Constants.Guilds.GuildCommandId,WCell.Constants.Guilds.GuildPrivileges)">
            <summary>
            Checks if given character has necessary priviliges
            CheckInGuild call is done automatically
            </summary>
            <param name="character">character to check. May be null</param>
            <param name="commandId">executed command (used for sending result)</param>
            <param name="reqPrivs">required privileges</param>
            <returns>The Character's guild if the character has required privileges within the guild, otherwise null</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.CheckIsLeader(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character,WCell.Constants.Guilds.GuildCommandId,System.String)">
            <summary>
            Checks whether a guild member may make another guild member the guild leader
            </summary>
            <param name="reqChar">requester's character, can be null. If null, sending result is suppressed</param>
            <param name="targetChar">target's character, can be null</param>
            <param name="targetName">target character's name</param>
            <returns>result of operation</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Broadcast(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Send a packet to every guild member
            </summary>
            <param name="packet">the packet to send</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Broadcast(WCell.RealmServer.RealmPacketOut,WCell.RealmServer.Entities.Character)">
            <summary>
            Send a packet to every guild member except for the one specified.
            </summary>
            <param name="packet">the packet to send</param>
            <param name="ignoredCharacter">the <see cref="T:WCell.RealmServer.Entities.Character" /> that won't receive the packet</param>
        </member>
        <member name="P:WCell.RealmServer.Guilds.Guild.EntityId">
            <summary>
            The EntityId (only set for Character)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.SendMessage(WCell.RealmServer.Chat.IChatter,System.String)">
            <summary>
            Say something to this target
            </summary>		
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.GetMembers">
            <summary>
            All members. 
            Looping over this enumeration is synchronized.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.GetCharacters">
            <summary>
            All online characters.
            Looping over this enumeration is synchronized.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.Send(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends the given packet to all online characters
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.GetCharacters(WCell.Constants.Guilds.GuildPrivileges)">
            <summary>
            All online chat listeners
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.SendToChatListeners(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends the given packet to all online chat listeners
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.Guild.SendToOfficers(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends the given packet to all online officers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildBankTab.BankSlot">
            <summary>
            The Slot in the Bank's Tabs that this BankTab belongs in
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.Iterate(System.Func{WCell.RealmServer.Database.ItemRecord,System.Boolean})">
            <summary>
            Iterates over all slots in this GuildBankTab.
            </summary>
            <param name="callback">Function that is called on each Slot. This should return true to continue iterating.</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.ForeachItem(System.Action{WCell.RealmServer.Database.ItemRecord})">
            <summary>
            Applies a function to all ItemRecords in this GuildBankTab.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.StoreItemInSlot(WCell.RealmServer.Database.ItemRecord,System.Int32)">
            <summary>
            Tries to store the given item in the given slot. No merge attempted.
            </summary>
            <param name="item">The item to store.</param>
            <param name="slot">The slot to store it in.</param>
            <returns>The <see cref="T:WCell.RealmServer.Database.ItemRecord" /> that was in the slot (or the original <see cref="T:WCell.RealmServer.Database.ItemRecord" /> minus the items that were merged) 
            or null if the store/merge was successful.</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.StoreItemInSlot(WCell.RealmServer.Database.ItemRecord,System.Int32,System.Boolean)">
            <summary>
            Places the given item in the given slot (or tries mergeing at slot> if indicated).
            Make sure that the depositer has deposit rights to this BankTab!
            </summary>
            <param name="item">The <see cref="T:WCell.RealmServer.Database.ItemRecord" /> to store.</param>
            <param name="slot">The slotId where you want to store.</param>
            <param name="allowMerge">Whether or not to try and merge the stacks.</param>
            <returns>The <see cref="T:WCell.RealmServer.Database.ItemRecord" /> that was in the slot (or the original <see cref="T:WCell.RealmServer.Database.ItemRecord" /> minus the items that were merged) 
            or null if the store/merge was successful.</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.StoreItemInSlot(WCell.RealmServer.Database.ItemRecord,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Places the given amount of the given item stack in the given slot (or tries mergeing at slot if indicated).
            Make sure that the depositer has deposit rights to this BankTab!
            </summary>
            <param name="item">The <see cref="T:WCell.RealmServer.Database.ItemRecord" /> to store.</param>
            <param name="amount">The amount of items from the stack to store.</param>
            <param name="slot">The slotId where you want to store.</param>
            <param name="allowMerge">Whether or not to try and merge the stacks.</param>
            <returns>The <see cref="T:WCell.RealmServer.Database.ItemRecord" /> that was in the slot (or the original <see cref="T:WCell.RealmServer.Database.ItemRecord" /> minus the items that were merged) 
            or null if the store/merge was successful.</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.CheckStoreItemInSlot(WCell.RealmServer.Database.ItemRecord,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Checks if the given amount of the given item stack can be stored in the given slot (optionally with merging),
            without necessitating an Item swap. No actual store takes place.
            </summary>
            <param name="item">The <see cref="T:WCell.RealmServer.Database.ItemRecord" /> to store.</param>
            <param name="amount">The amount of items from the stack to store.</param>
            <param name="slot">The slotId where you want to store.</param>
            <param name="allowMerge">Whether or not to try and merge the stacks.</param>
            <returns>true if no Item swap is needed.</returns>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBankTab.FindFreeSlot">
            <summary>
            Attempts to find an available Slot in this BankTab.
            </summary>
            <returns>The slot's id or -1</returns>
        </member>
        <member name="T:WCell.RealmServer.Guilds.GuildMember">
            <summary>
            Represents the relationship between a Character and its Guild.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildMember.FindAll(System.UInt32)">
            <summary>
            Loads all members of the given guild from the DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.Id">
            <summary>
            The low part of the Character's EntityId. Use EntityId.GetPlayerId(Id) to get a full EntityId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.Name">
            <summary>
            The name of this GuildMember's character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.Level">
            <summary>
            Current level of this GuildMember or his saved level if member already logged out
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.LastLogin">
            <summary>
            Time of last login of member
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.ZoneId">
            <summary>
            The current or last Id of zone in which this GuildMember was
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.Class">
            <summary>
            Class of GuildMember
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildMember.Character">
            <summary>
            Returns the Character or null, if this member is offline
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildMember.LeaveGuild">
            <summary>
            Removes this member from its Guild
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildRank.InitRank">
            <summary>
            Init a loaded Rank
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Guilds.GuildRank.DailyBankMoneyAllowance">
            <summary>
            The daily money withdrawl allowance from the Guild Bank
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildBank.#ctor(WCell.RealmServer.Guilds.Guild,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Guilds.GuildMgr">
            <summary>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Guilds.GuildMgr.GuildTabardCost">
            <summary>
            Cost (in copper) of a new Guild Tabard
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Guilds.GuildMgr.BankMoneyAllowanceResetDelay">
            <summary>
            The delay (in hours) before Guild Members' BankMoneyWithdrawlAllowance resets.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Guilds.GuildMgr.OfflineMembers">
            <summary>
            Maps char-id to the corresponding GuildMember object so it can be looked up when char reconnects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildMgr.OnCharacterLogout(WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Cleanup character invitations and group leader, looter change on character logout/disconnect
            </summary>
            <param name="member">The GuildMember logging out / disconnecting (or null if the corresponding Character is not in a Guild)</param>
        </member>
        <member name="M:WCell.RealmServer.Guilds.GuildMgr.RegisterGuild(WCell.RealmServer.Guilds.Guild)">
            <summary>
            New or loaded Guild
            </summary>
            <param name="guild"></param>
        </member>
        <member name="T:WCell.RealmServer.Debugging.DebugUtil">
            <summary>
            Static helper class for advanced Debugging
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Debugging.DebugUtil.MaxDumpFileSize">
            <summary>
            Dump files will be overwritten when they already exceed this length
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Debugging.DebugUtil.DumpDir">
            <summary>
            Where to dump packets to (temporarily)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Debugging.DebugUtil.Dumps">
            <summary>
            whether packets are currently dumped to files.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Debugging.DebugUtil.DefinitionDir">
            <summary>
            Where to load Packet definitions from
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Debugging.DebugUtil.DefaultWriter">
            <summary>
            Gets the Misc writer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Debugging.DebugUtil.LoadDefinitions">
            <summary>
            Loads all Packet definitions from XML
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Debugging.DebugUtil.Log(WCell.RealmServer.RealmAccount,System.String,System.Object[])">
            <summary>
            Writes a line into the debug log of the given Account.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Debugging.DebugUtil.DumpPacketOut(WCell.RealmServer.RealmAccount,System.Byte[],System.Int32,System.Int32,WCell.PacketAnalysis.PacketSender)">
            <summary>
            Dumps the content of an Update packet to the console
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Editor.Commands.EditorCommand">
            <summary>
            Is not in the default Commands/ folder because this will be moved into it's own Addon
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Editor.EditorArchitectInfo">
            <summary>
            Represents a Character who works with an editor
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Editor.Figurines.EditorFigurine">
            <summary>
            These figurines represent the 3D GUI elements of the editor
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Editor.Figurines.EditorFigurine.m_SpawnPoint">
            <summary>
            Whether to also spawn a DO to make this Figurine appear clearer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Editor.Figurines.EditorFigurine.DetermineVisibilityFor(WCell.RealmServer.Entities.Unit)">
            <summary>
            Editor is only visible to staff members
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Editor.Figurines.FigurineBase">
            <summary>
            A decorative Unit without a brain
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Editor.Figurines.FigurineBase.DetermineVisibilityFor(WCell.RealmServer.Entities.Unit)">
            <summary>
            Editor is only visible to staff members
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Editor.Figurines.SpawnPointFigurine">
            <summary>
            The visual component of a spawnpoint
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Editor.Figurines.SpawnPointFigurine.SpawnFigScale">
            <summary>
            Scales the figurine in relation to its original version
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Editor.Figurines.WaypointFigurine.WPFigurineScale">
            <summary>
            Scales the figurine in relation to its original version
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Editor.MapEditor">
            <summary>
            Every map can have one MapEditor.
            It contains all the information related to editing that map (mostly spawn editing).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Editor.MapEditor.Team">
            <summary>
            Set of Characters who are currently working with this editor.
            Only use in the Map's context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Editor.MapEditor.Join(WCell.RealmServer.Entities.Character)">
            <summary>
            Adds the given Character to the team of this editor (if not already part of the team)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Editor.MapEditor.UpdateCallback(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Called periodically on editing Characters
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Editor.MapEditorMgr.EditorsByMap">
            <summary>
            All active Editors
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Editor.MapEditorMgr.Architects">
            <summary>
            Everyone who is or was recently using the editor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Editor.Menus.MapEditorMenu.GetText(WCell.RealmServer.Gossips.GossipConversation)">
            <summary>
            Generate the menu's text dynamically
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.Character">
            <summary>
             Represents a unit controlled by a player in the game world
            </summary>
            <summary>
            
            </summary>
            <summary>
            TODO: Move everything Character-related from UnitUpdates in here
            </summary>
            <summary>
            TODO: Move Update and BroadcastValueUpdate for Character together, since else we sometimes 
            have to fetch everything in our environment twice in a single map update
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.DefaultLogoutDelayMillis">
            <summary>
            The delay until a normal player may logout in millis.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.DeathSpeedFactorIncrease">
            <summary>
            Speed increase when dead and in Ghost form
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.ResurrectionSicknessStartLevel">
            <summary>
            The level at which players start to suffer from repercussion after death
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.SpeedHackCheck">
            <summary>
            whether to check for speedhackers
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.SpeedHackToleranceFactor">
            <summary>
            The factor that is applied to the maximum distance before detecting someone as a SpeedHacker
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ClearTrade">
            <summary>
            Clears all trade-related fields for the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInInstance">
            <summary>
            Check to see if character is in an instance
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInGroup">
            <summary>
            Check to see if character is in a group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInGuild">
            <summary>
            Check to see if character is in a Guild
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInRaid">
            <summary>
            Check to see if character is in a group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInGroupInstance">
            <summary>
            Check to see if character is in the same instance as group members
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.DungeonDifficulty">
            <summary>
            Personal Dungeon Difficulty, might differ from current Difficulty
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsCorpseReclaimable">
            <summary>
            whether the Corpse is reclaimable 
            (Character must be ghost and the reclaim delay must have passed)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.CanReclaimCorpse">
            <summary>
            Character can reclaim if Corpse is reclaimable and Character is close to Corpse,
            or if there is no Corpse, Character must be somewhere near a SpiritHealer
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.LastDeathTime">
            <summary>
            Last time this Character died
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.LastResTime">
            <summary>
            Last time this Character was resurrected
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ResurrectWithConsequences">
            <summary>
            Resurrects, applies ResurrectionSickness and damages Items, if applicable
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.MarkDead">
            <summary>
            Marks this Character dead (just died, Corpse not released)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.BecomeGhost">
            <summary>
            Characters become Ghosts after they released the Corpse
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnDamageAction(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetOrInvalidateItem(WCell.Constants.Items.InventorySlotType)">
            <summary>
            Finds the item for the given slot. Unequips it if it may not currently be used.
            Returns the item to be equipped or null, if invalid.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ReleaseCorpse">
            <summary>
            Spawns the corpse and teleports the dead Character to the nearest SpiritHealer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SpawnCorpse(System.Boolean,System.Boolean)">
            <summary>
            Spawns and returns a new Corpse at the Character's current location
            </summary>
            <param name="bones"></param>
            <param name="lootable"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SpawnCorpse(System.Boolean,System.Boolean,WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3,System.Single)">
            <summary>
            Spawns and returns a new Corpse at the given location
            </summary>
            <param name="bones"></param>
            <param name="lootable"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.TeleportToNearestGraveyard">
            <summary>
            Tries to teleport to the next SpiritHealer, if there is any.
            
            TODO: Graveyards
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.TeleportToNearestGraveyard(System.Boolean)">
            <summary>
            Tries to teleport to the next SpiritHealer, if there is any.
            
            TODO: Graveyards
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GainCombatXp(System.Int32,WCell.Util.INamed,System.Boolean)">
            <summary>
            Gain experience from combat
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GainXp(System.Int32,System.Boolean)">
            <summary>
            Gain non-combat experience (through quests etc)
            </summary>
            <param name="experience"></param>
            <param name="useRest">If true, subtracts the given amount of experience from RestXp and adds it ontop of the given xp</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.AddLanguage(WCell.Constants.Misc.ChatLanguage)">
            <summary>
            Adds the given language
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CanSpeak(WCell.Constants.Misc.ChatLanguage)">
            <summary>
            Returns whether the given language can be understood by this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SendSystemMessage(WCell.RealmServer.Lang.RealmLangKey,System.Object[])">
            <summary>
            Sends a message to the client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SendSystemMessage(System.String)">
            <summary>
            Sends a message to the client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SendSystemMessage(System.String,System.Object[])">
            <summary>
            Sends a message to the client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Notify(System.String,System.Object[])">
            <summary>
            Flashes a notification in the middle of the screen
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnInteract(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Called whenever this Character interacts with any WorldObject
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OpenBank(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Opens this character's bankbox
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.TryBindTo(WCell.RealmServer.Entities.NPC)">
            <summary>
            Tries to bind this Character to the given NPC.
            </summary>
            <returns>whether the given NPC is an actual InnKeeper and this char could be bound to that Inn.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.BindTo(WCell.RealmServer.Entities.NPC)">
            <summary>
            Binds this Character to that Location and will teleport him/her whenever the Hearthston is used.
            Adds a new HearthStone if the Character doesn't have one.
            Make sure that the given NPC is an actual InnKeeper and has a valid BindPoint (else use <c>TryBindTo</c> instead).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_questLog">
            <summary>
            QuestLog of the character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.QuestLog">
            <summary>
            Gets the quest log.
            </summary>
            <value>The quest log.</value>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Duel">
            <summary>
            The <see cref="P:WCell.RealmServer.Entities.Character.Duel"/> this Character is currently engaged in (or null if not dueling)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.DuelOpponent">
            <summary>
            The opponent that this Character is currently dueling with (or null if not dueling)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsDueling">
            <summary>
            whether this Character is currently dueling with someone else
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.IsAlliedWith(WCell.RealmServer.Factions.IFactionMember)">
            <summary>
            One can only cast beneficial spells on people that we are allied with
            </summary>
            <param name="opponent"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ModComboState(WCell.RealmServer.Entities.Unit,System.Int32)">
            <summary>
            Change target and/or amount of combo points
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.PassOnLoot">
            <summary>
            Whether this Character will automatically pass on loot rolls.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.LooterEntry">
            <summary>
            The LooterEntry represents this Character's current loot status
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsLooting">
            <summary>
            whether this Character is currently looting something
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CancelLooting">
            <summary>
            Cancels looting (if this Character is currently looting something)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.StartSummon(WCell.RealmServer.Entities.ISummoner)">
            <summary>
            May be executed from outside of this Character's map's context
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.StartSummon(WCell.RealmServer.Entities.ISummoner,System.Int32)">
            <summary>
            May be executed from outside of this Character's map's context
            </summary>
            <param name="summoner"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CancelSummon(System.Boolean)">
            <summary>
            Cancels a current summon request
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.SpecProfiles">
            <summary>
            Talent specs
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Instances">
            <summary>
            Auto-created if not already existing
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInBattleground">
            <summary>
            Whether this Character is in a Battleground at the moment
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Battlegrounds">
            <summary>
            Represents all <see cref="T:WCell.RealmServer.Battlegrounds.Battleground"/>-related information of this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnHonorableKill(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Is called when the Character kills an Honorable target.
            </summary>
            <param name="victim">The Honorable character killed.</param>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.PvPEndTime">
            <summary>
            Auto removes PvP flag after expiring
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CalcBarberShopCost(System.Byte,System.Byte,System.Byte)">
            <summary>
            Calculates the price of a purchase in a berber shop.
            </summary>
            <param name="newstyle"></param>
            <param name="newcolor"></param>
            <param name="newfacial"></param>
            <returns>The total price.</returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.HandlingTicket">
            <summary>
            The ticket that is currently being handled by this <see cref="T:WCell.RealmServer.Help.Tickets.ITicketHandler"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.SummonedPetRecords">
            <summary>
            Action-information of previously summoned pets
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Minions">
            <summary>
            All minions that belong to this Character, excluding actual Pets.
            Might be null.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Totems">
            <summary>
            All created Totems (might be null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ActivePet">
            <summary>
            Currently active Pet of this Character (the one with the action bar)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsPetActive">
            <summary>
            Lets the ActivePet appear/disappear (if this Character has one)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.DismissActivePet">
            <summary>
            Dismisses the current pet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.AbandonActivePet">
            <summary>
            ActivePet is about to be abandoned
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.UnsetActivePet">
            <summary>
            Simply unsets the currently active pet without deleting or abandoning it.
            Make sure to take care of the pet when calling this method.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.TotalPetCount">
            <summary>
            Amount of stabled pets + active pet (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CanControl(WCell.RealmServer.NPCs.NPCEntry)">
            <summary>
            Indicate whether the Character can get a PetSpell bar to
            control the given NPC
            </summary>
            <param name="npc"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SpawnPet(WCell.RealmServer.NPCs.NPCEntry,WCell.Util.Graphics.Vector3@,System.Int32)">
            <summary>
            Tries to spawn a new summoned Pet for the Character.
            </summary>
            <param name="entry"></param>
            <param name="position"></param>
            <returns>null, if the Character already has that kind of Pet.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.MakePet(WCell.RealmServer.Entities.NPC)">
            <summary>
            Makes the given NPC your Pet or Companion
            </summary>
            <param name="minion">NPC to control</param>
            <param name="duration">The amount of time, in miliseconds, to control the minion. 0 is infinite.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.MakePet(WCell.RealmServer.Entities.NPC,System.Int32)">
            <summary>
            Makes the given NPC your Pet or Companion
            </summary>
            <param name="minion">NPC to control</param>
            <param name="duration">The amount of time, in miliseconds, to control the minion. 0 is infinite.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.InitializeMinion(WCell.RealmServer.Entities.NPC)">
            <summary>
            Is called when this Character gets a new minion or pet or when
            he changes his ActivePet to the given one.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.StableSlotCount">
            <summary>
            Amount of purchased stable slots
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.StablePet">
            <summary>
            Stable the currently ActivePet.
            Make sure there is at least one free StableSlot
            </summary>
            <returns>True if the pet was stabled.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.DeStablePet(WCell.RealmServer.NPCs.Pets.PermanentPetRecord)">
            <summary>
            Tries to make the stabled pet the ActivePet
            </summary>
            <param name="stabledPermanentPet">The stabled pet to make Active.</param>
            <returns>True if the stabled was made Active.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.TrySwapStabledPet(WCell.RealmServer.NPCs.Pets.PermanentPetRecord)">
            <summary>
            Tries to swap the ActivePet for a Stabled one.
            </summary>
            <param name="stabledPermanentPet">The stabled pet to swap out.</param>
            <returns>True if the Stabled Pet was swapped.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.TryBuyStableSlot">
            <summary>
            Tries to have this Character purchase another Stable Slot.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.PetBonusTalentPoints">
            <summary>
            TODO: This seems awfully unsafe and inconsistent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnMinionDied(WCell.RealmServer.Entities.NPC)">
            <summary>
            Called when a Pet or 
            </summary>
            <param name="minion"></param>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.KnownObjects">
            <summary>
            All objects that are currently visible by this Character.
            Don't manipulate this collection.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.NearbyObjects">
            <summary>
            All objects that are currently in BroadcastRadius of this Character.
            Don't manipulate this collection.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_skills">
            <summary>
            All skills of this Character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_talents">
            <summary>
            All talents of this Character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_corpse">
            <summary>
            The current corpse of this Character or null
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_corpseReleaseTimer">
            <summary>
            Auto releases Corpse after expiring
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.KnownLanguages">
            <summary>
            All languages known to this Character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_fallStart">
            <summary>
            The time when this Character started falling
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_fallStartHeight">
            <summary>
            The Z coordinate of the character when this character character falling
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.LastPosition">
            <summary>
            The position at which this Character was last (used for speedhack check)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_taxiNodeMask">
            <summary>
            A bit-mask of the indexes of the TaxiNodes known to this Character in the global TaxiNodeArray
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_currentRitual">
            <summary>
            Set to the ritual, this Character is currently participating in (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ExtraInfo">
            <summary>
            Contains certain info that is almost only used by staff and should usually not be available to normal players.
            <remarks>Guaranteed to be non-null</remarks>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.PlayerBytes2_2">
            <summary>
            0x10 for SpellSteal
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.BankBagSlots">
            <summary>
            Use player.Inventory.BankBags.Inc/DecBagSlots() to change the amount of cont slots in use
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.RestState">
            <summary>
            0x01 -> Rested State
            0x02 -> Normal State
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsResting">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.RestTrigger">
            <summary>
            The AreaTrigger that triggered the current Rest-state (or null if not resting).
            Will automatically be set when the Character enters a Rest-Type AreaTrigger
            and will be unset once the Character is too far away from that trigger.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.DrunkState">
            <summary>
            100 Totally smashed
            60 Drunk
            30 Tipsy
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Bytes">
            <summary>
            BYTES
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.CorpseReleaseFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Bytes2_2">
            <summary>
            Set to 0x40 for mage invis
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.RestXp">
            <summary>
            The amount of experience to be gained extra due to resting
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Money">
            <summary>
            Total amount of money in Copper Coins.
            Always make sure that the amount added or subtracted won't lead to a resulting amount greater than uint.Max or less than 0 or
            use Set, Add and SubtractMoney methods to safely modify the amount of money.
            </summary>
            <remarks>1 silver = 100 copper; 1 gold = 10,000 copper</remarks>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Gold">
            <summary>
            The amount of gold coins of this Character. 
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Silver">
            <summary>
            The amount of silver coins of this Character. 
            100 silver is automatically changed into 1 piece of gold.
            </summary>
            <example>30 silver + 120 silver = 1 gold, 50 silver</example>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.AddMoney(System.UInt32)">
            <summary>
            Adds the given amount of money
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SubtractMoney(System.UInt32)">
            <summary>
            Subtracts the given amount of Money. Returns false if its more than this Character has.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.WatchedFaction">
            <summary>
            Set to <value>-1</value> to disable the watched faction
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.NoReagentCost">
            <summary>
            The 3 classmasks of spells to not use require reagents for
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetCombatRating(WCell.Constants.Misc.CombatRating)">
            <summary>
            Gets the total modifier of the corresponding CombatRating (in %) 
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ModCombatRating(WCell.Constants.Misc.CombatRating,System.Int32)">
            <summary>
            Modifies the given CombatRating modifier by the given delta
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.BlockValue">
            <summary>
            Amount of damage reduced when an attack is blocked
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.DodgeChance">
            <summary>
            Value in %
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.OffhandDmgPctMod">
            <summary>
            Percent added to offhand damage
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.HitChance">
            <summary>
            Character's hit chance in %
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.SpellHitChanceFromHitRating">
            <summary>
            Character spell hit chance bonus from hit rating in %
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetQuestId(System.Int32)">
            <summary>
            Gets the quest field.
            </summary>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetQuestId(System.Int32,System.UInt32)">
            <summary>
            Sets the quest field, where fields are indexed from 0.
            </summary>
            <param name="slot">The slot.</param>
            <param name="questid">The questid.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetQuestState(System.Int32)">
            <summary>
            Gets the state of the quest.
            </summary>
            <param name="slot">The slot.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetQuestState(System.Int32,WCell.Constants.Quests.QuestCompleteStatus)">
            <summary>
            Sets the state of the quest.
            </summary>
            <param name="slot">The slot.</param>
            <param name="completeStatus">The status.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetQuestCount(System.Int32,System.UInt32,System.UInt16)">
            <summary>
            Sets the quest count at the given index for the given Quest to the given value.
            </summary>
            <param name="slot">The slot.</param>
            <param name="interactionIndex">The count slot.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetQuestTimeLeft(System.Byte)">
            <summary>
            Gets the quest time.
            </summary>
            <param name="slot">The slot.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetQuestTimeLeft(System.Byte,System.UInt32)">
            <summary>
            Sets the quest time.
            </summary>
            <param name="slot">The slot.</param>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.DailyQuests">
            <summary>
            This array stores completed daily quests
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetDailyQuest(System.Byte)">
            <summary>
            Gets the quest field.
            </summary>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetDailyQuest(System.Byte,System.UInt32)">
            <summary>
            Sets the quest field, where fields are indexed from 0.
            </summary>
            <param name="slot">The slot.</param>
            <param name="questid">The questid.</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.AddDamageDoneModSilently(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.RemoveDamageDoneModSilently(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.HealingDoneMod">
            <summary>
            Increased healing done *by* this Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.HealingDoneModPct">
            <summary>
            Increased healing % done *by* this Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.HealingTakenModPct">
            <summary>
            Increased healing done *to* this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.GetCritChance(WCell.Constants.DamageSchool)">
            <summary>
            Returns the SpellCritChance for the given DamageType (0-100)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetCritChance(WCell.Constants.DamageSchool,System.Single)">
            <summary>
            Sets the SpellCritChance for the given DamageType
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetVisibleItem(WCell.Constants.Items.InventorySlot,WCell.RealmServer.Entities.Item)">
            <summary>
            Make sure that the given slot is actually an EquipmentSlot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.BindActionButton(System.UInt32,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Sets an ActionButton with the given information.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.BindSpellToActionButton(System.UInt32,WCell.Constants.Spells.SpellId,System.Boolean)">
            <summary>
            Sets the given button to the given spell and resends it to the client
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.BindActionButton(WCell.RealmServer.Misc.ActionButton,System.Boolean)">
            <summary>
            Sets the given action button
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ActionButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Ticket">
            <summary>
            The active ticket of this Character or null if there is none
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ObjectTypeId">
            <summary>
            The type of this object (player, corpse, item, etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Client">
            <summary>
            The client currently playing the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Status">
            <summary>
            The status of the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.GroupMember">
            <summary>
            The GroupMember object of this Character (if it he/she is in any group)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.GuildMember">
            <summary>
            The GuildMember object of this Character (if it he/she is in a guild)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ArenaTeamMember">
            <summary>
            The ArenaTeamMember object of this Character (if it he/she is in an arena team)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsDisposed">
            <summary>
            Characters get disposed after Logout sequence completed and
            cannot (and must not) be used anymore.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Group">
            <summary>
            The Group of this Character (if it he/she is in any group)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.SubGroup">
            <summary>
            The subgroup in which the character is (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Guild">
            <summary>
            The guild in which the character is (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Account">
            <summary>
            The account this character belongs to.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Name">
            <summary>
            The name of this character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Archetype">
            <summary>
            The <see cref="P:WCell.RealmServer.Entities.Character.Archetype">Archetype</see> of this Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Outfit">
            <summary>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ChatChannels">
            <summary>
            The channels the character is currently joined to.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsTrading">
            <summary>
            Whether this Character is currently trading with someone
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.TradeWindow">
            <summary>
            Current trading progress of the character
            Null if none
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.LastLogin">
            <summary>
            Last login time of this character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.LastLogout">
            <summary>
            Last logout time of this character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.TotalPlayTime">
            <summary>
            Total play time of this Character in seconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.LevelPlayTime">
            <summary>
            How long is this Character already on this level in seconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ShowAsGameMaster">
            <summary>
            Whether or not this character has the GM-tag set.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.GodMode">
            <summary>
            Gets/Sets the godmode
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsPvPFlagSet">
            <summary>
            Whether the PvP Flag is set.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsPvPTimerActive">
            <summary>
            Whether the PvP Flag reset timer is active.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsAFK">
            <summary>
            Whether or not this character is AFK.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.AFKReason">
            <summary>
            The custom AFK reason when player is AFK.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsDND">
            <summary>
            Whether or not this character is DND.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.DNDReason">
            <summary>
            The custom DND reason when player is DND.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.ChatTag">
            <summary>
            Gets the chat tag for the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Reputations">
            <summary>
            Collection of reputations with all factions known to this Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Skills">
            <summary>
            Collection of all this Character's skills
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Talents">
            <summary>
            Collection of all this Character's Talents
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Achievements">
            <summary>
            Collection of all this Character's Achievements
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.PlayerAuras">
            <summary>
            All spells known to this chr
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.PlayerSpells">
            <summary>
            All spells known to this chr
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.TaxiNodes">
            <summary>
            Mask of the activated Flight Paths
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.BindLocation">
            <summary>
            The Tavern-location of where the Player bound to
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Inventory">
            <summary>
            The Inventory of this Character contains all Items and Item-related things
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.BaseInventory">
            <summary>
            Returns the same as Inventory but with another type (for IContainer interface)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.MailAccount">
            <summary>
            The Character's MailAccount
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.FreeTalentPoints">
            <summary>
            Unused talent-points for this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.UpdateFreeTalentPointsSilently(System.Int32)">
            <summary>
            Doesn't send a packet to the client
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsKicked">
            <summary>
            Forced logout must not be cancelled
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.GossipConversation">
            <summary>
            The current GossipConversation that this Character is having
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.StartGossip(WCell.RealmServer.Gossips.GossipMenu,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Lets the Character gossip with the given speaker
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.StartGossip(WCell.RealmServer.Gossips.GossipMenu)">
            <summary>
            Lets the Character gossip with herself
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInvitedToGroup">
            <summary>
            Returns whether this Character is invited into a Group already
            </summary>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsInvitedToGuild">
            <summary>
            Returns whether this Character is invited into a Guild already
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Create(WCell.RealmServer.RealmAccount,WCell.RealmServer.Database.CharacterRecord,WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Creates a new character and loads all required character data from the database
            </summary>
            <param name="acc">The account the character is associated with</param>
            <param name="record">The name of the character to load</param>
            <param name="client">The client to associate with this character</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Load">
            <summary>
            Loads this Character from DB when logging in.
            </summary>
            <remarks>Requires IO-Context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SetExploredZones">
            <summary>
            Ensure correct size of array of explored zones and  copy explored zones to UpdateValues array
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.LoadAndLogin">
            <summary>
            Loads and adds the Character to its Map.
            </summary>
            <remarks>Called initially from the IO-Context</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.InitializeCharacter">
            <summary>
            Is called after Character has been added to a map the first time and 
            before it receives the first Update packet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.InitItems">
            <summary>
            Load items from DB or (if new char) add initial Items.
            Happens either on login or when items have been loaded during runtime
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnLogin">
            <summary>
            Called within Map Context.
            Sends initial packets
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ReconnectCharacter(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Reconnects a client to a character that was logging out.
            Resends required initial packets.
            Called from within the map context.
            </summary>
            <param name="newClient"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SaveLater">
            <summary>
            Enqueues saving of this Character to the IO-Queue.
            <see cref="M:WCell.RealmServer.Entities.Character.SaveNow"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SaveNow">
            <summary>
            Saves the Character to the DB instantly.
            Blocking call.
            See: <see cref="M:WCell.RealmServer.Entities.Character.SaveLater"/>.
            When calling this method directly, make sure to set m_saving = true
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsLoggingOut">
            <summary>
            whether the Logout sequence initialized (Client might already be disconnected)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.IsPlayerLogout">
            <summary>
            whether the player is currently logging out by itself (not forcefully being logged out).
            Players who are forced to logout cannot cancel.
            Is false while Client is logged in.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.LogoutLater(System.Boolean)">
            <summary>
            Enqueues logout of this player to the Map's queue
            </summary>
            <param name="forced">whether the Character is forced to logout (as oppose to initializeing logout oneself)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Logout(System.Boolean)">
            <summary>
            Starts the logout process with the default delay (or instantly if
            in city or staff)
            Requires map context.
            </summary>
            <param name="forced"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Logout(System.Boolean,System.Int32)">
            <summary>
            Starts the logout process.
            Disconnects the Client after the given delay in seconds, if not in combat (or instantly if delay = 0)
            Requires map context.
            </summary>
            <param name="forced">whether the Character is forced to logout (as opposed to initializing logout oneself)</param>
            <param name="delay">The delay until the client will be disconnected in seconds</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CancelLogout">
            <summary>
            Cancels logout of this Character.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CancelLogout(System.Boolean)">
            <summary>
            Cancels logout of this Character.
            Requires map context.
            </summary>
            <param name="sendCancelReply">whether to send the Cancel-reply (if client did not disconnect in the meantime)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.FinishLogout">
            <summary>
            Saves and then removes Character
            </summary>
            <remarks>Requires map context for synchronization.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Kick(System.String)">
            <summary>
            Kicks this Character with the given msg instantly.
            </summary>
            <remarks>
            Requires map context.
            </remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Kick(System.String,System.Single)">
            <summary>
            Kicks this Character with the given msg after the given delay in seconds.
            Requires map context.
            </summary>
            <param name="delay">The delay until the Client should be disconnected in seconds</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Kick(WCell.RealmServer.Entities.Character,System.String)">
            <summary>
            Broadcasts a kick message and then kicks this Character after the default delay.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Kick(WCell.Util.INamed,System.String,System.Int32)">
            <summary>
            Broadcasts a kick message and then kicks this Character after the default delay.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Dispose(System.Boolean)">
            <summary>
            Performs any needed object/object pool cleanup.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.DeleteNow">
            <summary>
            Throws an exception, since logged in Characters may not be deleted
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.Delete">
            <summary>
            Throws an exception, since logged in Characters may not be deleted
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ModDmgBonusVsCreatureTypePct(WCell.Constants.NPCs.CreatureType,System.Int32)">
            <summary>
            Damage bonus vs creature type in %
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ModDmgBonusVsCreatureTypePct(System.UInt32[],System.Int32)">
            <summary>
            Damage bonus vs creature type in %
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.MovePitch(System.Single)">
            <summary>
            Is called whenever the Character moves up or down in water or while flying.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnFalling">
            <summary>
            Is called whenever the Character falls
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.MoveTransport(WCell.Util.Graphics.Vector4@)">
            <summary>
            Is called whenever the Character is moved while on Taxi, Ship, elevator etc
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnMove">
            <summary>
            Is called whenever a Character moves
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnEncountered(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Is called whenever a new object appears within vision range of this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.SendUnknownState(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Sends yet unknown information about a new object,
            such as Aura packets
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnOutOfRange(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Is called whenever an object leaves this Character's sight
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.OnEnterMap">
            <summary>
            Is called whenever this Character was added to a new map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.StandState">
            <summary>
            Changes the character's stand state and notifies the client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.IsIgnoring(WCell.RealmServer.Misc.IUser)">
            <summary>
            Returns whether this Character ignores the Character with the given low EntityId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.IsAlliedWith(WCell.RealmServer.Entities.Character)">
            <summary>
            Indicates whether the two Characters are in the same <see cref="P:WCell.RealmServer.Entities.Character.Group"/>
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.CheckBindLocation">
            <summary>
            Binds Character to start position if none other is set
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_updatePacket">
            <summary>
            The UpdatePacket that will be sent to this Character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.UpdateCount">
            <summary>
            The amount of UpdateBlocks in <see cref="T:WCell.RealmServer.UpdateFields.UpdatePacket">m_updatePacket</see>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_observers">
            <summary>
            All Characters that recently were inspecting our inventory
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Character.m_environmentQueue">
            <summary>
            Messages to be processed by the map after updating of the environment (sending of Update deltas etc).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.AddPostUpdateMessage(System.Action)">
            <summary>
            Will be executed by the current map we are currently in or enqueued and executed,
            once we re-enter a map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Character.Observers">
            <summary>
            All Characters that are currently inspecting this one.
            Don't manipulate this collection - Use <see cref="M:WCell.RealmServer.Entities.Character.AddObserver(WCell.RealmServer.Entities.Character)"/> instead.
            Might be null.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.RemoveOwnedItem(WCell.RealmServer.Entities.Item)">
            <summary>
            Removes the given item visually from the Client.
            Do not call this method - but use Item.Remove instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ResetOwnWorld">
            <summary>
            Resends all updates of everything
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.ClearSelfKnowledge">
            <summary>
            Clears known objects and leads to resending of the creation packet
            during the next Map-Update.
            This is only needed for teleporting or body-transfer.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.InvalidateKnowledgeOf(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Will resend update packet of the given object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.KnowsOf(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Whether the given Object is visible to (and thus in broadcast-range of) this Character
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.UpdateEnvironment(System.Collections.Generic.HashSet{WCell.RealmServer.Entities.WorldObject})">
            <summary>
            Collects all update-masks from nearby objects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.UpdateRestState">
            <summary>
            Check if this Character is still resting (if it was resting before)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Character.AddObserver(WCell.RealmServer.Entities.Character)">
            <summary>
            Sends Item-information and Talents to the given Character and keeps them updated until they
            are out of range.
            </summary>
            <param name="chr"></param>
        </member>
        <member name="T:WCell.RealmServer.Entities.Character.CharacterLoginHandler">
            <param name="character"></param>
            <param name="firstLogin">Indicates whether the Character starts a new session or if 
            the client re-connected to a Character that was already logged in.</param>
        </member>
        <member name="E:WCell.RealmServer.Entities.Character.LoggedIn">
            <summary>
            Is called when the Player logs in or reconnects to a Character that was logged in before and not logged out yet (due to logout delay).
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Entities.Character.LoggingOut">
            <summary>
            Is called right befrore the Character is disposed and removed.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Entities.Character.Created">
            <summary>
            Is called when the given newly created Character logs in the first time.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Entities.Character.LevelChanged">
            <summary>
            Is called when the given Character gains a new Level.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.Container">
            <summary>
            An equippable container item, such as a bag etc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Container.ContainerSlots">
            <summary>
            NUM_SLOTS
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Corpse.MinReclaimRadius">
            <summary>
            The radius (in yards) in which a Character has to be in order to reclaim his/her corpse (Default: 40)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Corpse.GhostVisibilityRadius">
            <summary>
            The radius (in yards) around a corpse in which the dead owner can see
            living Units
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Corpse.#ctor(WCell.RealmServer.Entities.Character,WCell.Util.Graphics.Vector3,System.Single,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,WCell.Constants.GenderType,WCell.Constants.RaceId,WCell.Constants.CorpseFlags,WCell.Constants.CorpseDynamicFlags)">
            <summary>
            Creates a new Corpse for the given owner
            </summary>
            <param name="owner">The owner of this Corpse</param>
            <param name="pos">The position where the Corpse should appear</param>
            <param name="orientation">Orientation of the corpse</param>
            <param name="displayId">The displayid of the corpse</param>
            <param name="face">Face value</param>
            <param name="skin">Skin value</param>
            <param name="hairStyle">Hairstyle</param>
            <param name="hairColor">Haircolor</param>
            <param name="facialHair">Facial hair (beard)</param>
            <param name="guildId">The guild to which the owner of the corpse belongs</param>
            <param name="gender">Gender of the owner</param>
            <param name="race">Race of the owner</param>
            <param name="flags">Flags (only skeleton or full corpse)</param>
            <param name="dynFlags">Dynamic flags (is it lootable?)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Corpse.SetItem(WCell.Constants.Items.EquipmentSlot,WCell.RealmServer.Items.ItemTemplate)">
            <summary>
            Set the Item at the given slot on this corpse.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Corpse.RemoveItems">
            <summary>
            Removes the Items from this Corpse
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Corpse.StartDecay">
            <summary>
            Starts the decay-timer
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Corpse.ItemBase">
            <summary>
            Array of 19 uints
            TODO: Set the equipment of the player
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.DynamicObject">
            <summary>
            This -contrary to what its name suggests- is a static animation or decoration in the world
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.GameObject">
            <summary>
            TODO: Respawning
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.Create(WCell.Constants.GameObjects.GOEntryId,WCell.RealmServer.Entities.IWorldLocation,WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry,WCell.RealmServer.GameObjects.Spawns.GOSpawnPoint)">
            <summary>
            Creates the given kind of GameObject with the default Template
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.Create(WCell.Constants.GameObjects.GOEntryId,WCell.RealmServer.Global.Map,WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry,WCell.RealmServer.GameObjects.Spawns.GOSpawnPoint)">
            <summary>
            Creates a new GameObject with the given parameters
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.Create(WCell.RealmServer.GameObjects.GOEntry,WCell.RealmServer.Entities.IWorldLocation,WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry,WCell.RealmServer.GameObjects.Spawns.GOSpawnPoint)">
            <summary>
            Creates a new GameObject with the given parameters
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.Init(WCell.RealmServer.GameObjects.GOEntry,WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry,WCell.RealmServer.GameObjects.Spawns.GOSpawnPoint)">
            <summary>
            Initialize the GO
            </summary>
            <param name="entry"></param>
            <param name="templ"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.#ctor">
            <summary>
            Use the <c>Create()</c> method to create new GameObjects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.CanBeUsedBy(WCell.RealmServer.Entities.Character)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.Use(WCell.RealmServer.Entities.Character)">
            <summary>
            Makes the given Unit use this GameObject.
            Skill-locked GameObjects cannot be used directly but must be interacted on with spells.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameObject.TryLoot(WCell.RealmServer.Entities.Character)">
            <summary>
            Lets the given user try to loot this object.
            Called on Chests automatically when using Chest-GOs.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameObject.QuestHolderInfo">
            <summary>
            All available Quest information, in case that this is a QuestGiver
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameObject.RemainingDecayDelayMillis">
            <summary>
            Can be set to initialize Decay after the given delay in seconds.
            Will stop the timer if set to a value less than 0
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameObject.SpawnPoint">
            <summary>
            The Template of this GO (if any was used)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameObject.IsTrap">
            <summary>
            Traps get removed when their AreaAura gets removed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameObject.ArtKit">
            <summary>        
            No idea        
            </summary>        
        </member>
        <member name="P:WCell.RealmServer.Entities.GameObject.AnimationProgress">
            <summary>        
            Seems to be 0 or 100 mostly        
            </summary>        
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.CombatRatings">
            <summary>
            All combat ratings from WCell.Constants.Misc.CombatRating
            NOTE: Fields are indexed by level starting from level 1 = index0 (use level-1)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.BaseSpellCritChance">
            <summary>
            The base spell crit chance modifier indexed by class - 1
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.BaseMeleeCritChance">
            <summary>
            The base melee crit chance modifier indexed by class - 1
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.ClassSpellCritChance">
            <summary>
            Spell crit modifier by level and class
            Used for crit per intellect and crit per crit rating
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.ClassMeleeCritChance">
            <summary>
            Melee crit modifier by level and class
            Used for crit per agility and crit per crit rating
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.BarberShopCosts">
            <summary>
            Barber shop cost per level (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.OCTRegenMP">
            <summary>
            Mana regeneration per class per level (in combat?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.OCTRegenHP">
            <summary>
            Health regeneration per class per level (in combat?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.RegenMPPerSpirit">
            <summary>
            Mana regeneration per class per level (how much spirit it takes for MP5)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.GameTables.RegenHPPerSpirit">
            <summary>
            Health regeneration per class per level (how much spirit it takes for what?)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameTables.GetCRTable(WCell.Constants.Misc.CombatRating)">
            <summary>
            Get's the table from the CombatRating property.
            </summary>
            <param name="rating"></param>
            <returns>The combat rating table with 100 values indexed by level - 1</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameTables.GetClassSpellCritChanceValue(System.Int32,WCell.Constants.ClassId)">
            <summary>
            Gets the modified value from the table ClassSpellCritChance from the correct index.
            </summary>
            <param name="level"></param>
            <param name="id"></param>
            <returns>The modified value matching the format "XX stat for 1% chance"</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameTables.GetClassMeleeCritChanceValue(System.Int32,WCell.Constants.ClassId)">
            <summary>
            Gets the modified value from the table ClassMeleeCritChance from the correct index.
            Returns the modified value matching the format "XX stat for 1% chance"
            </summary>
            <param name="level"></param>
            <param name="id"></param>
            <returns>The modified value matching the format "XX rating for 1% chance"</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameTables.ModifyValue(System.Single)">
            <summary>
            Modifies the values from ClassSpellCritChance, ClassMeleeCritChance
            to match the format of "XX stat for 1% chance"
            TODO: Phase out use for optimization (use the unmodified value)
            </summary>
            <param name="level"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameTables.GetValuePerRating(System.Single[],System.Int32,WCell.Constants.ClassId)">
            <summary>
            Gets the real value from the table (unmodified)
            NOTE: Only for ClassSpellCritChance, ClassMeleeCritChance
            Will return the wrong values if used incorrectly.
            </summary>
            <param name="table">The table (ClassSpellCritChance, ClassMeleeCritChance)</param>
            <param name="level">Level of the character</param>
            <param name="classId">ClassId of the character</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.GameTables.LoadGtDBCs">
            <summary>
            Loads the DBC file starting with gtXXXX.dbc
            </summary>
            <returns>Wether all gametables were loaded</returns>
        </member>
        <member name="F:WCell.RealmServer.Entities.GameTables.BaseRegen">
            <summary>
            The base mana regeneration modifier per level
            TODO: Get it from the DBCs (GtOCTRegenMP.dbc?)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.GameTables.CritAgiMod">
            <summary>
            Agi/1% crit (ClassMeleeCritChance) to agility/1%dodge coefficient multipliers
            Divide the value from GetClassMeleeCritChanceValue(level, Id) by this.
            Latest intel says this is wrong.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.GameTables.DiminisherConstant">
            <summary>
            Constant used for diminishing returns indexed per class.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.GameTables.StatCap">
            <summary>
            Stat cap constant per class
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ICharacterSet.CharacterCount">
            <summary>
            Amount of Characters in this set
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ICharacterSet.FactionGroup">
            <summary>
            FactionGroup or 0 if this is not a biased group
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.ICharacterSet.ForeachCharacter(System.Action{WCell.RealmServer.Entities.Character})">
            <summary>
            Calls the given callback within each Character's context
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.ICharacterSet.GetAllCharacters">
            <summary>
            Creates a Copy of the set
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.IEntity">
            <summary>
            Defines an in-game entity.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.IEntity.EntityId">
            <summary>
            The EntityId
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.IPacketReceivingEntity">
            <summary>
            Defines an entity that can recieve packets.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.INamedEntity">
            <summary>
            Defines an entity with a name.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.ISummoner">
            <summary>
            A Summoner has an Id, a Name and a WorldZonePosition
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.ILivingEntity">
            <summary>
            Defines a living in-game entity.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.ILockable">
            <summary>
            Represents any entity that might have a lock
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ILockable.Lock">
            <summary>
            The lock (might be null)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.IOwned">
            <summary>
            Anything that is usable: Items and GameObjects so far
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Item.m_unknown">
            <summary>
            Items are unknown when a creation update
            has not been sent to the Owner yet.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.InitItem(WCell.RealmServer.Items.ItemTemplate,WCell.RealmServer.Entities.Character,System.Int32)">
            <summary>
            Initializes a new Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.LoadItem(WCell.RealmServer.Database.ItemRecord,WCell.RealmServer.Entities.Character,WCell.RealmServer.Items.ItemTemplate)">
            <summary>
            Loads an already created item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.LoadItem(WCell.RealmServer.Database.ItemRecord,WCell.RealmServer.Items.ItemTemplate)">
            <summary>
            Loads an already created item without owner
            </summary>
            <param name="record"></param>
            <param name="template"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnInit">
            <summary>
            Called after initializing a newly created Item (Owner might be null)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnLoad">
            <summary>
            Called after loading an Item (Owner might be null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.IsDeleted">
            <summary>
            Whether this object has already been deleted.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.CanBeUsed">
            <summary>
            Checks whether this Item can currently be used
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Name">
            <summary>
            The name of this item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Owner">
            <summary>
            See IUsable.Owner
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.IsEquipped">
            <summary>
            Whether this Item is currently equipped.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.IsEquippedItem">
            <summary>
            Whether this Item is currently equipped and is not a kind of container.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.IsEquippedContainer">
            <summary>
            Whether this is a Container and it is currently
            equipped or in a bankbag slot (so Items can be put into it).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.IsApplied">
            <summary>
            Wheter this item's bonuses are applied
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnAdd">
            <summary>
            Called when this Item was added to someone's inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.Save">
            <summary>
            Saves all recent changes that were made to this Item to the DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.Split(System.Int32)">
            <summary>
            Subtracts the given amount from this item and creates a new item, with that amount.
            WARNING: Make sure that this item is belonging to someone and that amount is valid!
            </summary>
            <param name="amount">The amount of the newly created item</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.CreateNew(System.Int32)">
            <summary>
            Creates a new Item of this type with the given amount.
            Usually only used on stackable Items that do not have individual
            properties (like durability, enchants etc).
            WARNING: Make sure that this item is belonging to someone and that amount is valid!
            </summary>
            <param name="amount">The amount of the newly created item</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.CanStackWith(WCell.RealmServer.Entities.Item)">
            <summary>
            TODO: Random properties
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnFinishedLooting">
            <summary>
            A chest was looted empty
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Enchantments">
            <summary>
            All applied Enchantments.
            Could return null if it doesn't have any.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.GetRemainingEnchantDuration(WCell.Constants.Items.EnchantSlot)">
            <summary>
            The time until the given Enchantment expires or <see cref="F:System.TimeSpan.Zero"/> if not temporary
            </summary>
            <param name="enchantSlot"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.ApplyEnchant(WCell.RealmServer.Items.Enchanting.ItemEnchantmentEntry,WCell.Constants.Items.EnchantSlot,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds a new the <see cref="T:WCell.RealmServer.Items.Enchanting.ItemEnchantment"/> to the given Slot.
            Will remove any existing Enchantment in that slot.
            </summary>
            <param name="enchantSlot"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnOwnerReceivedNewEnchant(WCell.RealmServer.Items.Enchanting.ItemEnchantment)">
            <summary>
            Called when owner learns about new enchant:
            When enchant gets added and when receiving an enchanted item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.RemoveEnchant(WCell.Constants.Items.EnchantSlot)">
            <summary>
            Removes the <see cref="T:WCell.RealmServer.Items.Enchanting.ItemEnchantment"/> from the given Slot.
            </summary>
            <param name="enchantSlot"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.ApplyGems``1(``0[])">
            <summary>
            Applies the given gems to this Item. 
            Each gem will be matched to the socket of the same index.
            </summary>
            <param name="gems"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.ApplyRandomEnchants(System.Collections.Generic.List{WCell.RealmServer.Items.ItemRandomEnchantEntry},WCell.Constants.Items.EnchantSlot,WCell.Constants.Items.EnchantSlot)">
            <summary>
            Applies a set of random enchants in the prop slots between from and to
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.CheckSocketColors">
            <summary>
            Activate bonus enchant if all sockets have matching gems.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.CheckGems``1(``0[])">
            <summary>
            Check whether the given gems match the color of the socket of the corresponding index within
            the gems-array.
            Check for unique count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gems"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.Equip">
            <summary>
            Tries to equip this Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnEquip">
            <summary>
            Called when this Item gets equipped.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnUnEquip(WCell.Constants.Items.InventorySlot)">
            <summary>
            Called when this Item gets unequipped.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.OnUse">
            <summary>
            Called whenever an item is used.
            Make sure to only call on Items whose Template has a UseSpell.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.Destroy">
            <summary>
            Destroys the Item without further checks.
            Also destroys all contained Items if this is a Container.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.DoDestroy">
            <summary>
            Called by the container to 
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.Remove(System.Boolean)">
            <summary>
            Removes this Item from its old Container (if it was added to any).
            After calling this method,
            make sure to either Dispose the item after removing (in this case you can also simply use <see cref="M:WCell.RealmServer.Entities.Item.Destroy"/>
            or re-add it somewhere else.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Container">
            <summary>
            The Inventory of the Container that contains this Item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Creator">
            <summary>
            The life-time of this Item in seconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Slot">
            <summary>
            The Slot of this Item within its <see cref="P:WCell.RealmServer.Entities.Item.Container">Container</see>.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Item.ModAmount(System.Int32)">
            <summary>
            Modifies the amount of this item (size of this stack).
            Ensures that new value won't exceed UniqueCount.
            Returns how many items actually got added. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.Amount">
            <summary>
            Current amount of items in this stack.
            Setting the Amount to 0 will destroy the Item.
            Keep in mind that this is uint and thus can never become smaller than 0!
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.SpellCharges">
            <summary>
            Charges of the <c>UseSpell</c> of this Item.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.MinRange">
            <summary>
            The minimum Range of this weapon
            TODO: temporary values
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.MaxRange">
            <summary>
            The maximum Range of this Weapon
            TODO: temporary values
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Item.AttackTime">
            <summary>
            The time in milliseconds between 2 attacks
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Movement.m_lastMoveTime">
            <summary>
            Starting time of movement
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Movement.m_totalMovingTime">
            <summary>
            Total time of movement
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Movement.m_desiredEndMovingTime">
            <summary>
            Time at which movement should end
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Movement.m_destination">
            <summary>
            The target of the current (or last) travel
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Movement.m_moveType">
            <summary>
            The movement type (walking, running or flying)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Movement.MayMove">
            <summary>
            AI-controlled Movement setting
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Movement.IsAtDestination">
            <summary>
            Whether the owner is within 1 yard of the Destination
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Movement.MovementFlags">
            <summary>
            Get movement flags for the packet
            </summary>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.Movement.RemainingTime">
            <summary>
            Remaining movement time to current Destination (in millis)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Movement.MoveTo(WCell.Util.Graphics.Vector3,System.Boolean)">
            <summary>
            Starts the MovementAI
            </summary>
            <returns>Whether already arrived</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Movement.MoveToPoints(System.Collections.Generic.List{WCell.Util.Graphics.Vector3})">
            <summary>
            Starts the MovementAI
            </summary>
            <returns>Whether already arrived</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Movement.Update">
            <summary>
            Interpolates the current Position
            </summary>
            <returns>Whether we arrived</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Movement.Stop">
            <summary>
            Stops at the current position
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Movement.MoveToDestination">
            <summary>
            Starts moving to current Destination
            </summary>
            <remarks>Sends movement packet to client</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Movement.UpdatePosition">
            <summary>
            Updates position of unit
            </summary>
            <returns>true if target point is reached</returns>
        </member>
        <member name="T:WCell.RealmServer.Entities.NamedEntity">
            <summary>
            Defines an entity with a name.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.NPC">
            <summary>
            Represents a non-player character.
            </summary>
            <summary>
            TODO: Move everything NPC-related from UnitUpdates in here
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.UpdateUnitState">
            <summary>
            Update Unit-fields, according to given flags
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.CanEvade">
            <summary>
            Uncontrolled NPCs that are not summoned can evade
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.GetRandomAttacker">
            <summary>
            Gets a random Unit from those who generated Threat
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.Group">
            <summary>
            The AIGroup this NPC currently belongs to.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsDecaying">
            <summary>
            An NPC is decaying after it died and was looted empty.
            Setting this to true, starts or resets the decay-timer.
            Once the NPC decayed, it will be deleted.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.RemainingDecayDelayMillis">
            <summary>
            Remaining time until the NPC decay (or 0 if already decayed or decaying did not start yet).
            Deactivates the timer if set to a value smaller or equal to 0
            </summary>
            <remarks>Requires map-context</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.SetEquipment(WCell.RealmServer.NPCs.NPCEquipmentEntry)">
            <summary>
            Sets this NPC's equipment to the given entry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.GetOrInvalidateItem(WCell.Constants.Items.InventorySlotType)">
            <summary>
            NPCs only have their default items which may always be used, so no invalidation
            takes place.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.CheckCreatureType(WCell.Constants.NPCs.CreatureMask)">
            <summary>
            Checks whether this NPC is of the given type
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.EnterLootableState">
            <summary>
            Marks this NPC lootable (after NPC died)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.EnterFinalState">
            <summary>
            Marks this NPC non-lootable (after NPC was looted)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.CheckVendorInteraction(WCell.RealmServer.Entities.Character)">
            <summary>
            Also sends a message to the Character, if not valid
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.YellToMap(System.String[])">
            <summary>
            Yells to everyone within the map to hear
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsTaxiVendor">
            <summary>
            Whether this unit is a TaxiVendor
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.NPC.vendorTaxiNode">
            <summary>
            The TaxiNode this TaxiVendor is associated with
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.VendorTaxiNode">
            <summary>
            The TaxiNode this TaxiVendor is associated with
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsBanker">
            <summary>
            Whether this is a Banker
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsInnKeeper">
            <summary>
            Whether this is an InnKeeper
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.BindPoint">
            <summary>
            The location to which a Character can bind to when talking to this NPC 
            or null if this is not an InnKeeper.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsVendor">
            <summary>
            Whether this is a Vendor
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.ItemsForSale">
            <summary>
            A list of Items this Vendor has for sale. 
            Returns <c>VendorItemEntry.EmptyList</c> if this is not a Vendor
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.VendorEntry">
            <summary>
            The Vendor-specific details for this NPC
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsStableMaster">
            <summary>
            Whether this is a Stable Master
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsPetitioner">
            <summary>
            Whether this NPC can issue Charters
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsTabardVendor">
            <summary>
            Whether this is a Tabard Vendor
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsGuildPetitioner">
            <summary>
            Whether this NPC can issue Guild Charters
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsArenaPetitioner">
            <summary>
            Whether this NPC can issue Arena Charters
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsQuestGiver">
            <summary>
            Whether this NPC starts a quest (or multiple quests)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.QuestHolderInfo">
            <summary>
            All available Quest information, in case that this is a QuestGiver
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsTrainer">
            <summary>
            Whether this is a Trainer.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.NPC.TrainerEntry">
            <summary>
            The Trainer-specific details for this NPC.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.CanTrain(WCell.RealmServer.Entities.Character)">
            <summary>
            Whether this NPC can train the character in their specialty.
            </summary>
            <returns>True if able to train.</returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsAuctioneer">
            <summary>
            Whether this is an Auctioneer.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.NPC.AuctioneerEntry">
            <summary>
            The Aucioneer-specific details of this NPC.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.CurrentTamer">
            <summary>
            The Character that currently tries to tame this Creature (or null if not being tamed)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.RejectMaster">
            <summary>
            We were controlled and reject the Controller.
            Does nothing if not controlled.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.AddDamageDoneModSilently(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            Requires a call to <see cref="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateAllDamages(WCell.RealmServer.Entities.Unit)"/> afterwards.
            </summary>
            <param name="school"></param>
            <param name="delta"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.RemoveDamageDoneModSilently(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            Requires a call to <see cref="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateAllDamages(WCell.RealmServer.Entities.Unit)"/> afterwards.
            </summary>
            <param name="school"></param>
            <param name="delta"></param>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsActivePet">
            <summary>
            Whether this is the active pet of it's master (with an action bar)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.IsHunterPet">
            <summary>
            Whether this is a Hunter pet.
            See http://www.wowwiki.com/Hunter_pet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.TrySetPetName(WCell.RealmServer.Entities.Character,System.String)">
            <summary>
            Validates the given name and sends the reason if it was not valid.
            </summary>
            <param name="chr">The pet's owner.</param>
            <param name="name">The proposed name.</param>
            <returns>True if the name is kosher.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.MakePet(System.UInt32)">
            <summary>
            Makes this the pet of the given owner
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.OnBecameActivePet">
            <summary>
            Is called when this Pet became the ActivePet of a Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.Talents">
            <summary>
            Collection of all this Pet's Talents
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.NPC.MayGainExperience">
            <summary>
            Whether this NPC currently may gain levels and experience (usually only true for pets and certain kinds of minions)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.NPC.CastPetSpell(WCell.Constants.Spells.SpellId,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Lets this Pet cast the given spell
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.ObjectBase">
            <summary>
            The base class for all in-game Objects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.SetByte(WCell.Constants.Updates.UpdateFieldId,System.Int32,System.Byte)">
            <summary>
            Sets a specified byte of an updatefield to the specified value
            </summary>
            <param name="field">The field to set</param>
            <param name="index">The index of the byte in the 4-byte field. (Ranges from 0-3)</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.SetByte(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets a specified byte of an updatefield to the specified value
            </summary>
            <param name="field">The field to set</param>
            <param name="value">The value to set</param>
            <param name="index">The index of the byte in the 4-byte field. (Ranges from 0-3)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.MarkUpdate(System.Int32)">
            <summary>
            Is called whenever a field has changed.
            Adds the given index to the corresponding UpdateMasks.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.MarkUpdate(WCell.Constants.Updates.UpdateFieldId)">
            <summary>
            Marks the given UpdateField for an Update.
            Marked UpdateFields will be re-sent to all surrounding Characters.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectBase.ObjectTypeId">
            <summary>
            The type of this object (player, corpse, item, etc)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.OnFinishedLooting">
            <summary>
            Called whenever everything has been looted off this object.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectBase.EntityId">
            <summary>
             The entity ID of the object
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectBase.Loot">
            <summary>
            The current loot that can be looted of this object (if loot has been generated yet)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.ObjectBase.m_publicUpdateMask">
            <summary> 
            This is a reference to <see cref="F:WCell.RealmServer.Entities.ObjectBase.m_privateUpdateMask"/> if there are no private values in this object
            else its handled seperately
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.IsUpdateFieldPublic(System.Int32)">
            <summary>
            Whether the given field is public
            </summary>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectBase.HasPrivateUpdateFields">
            <summary>
            Whether this Object has any private Update fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.ObjectBase.WriteMovementUpdate(WCell.Core.Network.PrimitiveWriter,WCell.Constants.Updates.UpdateFieldFlags)">
            <summary>
            Writes the major portion of the create block.
            This handles flags 0x20, 0x40, and 0x100, they are exclusive to each other
            The content depends on the object's type
            </summary>
            <param name="writer"></param>
            <param name="relation"></param>
        </member>
        <member name="T:WCell.RealmServer.Entities.ObjectReference">
            <summary>
            Wraps a WorldObject.
            This is primarily used for Auras and other things that are allowed to persist after
            a Character or object might be gone, but still require basic information about the original
            object.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectReference.UnitMaster">
            <summary>
            Returns the Unit behind this object (if exists)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectTemplate.Id">
            <summary>
            Entry Id
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.ObjectTemplate.QuestHolderInfo">
            <summary>
            The QuestHolderEntry of this template, if this is a QuestGiver
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.SynchronizedCharacterList.ForeachCharacter(System.Action{WCell.RealmServer.Entities.Character})">
            <summary>
            Threadsafe iteration
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.SynchronizedCharacterList.GetAllCharacters">
            <summary>
            Creates a Copy of the set
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.IterateEnvironment(WCell.RealmServer.Entities.IWorldLocation,System.Single,System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean})">
            <summary>
            Iterates over all objects within the given radius around this object.
            </summary>
            <param name="radius"></param>
            <param name="predicate">Returns whether to continue iteration.</param>
            <returns>True, if iteration should continue (usually indicating that we did not find what we were looking for).</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.IterateEnvironment``1(WCell.RealmServer.Entities.IWorldLocation,System.Single,System.Func{``0,System.Boolean})">
            <summary>
            Iterates over all objects of the given Type within the given radius around this object.
            </summary>
            <param name="radius"></param>
            <param name="predicate">Returns whether to continue iteration.</param>
            <returns>True, if iteration should continue (usually indicating that we did not find what we were looking for).</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetObjectsInRadius``1(``0,System.Single,WCell.Constants.Updates.ObjectTypes,System.Boolean,System.Int32)">
            <summary>
            Returns all objects in radius
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyClients``1(``0,System.Boolean)">
            <summary>
            Gets all clients in update-radius that can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyClients``1(``0,System.Single,System.Boolean)">
            <summary>
            Gets all clients that can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyCharacters``1(``0)">
            <summary>
            Gets all characters that can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyCharacters``1(``0,System.Boolean)">
            <summary>
            Gets all characters that can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyCharacters``1(``0,System.Single,System.Boolean)">
            <summary>
            Gets all characters that can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyHordeCharacters``1(``0,System.Single)">
            <summary>
            Gets all Horde players in the given radius.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyAllianceCharacters``1(``0,System.Single)">
            <summary>
            Gets all alliance players in the given radius.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyAtLeastNeutralUnits``1(``0)">
            <summary>
            Gets all units that are at least neutral with it who can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyAtLeastNeutralUnits``1(``0,System.Boolean)">
            <summary>
            Gets all units that are at least neutral with it who can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyAtLeastNeutralUnits``1(``0,System.Single,System.Boolean)">
            <summary>
            Gets all units that are at least neutral with it who can see this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyRandomHostileCharacter``1(``0)">
            <summary>
            Gets a random nearby Character in WorldObject.BroadcastRange who is alive and visible.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearbyRandomHostileCharacter``1(``0,System.Single)">
            <summary>
            Gets a random nearby Character in WorldObject.BroadcastRange who is alive and visible.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearestUnit(WCell.RealmServer.Entities.IWorldLocation,System.Single)">
            <summary>
            Returns the Unit that is closest within the given Radius around this Object
            TODO: Should add visibility test?
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearestUnit(WCell.RealmServer.Entities.IWorldLocation,System.Func{WCell.RealmServer.Entities.Unit,System.Boolean})">
            <summary>
            Returns the Unit that is closest within the given Radius around this Object and passes the filter
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Targeting.GetNearestUnit(WCell.RealmServer.Entities.IWorldLocation,System.Single,System.Func{WCell.RealmServer.Entities.Unit,System.Boolean})">
            <summary>
            Returns the Unit that is closest within the given Radius around this Object and passes the filter
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.Transport">
            <summary>
            Ships, Zeppelins etc
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.Unit">
            <summary>
            Base class for Players and NPCs (also Totems and similar).
            
            
            </summary>
            All damage-related UnitFields are to be found in this file
            <summary>
            
            </summary>
            <summary>
            TODO: Move everything Unit-related from UnitUpdates in here
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CanGenerateThreat">
            <summary>
            Whether this Unit can aggro NPCs.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnEvaded">
            <summary>
            Is called when a Unit successfully evaded (and arrived at its original location)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Follow(WCell.RealmServer.Entities.Unit)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.Util.Graphics.Vector3,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves towards the given target and then executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToPointsThenExecute(System.Collections.Generic.List{WCell.Util.Graphics.Vector3},WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves towards the given target and then executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveInFrontThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves in front of the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveInFrontThenExecute(WCell.RealmServer.Entities.GameObject,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves in front of the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveInFrontThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves in front of the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveInFrontThenExecute(WCell.RealmServer.Entities.GameObject,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves in front of the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveBehindThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveBehindThenExecute(WCell.RealmServer.Entities.GameObject,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveBehindThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveBehindThenExecute(WCell.RealmServer.Entities.GameObject,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.Unit,System.Single,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.GameObject,System.Single,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.Unit,System.Single,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given target and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.GameObject,System.Single,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given gameobject and once within default range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.SimpleRange,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within the given range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.GameObject,WCell.RealmServer.Misc.SimpleRange,WCell.RealmServer.Entities.UnitActionCallback)">
            <summary>
            Moves to the given target and once within the given range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.SimpleRange,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given target and once within the given range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenExecute(WCell.RealmServer.Entities.GameObject,WCell.RealmServer.Misc.SimpleRange,WCell.RealmServer.Entities.UnitActionCallback,System.Int32)">
            <summary>
            Moves to the given target and once within the given range, executes the given action
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenIdle(WCell.Util.Graphics.Vector3@)">
            <summary>
            Moves this Unit to the given position and then goes Idle
            </summary>
            <param name="pos"></param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenIdle(WCell.Core.Paths.IHasPosition)">
            <summary>
            Moves this Unit to the given position and then goes Idle
            </summary>
            <param name="pos"></param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenEnter(WCell.Util.Graphics.Vector3@,WCell.RealmServer.AI.BrainState)">
            <summary>
            Moves this Unit to the given position and then assumes arrivedState
            </summary>
            <param name="pos"></param>
            <param name="arrivedState">The BrainState to enter once arrived</param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenEnter(WCell.Util.Graphics.Vector3@,System.Boolean,WCell.RealmServer.AI.BrainState)">
            <summary>
            Moves this Unit to the given position and then assumes arrivedState
            </summary>
            <param name="pos"></param>
            <param name="arrivedState">The BrainState to enter once arrived</param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenEnter(WCell.Core.Paths.IHasPosition,WCell.RealmServer.AI.BrainState)">
            <summary>
            Moves this Unit to the given position and then assumes arrivedState
            </summary>
            <param name="pos"></param>
            <param name="arrivedState">The BrainState to enter once arrived</param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.MoveToThenEnter(WCell.Core.Paths.IHasPosition,System.Boolean,WCell.RealmServer.AI.BrainState)">
            <summary>
            Moves this Unit to the given position and then assumes arrivedState
            </summary>
            <param name="pos"></param>
            <param name="arrivedState">The BrainState to enter once arrived</param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IdleThenExecute(System.Int32,System.Action)">
            <summary>
            Idles for the given time and then executes the given action.
            Also will unset the current Target and stop fighting.
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IdleThenExecute(System.Int32,System.Action,WCell.Constants.Spells.ProcTriggerFlags)">
            <summary>
            Idles for the given time and then executes the given action.
            Also will unset the current Target and stop fighting.
            </summary>
            <param name="interruptFlags">What can interrupt the action.</param>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Idle(System.Int32)">
            <summary>
            Idles for the given time before resuming its normal activities
            Also will unset the current Target and stop fighting.
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Idle(WCell.Constants.Spells.ProcTriggerFlags)">
            <summary>
            Idles until the given flags have been triggered.
            Also will unset the current Target and stop fighting.
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Idle(System.Int32,WCell.Constants.Spells.ProcTriggerFlags)">
            <summary>
            Idles for the given time before resuming its normal activities
            Also will unset the current Target and stop fighting.
            </summary>
            <remarks>Requires Brain</remarks>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.DefaultMeleeAttackRange">
            <summary>
            Used to determine melee distance
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.DefaultRangedAttackRange">
            <summary>
            Used to determine ranged attack distance
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.PvPDeactivationDelay">
            <summary>
            Time in milliseconds until a Player can leave combat
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_attackTimer">
            <summary>
            Times our melee and ranged attacks
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_isInCombat">
            <summary>
            whether this Unit is currently in Combat-mode (effects regeneration etc).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_isFighting">
            <summary>
            whether this Unit is currently actively fighting.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_lastStrike">
            <summary>
            The Environment.TickCount of your last strikes
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_lastOffhandStrike">
            <summary>
            The Environment.TickCount of your last strikes
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.LastCombatTime">
            <summary>
            The last time when this Unit was still actively Fighting
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ResetSwingDelay">
            <summary>
            While in combat, this method will reset the current swing delay (swing timer is reset)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.AutorepeatSpell">
            <summary>
            The spell that is currently being triggered automatically by the CombatTimer
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsUsingRangedWeapon">
            <summary>
            Whether this Unit is currently attacking with a ranged weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ExtraAttacks">
            <summary>
            Amount of extra attacks to hit on next thit
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnAttack(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Adds damage mods to the given AttackAction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnDefend(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Adds damage mods to the given AttackAction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.AddHealingModsToAction(System.Int32,WCell.RealmServer.Spells.SpellEffect,WCell.Constants.DamageSchool)">
            <summary>
            Adds damage mods to the given AttackAction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.UsesPendingAbility(WCell.RealmServer.Items.IWeapon)">
            <summary>
            Whether this unit has an ability pending for the given weapon (Heroic Strike for melee, Poison Dart for throwing, Stun Shot for ranged weapons etc)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike">
            <summary>
            Strike using mainhand weapon
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike(WCell.RealmServer.Items.IWeapon)">
            <summary>
            Strike using given weapon
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike(WCell.RealmServer.Entities.Unit)">
            <summary>
            Strike the target using mainhand weapon
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike(WCell.RealmServer.Items.IWeapon,WCell.RealmServer.Entities.Unit)">
            <summary>
            Strike the target using given weapon
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike(WCell.RealmServer.Items.IWeapon,WCell.RealmServer.Misc.DamageAction,WCell.RealmServer.Entities.Unit)">
            <summary>
            Do a single attack using the given weapon and action on the target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike(WCell.RealmServer.Items.IWeapon,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellCast)">
            <summary>
            Do a single attack on the target using given weapon and ability.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Strike(WCell.RealmServer.Items.IWeapon,WCell.RealmServer.Misc.DamageAction,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellCast)">
            <summary>
            Do a single attack on the target using given weapon, ability and action.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetWeaponDamage(WCell.RealmServer.Misc.DamageAction,WCell.RealmServer.Items.IWeapon,WCell.RealmServer.Spells.SpellCast,System.Int32)">
            <summary>
            Returns random damage for the given weapon
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DealSpellDamage(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Does spell-damage to this Unit
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetResistChancePct(WCell.RealmServer.Entities.Unit,WCell.Constants.DamageSchool)">
            <summary>
            Calculates this Unit's chance to resist the given school.
            Value is between 0 and 100
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CalcDodgeChance(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Returns percent * 100 of chance to dodge
            Modified by expertise.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CalcParryChance(WCell.RealmServer.Entities.Unit)">
            <summary>
            Returns percent * 100 of chance to parry.
            Modified by expertise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CalcCritDamage(System.Single,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Modified by victim's resilience
            </summary>
            <param name="dmg"></param>
            <param name="victim"></param>
            <param name="effect"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CheckResist(WCell.RealmServer.Entities.Unit,WCell.Constants.DamageSchool,WCell.Constants.Spells.SpellMechanic)">
            <summary>
            whether this Unit completely resists a spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CheckDebuffResist(System.Int32,WCell.Constants.DamageSchool)">
            <summary>
            whether this Unit resists a debuff (independent on resistances)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsInCombat">
            <summary>
            whether this Unit is currently in Combat.
            If it is actively fighting (rather than being forced into CombatMode),
            IsFighting must be true.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsFighting">
            <summary>
            Indicates whether this Unit is currently trying to swing at its target.
            If <c>IsInCombat</c> is set but Unit is not fighting, it will leave Combat mode after <c>CombatDeactivationDelay</c> without combat activity.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CombatTick(System.Int32)">
            <summary>
            Tries to land a mainhand hit + maybe offhand hit on the current Target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CheckCombatState">
            <summary>
            Checks whether the Unit can attack.
            Also deactivates combat mode, if unit has left combat for long enough.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ResetAttackTimer">
            <summary>
            Resets the attack timer to delay the next strike by the current weapon delay,
            if Unit is fighting.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnEnterCombat">
            <summary>
            Is called whenever this Unit enters Combat mode
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnLeaveCombat">
            <summary>
            Is called whenever this Unit leaves Combat mode
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnDamageAction(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Is called whenever this Unit receives any kind of damage
            
            TODO: There is a small chance with each hit by your weapon that it will lose 1 durability point.
            TODO: There is a small chance with each spell cast that you will lose 1 durability point to your weapon. 
            TODO: There is a small chance with each hit absorbed by your armor that it will lose 1 durability point.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IsInAttackRange(WCell.RealmServer.Entities.Unit)">
            <summary>
            Returns whether the given Object is in range of Main- or Extra (Ranged)- weapon
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CanReachForCombat(WCell.RealmServer.Entities.Unit)">
            <summary>
            Whether the suitable target is in reach to be attacked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IsInMeleeAttackRangeSq(WCell.RealmServer.Items.IWeapon,WCell.RealmServer.Entities.Unit,System.Single)">
            <summary>
            Melee has no Min range
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CanCastSpellOn(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.Spell)">
            <summary>
            Checks for hostility etc
            
            TODO: Restrict interference in Duels
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.MinStandStillDelay">
            <summary>
            Time in milliseconds between last move and when one officially stands still
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_regenerates">
            <summary>
            Indicates whether regeneration of Health and Power is currently activated
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_schoolPowerCostMods">
            <summary>
            Flat, school-specific PowerCostMods
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_lastMoveTime">
            <summary>
            The time of when this Unit last moved (used for speedhack check)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_vehicleSeat">
            <summary>
            The currently occupied VehicleSeat (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.FirstAttacker">
            <summary>
            The Unit that attacked this NPC first.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.LastKiller">
            <summary>
            The Unit that last killed this guy or null, if none or gone (is not reliable over time).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsPvPing">
            <summary>
            Whether this Unit is currently participating in PvP.
            That is if both participants are players and/or belong to players.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsSpiritHealer">
            <summary>
            Whether this is a Spirit Guide/Spirit Healer.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Auras">
            <summary>
            A collection of all Auras (talents/buffs/debuffs) of this Unit
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ChatTag">
            <summary>
            Gets the chat tag for the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ComboPoints">
            <summary>
            Amount of current combo points with last combo target
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ComboTarget">
            <summary>
            Current holder of combo-points for this chr
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModComboState(WCell.RealmServer.Entities.Unit,System.Int32)">
            <summary>
            Change combo target and/or amount of combo points
            </summary>
            <returns>If there is a change</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetIntMod(WCell.Constants.StatModifierInt)">
            <summary>
            Returns one of the arbitrary modifier values
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsGhost">
            <summary>
            Whether this is a ghost
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.DeathPrevention">
            <summary>
            This is used to prevent this Unit from dying during a
            critical process, such as damage application.
            If health is at 0 this Unit won't "<see cref="M:WCell.RealmServer.Entities.Unit.Die(System.Boolean)"/>" until
            DeathPrevention is set to 0 again. This prevents certain problems from happening.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Die(System.Boolean)">
            <summary>
            Different from <see cref="M:WCell.RealmServer.Entities.Unit.Kill"/> which actively kills the Unit.
            Is called when this Unit dies, i.e. Health gets smaller than 1.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Resurrect">
            <summary>
            Resurrects this Unit if dead
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnResurrect">
            <summary>
            Called automatically when Unit re-gains Health.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsMounted">
            <summary>
            whether this Unit is sitting on a ride
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Mount(System.UInt32)">
            <summary>
            Mounts the given displayId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Dismount">
            <summary>
            Takes the mount off this Unit's butt (if mounted)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DoDismount">
            <summary>
            Is called internally.
            <see cref="M:WCell.RealmServer.Entities.Unit.Dismount"/> 
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Regenerates">
            <summary>
            whether the Unit is allowed to regenerate at all.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsManaRegenInterrupted">
            <summary>
            Mana regen is in the "interrupted" state for Spell-Casters 5 seconds after a SpellCast and during SpellChanneling.
            See http://www.wowwiki.com/Mana_regeneration#Five-Second_Rule
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PowerRegenPerTickActual">
            <summary>
            The real amount of Power that is added per regen-tick
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PowerRegenPerTick">
            <summary>
            The amount of Power to add per regen-tick (while not being "interrupted").
            Value is automatically set, depending on stats
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ManaRegenPerTickInterrupted">
            <summary>
            The amount of power to be generated during combat per regen tick (while being "interrupted")
            Only used for PowerType.Mana units
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.HealthRegenPerTickNoCombat">
            <summary>
            The amount of Health to add per regen-tick while not in combat
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.HealthRegenPerTickCombat">
            <summary>
            The amount of Health to add per regen-tick during combat
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Regenerate(System.Int32)">
            <summary>
            Is called on Regeneration ticks
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetPowerCost(WCell.Constants.DamageSchool,WCell.RealmServer.Spells.Spell,System.Int32)">
            <summary>
            Returns the modified power-cost needed to cast a Spell of the given DamageSchool 
            and the given base amount of power required
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModPowerCost(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the power-cost for the given DamageSchool by value
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModPowerCost(System.UInt32[],System.Int32)">
            <summary>
            Modifies the power-cost for all of the given DamageSchools by value
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModPowerCostPct(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the power-cost for the given DamageSchool by value
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModPowerCostPct(System.UInt32[],System.Int32)">
            <summary>
            Modifies the power-cost for all of the given DamageSchools by value
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ConsumePower(WCell.Constants.DamageSchool,WCell.RealmServer.Spells.Spell,System.Int32)">
            <summary>
            Tries to consume the given amount of Power, also considers modifiers to Power-cost.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.HealPercent(System.Int32,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Heals this unit and sends the corresponding animation (healer might be null)
            </summary>
            <param name="effect">The effect of the spell that triggered the healing (or null)</param>
            <param name="healer">The object that heals this Unit (or null)</param>
            <param name="value">The amount to be healed</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Heal(System.Int32,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Heals this unit and sends the corresponding animation (healer might be null)
            </summary>
            <param name="value">The amount to be healed</param>
            <param name="healer">The object that heals this Unit (or null)</param>
            <param name="effect">The effect of the spell that triggered the healing (or null)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnHeal(WCell.RealmServer.Misc.HealAction)">
            <summary>
            This method is called whenever a heal is placed on a Unit by another Unit
            </summary>
            <param name="healer">The healer</param>
            <param name="value">The amount of points healed</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.LeechHealth(WCell.RealmServer.Entities.Unit,System.Int32,System.Single,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Leeches the given amount of health from this Unit and adds it to the receiver (if receiver != null and is Unit).
            </summary>
            <param name="factor">The factor applied to the amount that was leeched before adding it to the receiver</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.EnergizePercent(System.Int32,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Restores Power and sends the corresponding Packet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Energize(System.Int32,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Restores Power and sends the corresponding Packet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.LeechPower(System.Int32,System.Single,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Leeches the given amount of power from this Unit and adds it to the receiver (if receiver != null and is Unit).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.BurnPower(System.Int32,System.Single,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Drains the given amount of power and applies damage for it
            </summary>
            <param name="dmgTyp">The type of the damage applied</param>
            <param name="dmgFactor">The factor to be applied to amount for the damage to be received by this unit</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnMove">
            <summary>
            Is called whenever a Unit moves
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsMoving">
            <summary>
            whether this Unit is currently moving
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Face(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Makes this Unit move their face towards the given object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Face(WCell.Util.Graphics.Vector3)">
            <summary>
            Makes this Unit look at the given location
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Face(System.Single)">
            <summary>
            Makes this Unit move their face towards the given orientation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CanSee(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Checks whether this Unit can currently see the given obj
            
            TODO: Higher staff ranks can always see lower staff ranks (too bad there are no ranks)
            TODO: Line of Sight
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SpokenLanguage">
            <summary>
            The spoken language of this Unit.
            If Character's have a SpokenLanguage, they cannot use any other.
            Default: <c>ChatLanguage.Universal</c>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CancelAllActions">
            <summary>
            Cancels whatever this Unit is currently doing.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Emote(WCell.Constants.Misc.EmoteType)">
            <summary>
            Makes this Unit show an animation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TextEmote(WCell.Constants.Chat.TextEmote,WCell.Util.INamed)">
            <summary>
            Makes this Unit do a text emote
            </summary>
            <param name="emote">Anything that has a name (to do something with) or null</param>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsPinnedDown">
            <summary>
            When pinned down, a Character cannot be 
            logged out, moved or harmed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.TaxiTime">
            <summary>
            Time spent on the current taxi-ride in millis.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_TaxiPaths">
            <summary>
            A list of the TaxiPaths the unit is currently travelling to. The TaxiPath currently being travelled is first.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.TaxiPaths">
            <summary>
            Returns the players currently planned taxi paths.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.LatestTaxiPathNode">
            <summary>
            The point on the currently travelled TaxiPath that the Unit past most recently, or null if not on a taxi.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsOnTaxi">
            <summary>
            Whether or not this unit is currently flying on a taxi.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsInfluenced">
            <summary>
            Whether or not this Unit is currently under the influence of an effect that won't allow it to be controled by itself or its master
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CancelMovement">
            <summary>
            Cancel any enforced movement
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Spells">
            <summary>
            All spells known to this unit.
            Could be null for NPCs that are not spell-casters (check with <see cref="P:WCell.RealmServer.Entities.Unit.HasSpells"/>).
            Use <see cref="P:WCell.RealmServer.Entities.NPC.NPCSpells"/> to enforce a SpellCollection.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.SpawnMinion(WCell.Constants.NPCs.NPCId)">
            <summary>
            Tries to spawn the given pet for this Unit.
            </summary>
            <returns>null, if the Character already has that kind of Pet.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.SpawnMinion(WCell.Constants.NPCs.NPCId,System.Int32)">
            <summary>
            Tries to spawn the given pet for this Unit.
            </summary>
            <returns>null, if the Character already has that kind of Pet.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CreateMinion(WCell.RealmServer.NPCs.NPCEntry,System.Int32)">
            <summary>
            Creates and makes visible the Unit's controlled Minion
            </summary>
            <param name="entry">The template for the Minion</param>
            <param name="position">The place to spawn the minion.</param>
            <param name="duration">Time till the minion goes away.</param>
            <returns>A reference to the minion.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.SpawnMinion(WCell.RealmServer.NPCs.NPCEntry,WCell.Util.Graphics.Vector3@,System.Int32)">
            <summary>
            Creates and makes visible the Unit's controlled Minion
            </summary>
            <param name="entry">The template for the Minion</param>
            <param name="position">The place to spawn the minion.</param>
            <param name="duration">Time till the minion goes away.</param>
            <returns>A reference to the minion.</returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ProcHandlers">
            <summary>
            Can be null if no handlers have been added.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetProcHandler``1">
            <summary>
            Returns the first proc handler of the given type
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveProcHandler(WCell.Constants.Spells.SpellId)">
            <summary>
            Remnoves the first proc that triggers the given spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveProcHandler(WCell.RealmServer.Misc.ProcHandlerTemplate)">
            <summary>
            Removes the first custom ProcHandler that uses the given template.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Proc(WCell.Constants.Spells.ProcTriggerFlags,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.IUnitAction,System.Boolean,WCell.Constants.Spells.ProcHitFlags)">
            <summary>
            Trigger all procs that can be triggered by the given action
            </summary>
            <param name="active">Whether the triggerer is the attacker/caster (true), or the victim (false)</param>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.GossipMenu">
            <summary>
            The GossipMenu, associated with this WorldObject.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnAffinityChanged">
            <summary>
            Is called when Master / Faction has changed and this Unit now has a different circle of friends
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.AttackEventHandlers">
            <summary>
            Applies modifications to your attacks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CombatReach">
            <summary>
            The maximum distance in yards to a valid attackable target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.AddDamageDoneModSilently(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.AddDamageDoneMod(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveDamageDoneModSilently(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveDamageDoneMod(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Modifies the damage for the given school by the given delta.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.AddDamageDoneMod(System.UInt32[],System.Int32)">
            <summary>
            Adds/Removes a flat modifier to all of the given damage schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveDamageDoneMod(System.UInt32[],System.Int32)">
            <summary>
            Adds/Removes a flat modifier to all of the given damage schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModDamageDoneFactor(System.UInt32[],System.Single)">
            <summary>
            Adds/Removes a percent modifier to all of the given damage schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetFinalDamage(WCell.Constants.DamageSchool,System.Int32,WCell.RealmServer.Spells.Spell)">
            <summary>
            Get total damage, after adding/subtracting all modifiers (is not used for DoT)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.UsesRangedWeapon">
            <summary>
            Whether this Unit currently has a ranged weapon equipped
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.UsesDualWield">
            <summary>
            Whether this Character is currently using DualWield (attacking with 2 melee weapons)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MainWeapon">
            <summary>
            The Unit's current mainhand weapon
            Is set by the Unit's ItemInventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.RangedWeapon">
            <summary>
            The Unit's current ranged weapon or other kind of bonus item
            Is set by the Unit's ItemInventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.OffHandWeapon">
            <summary>
            The Unit's current offhand Weapon
            Is set by the Unit's ItemInventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CanMelee">
            <summary>
            Whether this Unit is allowed to melee at all
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MeleePermissionCounter">
            <summary>
            If greater 0, may melee, else not
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.DisarmMask">
            <summary>
            The mask of slots of currently disarmed items.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.SetDisarmed(WCell.Constants.Items.InventorySlotType)">
            <summary>
            Disarms the weapon of the given type (WeaponMainHand, WeaponRanged or WeaponOffHand)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.UnsetDisarmed(WCell.Constants.Items.InventorySlotType)">
            <summary>
            Rearms the weapon of the given type (WeaponMainHand, WeaponRanged or WeaponOffHand)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetOrInvalidateItem(WCell.Constants.Items.InventorySlotType)">
            <summary>
            Finds the item for the given slot. 
            Unequips it and returns null, if it may not currently be used.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MainHandAttackTime">
            <summary>
            Time in millis between 2 Main-hand strikes
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.OffHandAttackTime">
            <summary>
            Time in millis between 2 Off-hand strikes
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.RangedAttackTime">
            <summary>
            Time in millis between 2 ranged strikes
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DealEnvironmentalDamage(WCell.Constants.EnviromentalDamageType,System.Int32)">
            <summary>
            Deals environmental damage to this Unit (cannot be resisted)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DoRawDamage(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Deals damage, cancels damage-sensitive Auras, checks for spell interruption etc
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.OnKilled(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Called after this unit has been killed by damage action
            </summary>
            <param name="action">Action which killed this unit</param>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Target">
            <summary>
            The Unit's currently selected target.
            If set to null, also forces this Unit to leave combat mode.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.NPCAttackerCount">
            <summary>
            As long as this count is up, cannot leave combat
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Transport">
            <summary>
            The <see cref="P:WCell.RealmServer.Entities.Unit.Transport"/> that this Unit is on (if any).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.VehicleSeat">
            <summary>
            Currently occupied VehicleSeat (if riding in vehicle)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Level">
            <summary>
            The Level of this Unit.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PetNameTimestamp">
            <summary>
            Changing this makes clients send a pet name query
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.NextPetLevelExperience">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsSummoned">
            <summary>
            Whether this Unit is summoned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsMinion">
            <summary>
            Whether this Unit belongs to someone
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CreationSpellId">
            <summary>
            The spell that created this Unit
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.TrainingPoints">
            <summary>
            Pet's Training Points, deprecated
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.StaminaWithoutHealthContribution">
            <summary>
            The amount of stamina that does not contribute to health.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetTotalStatValue(WCell.Constants.StatType)">
            <summary>
            Stat value, after modifiers
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveStatMod(WCell.Constants.StatType,System.Int32)">
            <summary>
            Removes the given delta from positive or negative stat buffs correspondingly
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Armor">
            <summary>
            Physical resist
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetResistance(WCell.Constants.DamageSchool)">
            <summary>
            Returns the total resistance-value of the given school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetBaseResistance(WCell.Constants.DamageSchool)">
            <summary>
            Returns the base resistance-value of the given school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModBaseResistance(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Adds the given amount to the base of the given resistance for the given school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModBaseResistance(System.UInt32[],System.Int32)">
            <summary>
            Adds the given amount to the base of all given resistance-schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.RemoveResistanceBuff(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Removes the given delta from positive or negative stat buffs correspondingly
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetStrongestImmolate">
            <summary>
            Helper function for Aurastate related fix and Conflagrate spell.
            see UpdateFieldHandler/Warlockfixes
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.RaceMask">
            <summary>
            Race of the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.RaceMask2">
            <summary>
            RaceMask2 of the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ClassMask">
            <summary>
            Class of the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ClassMask2">
            <summary>
            ClassMask2 of the character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PowerType">
            <summary>
            Make sure the PowerType is valid or it will crash the client
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SheathType">
            <summary>
            Set to 0x01 for Spirit Healers, Totems (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PvPState">
            <summary>
            Flags
            0x1 - In PVP
            0x4 - Free for all PVP
            0x8 - In PVP Sanctuary
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PetState">
            <summary>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.ShapeshiftEntry">
            <summary>
            The entry of the current shapeshift form
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.SetDefaultPowerType">
            <summary>
            Sets this Unit's default PowerType
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.Cleanse">
            <summary>
            Resets health, Power and Auras
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsPlayerControlled">
            <summary>
            Whether this is actively controlled by a player. 
            Not to be confused with IsOwnedByPlayer.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.YieldsXpOrHonor">
            <summary>
            If this is not an Honorless Target
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Health">
            <summary>
            This Unit's current Health. 
            Health cannot exceed MaxHealth.
            If Health reaches 0, the Unit dies.
            If Health is 0 and increases, the Unit gets resurrected.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.BaseHealth">
            <summary>
            Base maximum health, before modifiers.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MaxHealth">
            <summary>
            Total maximum Health of this Unit. 
            In order to change this value, set BaseHealth.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.HealthPct">
            <summary>
            Current amount of health in percent
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PowerPct">
            <summary>
            Current amount of power in percent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.UpdateHealthAuraState">
            <summary>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PowerCostModifier">
            <summary>
            The flat PowerCostModifier for your default Power
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.PowerCostMultiplier">
            <summary>
            The PowerCostMultiplier for your default Power
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.BasePower">
            <summary>
            Base maximum power, before modifiers.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Power">
            <summary>
            The amount of the Unit's default Power (Mana, Energy, Rage, Happiness etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MaxPower">
            <summary>
            The max amount of the Unit's default Power (Mana, Energy, Rage, Happiness etc)
            NOTE: This is not related to Homer Simpson nor to any brand of hair blowers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SafeFall">
            <summary>
            Amount of additional yards to be allowed to jump without having any damage inflicted.
            TODO: Implement correctly (needs client packets)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.CombatRatings">
            <summary>
            All CombatRatings
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.CreateMechanicsArr">
            <summary>
            Creates an array for a set of SpellMechanics
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_dmgImmunities">
            <summary>
            Immunities against damage-schools
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.m_canMove">
            <summary>
            Whether the physical state of this Unit allows it to move
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CanCastSpells">
            <summary>
            Whether the Unit is allowed to cast spells that are not physical abilities
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CanDoPhysicalActivity">
            <summary>
            Whether the Unit is allowed to attack and use physical abilities
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:WCell.RealmServer.Entities.Unit.CanMove" -->
        <member name="P:WCell.RealmServer.Entities.Unit.HasPermissionToMove">
            <summary>
            Whether the owner or controlling AI allows this unit to move.
            Always returns true for uncontrolled players.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsEvading">
            <summary>
            Whether the Unit is currently evading (cannot be hit, generate threat etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CanInteract">
            <summary>
            whether the Unit can be interacted with
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.CanDoHarm">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Stunned">
            <summary>
            Whether this Unit is currently stunned (!= rooted)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Pacified">
            <summary>
            Pacified units cannot attack or use physical abilities
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IsUnderInfluenceOf(WCell.Constants.Spells.SpellMechanic)">
            <summary>
            Return whether the given Mechanic applies to the Unit
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IncMechanicCount(WCell.Constants.Spells.SpellMechanic,System.Boolean)">
            <summary>
            Increase the mechanic modifier count for the given SpellMechanic
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DecMechanicCount(WCell.Constants.Spells.SpellMechanic,System.Boolean)">
            <summary>
            Decrease the mechanic modifier count for the given SpellMechanic
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IsAnySetNoCheck(System.Boolean[])">
            <summary>
            Checks whether any of the mechanics of the given set are influencing the owner
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsInvulnerable">
            <summary>
            Whether the owner is completely invulnerable
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IsImmune(WCell.Constants.Spells.SpellMechanic)">
            <summary>
            Indicates whether the owner is immune against the given SpellMechanic
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IsImmune(WCell.Constants.DamageSchool)">
            <summary>
            Indicates whether the owner is immune against the given DamageSchool
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IncDmgImmunityCount(WCell.Constants.DamageSchool)">
            <summary>
            Adds immunity against given damage-school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IncDmgImmunityCount(System.UInt32[])">
            <summary>
            Adds immunity against given damage-schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IncDmgImmunityCount(WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Adds immunity against given damage-schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DecDmgImmunityCount(WCell.Constants.DamageSchool)">
            <summary>
            Decreases immunity-count against given damage-school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DecDmgImmunityCount(System.UInt32[])">
            <summary>
            Decreases immunity-count against given damage-schools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.IncMechImmunityCount(WCell.Constants.Spells.SpellMechanic,WCell.RealmServer.Spells.Spell)">
            <summary>
            Adds immunity against given SpellMechanic-school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.DecMechImmunityCount(WCell.Constants.Spells.SpellMechanic)">
            <summary>
            Decreases immunity-count against given SpellMechanic-school
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetMechanicResistance(WCell.Constants.Spells.SpellMechanic)">
            <summary>
            Returns the resistance chance for the given SpellMechanic
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModMechanicResistance(WCell.Constants.Spells.SpellMechanic,System.Int32)">
            <summary>
            Changes the amount of resistance against certain SpellMechanics
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetMechanicDurationMod(WCell.Constants.Spells.SpellMechanic)">
            <summary>
            Returns the duration modifier for a certain SpellMechanic
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModMechanicDurationMod(WCell.Constants.Spells.SpellMechanic,System.Int32)">
            <summary>
            Changes the duration-modifier for a certain SpellMechanic in %
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModTargetResistanceMod(System.Int32,System.UInt32[])">
            <summary>
            If modifying a single value, we have a simple bonus that will not be displayed
            to the user (except for physical), if there are more than one, we assume it's a change
            in all-over spell penetration
            </summary>
            <param name="dmgTypes"></param>
            <param name="delta"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModSpellHitChance(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Spell avoidance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModSpellHitChance(System.UInt32[],System.Int32)">
            <summary>
            Spell avoidance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetCritChance(WCell.Constants.DamageSchool)">
            <summary>
            Returns the SpellCritChance for the given DamageType
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetDamageTakenMod(WCell.Constants.DamageSchool)">
            <summary>
            Returns the damage taken modifier for the given DamageSchool
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetDamageTakenPctMod(WCell.Constants.DamageSchool)">
            <summary>
            Returns the damage taken modifier for the given DamageSchool
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModThreat(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Threat mod in percent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModThreat(System.UInt32[],System.Int32)">
            <summary>
            Threat mod in percent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.GetGeneratedThreat(System.Int32,WCell.Constants.DamageSchool,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Threat mod in percent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModAttackerSpellHitChance(WCell.Constants.DamageSchool,System.Int32)">
            <summary>
            Spell avoidance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.ModAttackerSpellHitChance(System.UInt32[],System.Int32)">
            <summary>
            Spell avoidance
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MayTeleport">
            <summary>
            Whether this Character is currently allowed to teleport
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.Util.Graphics.Vector3)">
            <summary>
            Teleports the owner to the given position in the current map.
            </summary>
            <returns>Whether the Zone had a globally unique Site.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.Util.Graphics.Vector3@)">
            <summary>
            Teleports the owner to the given position in the current map.
            </summary>
            <returns>Whether the Zone had a globally unique Site.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.Util.Graphics.Vector3@,System.Nullable{System.Single})">
            <summary>
            Teleports the owner to the given position in the current map.
            </summary>
            <returns>Whether the Zone had a globally unique Site.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.Util.Graphics.Vector3,System.Nullable{System.Single})">
            <summary>
            Teleports the owner to the given position in the current map.
            </summary>
            <returns>Whether the Zone had a globally unique Site.</returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3@)">
            <summary>
            Teleports the owner to the given position in the given map.
            </summary>
            <param name="map">the target <see cref="T:WCell.RealmServer.Global.Map" /></param>
            <param name="pos">the target <see cref="T:WCell.Util.Graphics.Vector3">position</see></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3)">
            <summary>
            Teleports the owner to the given position in the given map.
            </summary>
            <param name="map">the target <see cref="T:WCell.RealmServer.Global.Map" /></param>
            <param name="pos">the target <see cref="T:WCell.Util.Graphics.Vector3">position</see></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3@)">
            <summary>
            Teleports the owner to the given position in the given map.
            </summary>
            <param name="map">the target <see cref="T:WCell.RealmServer.Global.Map" /></param>
            <param name="pos">the target <see cref="T:WCell.Util.Graphics.Vector3">position</see></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3)">
            <summary>
            Teleports the owner to the given position in the given map.
            </summary>
            <param name="map">the target <see cref="T:WCell.RealmServer.Global.Map" /></param>
            <param name="pos">the target <see cref="T:WCell.Util.Graphics.Vector3">position</see></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.RealmServer.Entities.IWorldLocation)">
            <summary>
            Teleports the owner to the given WorldObject.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3,System.Nullable{System.Single})">
            <summary>
            Teleports the owner to the given position in the given map.
            </summary>
            <param name="map">the target <see cref="T:WCell.RealmServer.Global.Map" /></param>
            <param name="pos">the target <see cref="T:WCell.Util.Graphics.Vector3">position</see></param>
            <param name="orientation">the target orientation</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.TeleportTo(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3@,System.Nullable{System.Single})">
            <summary>
            Teleports the owner to the given position in the given map.
            </summary>
            <param name="map">the target <see cref="T:WCell.RealmServer.Global.Map" /></param>
            <param name="pos">the target <see cref="T:WCell.Util.Graphics.Vector3">position</see></param>
            <param name="orientation">the target orientation</param>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Stealthed">
            <summary>
            Count of stealth-modifiers
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.StopMoving">
            <summary>
            Stops this Unit's movement (if it's movement is controlled)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Movement">
            <summary>
            An object to control this Unit's movement. 
            Only used for NPCs and posessed Characters.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IsFlying">
            <summary>
            Whether the Unit is currently flying
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.WaterWalk">
            <summary>
            Whether the character may walk over water
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Flying">
            <summary>
            Whether a character can fly or not
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.Hovering">
            <summary>
            Whether a character can hover
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.FeatherFalling">
            <summary>
            Whether a character would take falling damage or not
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SpeedFactor">
            <summary>
            The overall-factor for all speeds. Set by the owner's ModifierCollection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.FlightSpeedFactor">
            <summary>
            The factor for all flying-related speeds. Set by the owner's ModifierCollection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.MountSpeedMod">
            <summary>
            The factor for mounted speed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SwimSpeedFactor">
            <summary>
            The factor for all swimming-related speeds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.WalkSpeed">
            <summary>
            Forward walking speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.RunBackSpeed">
            <summary>
            Backwards walking speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.RunSpeed">
            <summary>
            Forward running speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SwimSpeed">
            <summary>
            Forward swimming speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.SwimBackSpeed">
            <summary>
            Backwards swimming speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.FlightSpeed">
            <summary>
            Forward flying speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.FlightBackSpeed">
            <summary>
            Backwards flying speed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.TurnSpeed">
            <summary>
            Turning speed.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.ManaPerIntelligence">
            <summary>
            Amount of mana to be added per point of Intelligence
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.HealthPerStamina">
            <summary>
            Amount of heatlh to be added per point of Stamina
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.Unit.ArmorPerAgility">
            <summary>
            Amount of armor to be added per point of Agility
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.Unit.IntellectManaBonus">
            <summary>
            Amount of mana, contributed by intellect
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.WriteMovementPacketInfo(WCell.Core.Network.PrimitiveWriter)">
            <summary>
            Writes the data shared in movement packets and the create block of the update packet
            This is used in
            <list type="String">
            SMSG_UPDATE_OBJECT
            MSG_MOVE_*
            MSG_MOVE_SET_*_SPEED
            </list>
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.Unit.WriteMovementPacketInfo(WCell.Core.Network.PrimitiveWriter,WCell.Util.Graphics.Vector3@,System.Single)">
            <summary>
            Writes the data shared in movement packets and the create block of the update packet
            This is used in
            <list type="String">
            SMSG_UPDATE_OBJECT
            MSG_MOVE_*
            MSG_MOVE_SET_*_SPEED
            </list>
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:WCell.RealmServer.Entities.VisibilityStatus">
            <summary>
            Used to override visibility of objects
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Entities.WorldObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.WorldObject.DefaultPhase">
            <summary>
            Default phase (the one that existed long before phasing was added)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.WorldObject.AllPhases">
            <summary>
            All phases
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.WorldObject.BroadcastRange">
            <summary>
            Default vision range. Characters will only receive packets of what happens within this range (unit: Yards)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.WorldObject.m_Map">
            <summary>
            never null
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Entities.WorldObject.m_messageQueue">
            <summary>
            Messages to be processed during the next Update (which ensures that it will be within the Object's context)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Age">
            <summary>
            Time in seconds since creation
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Phase">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Position">
            <summary>
            The current position of the object
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Zone">
            <summary>
            The current zone of the object
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Map">
            <summary>
            The current map of the object.
            Map must (and will) never be null.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Orientation">
            <summary>
            The heading of the object (direction it is facing)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.CasterLevel">
            <summary>
            TODO: Find correct caster-level for non-units
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsAreaActive">
            <summary>
            Whether there are active Characters in the Area
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.AreaCharCount">
            <summary>
            The amount of Characters nearby.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsUsingSpell">
            <summary>
            whether this Object is currently casting or channeling a Spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.SpellCast">
            <summary>
            Set to the SpellCast-object of this Object.
            If the Object is not in the world, will return null
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.CheckTicks(System.Int32)">
            <summary>
            Can be used to slow down execution of methods that:
            	1. Should not be executed too often
            	2. Don't need to be timed precisely
            For example: AI updates
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.CreateCasterInfo">
            <summary>
            Creates a new CasterInfo object to represent this WorldObject
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.Master">
            <summary>
            The Master of this Object (Units are their own Masters if not controlled, Objects might have masters that they belong to)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.CharacterMaster">
            <summary>
            Either this or the master as Character. 
            Returns null if neither is Character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.UnitMaster">
            <summary>
            Either this or the master as Unit. 
            Returns null if neither is Unit.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.TerrainHeight">
            <summary>
            The Terrain underneath this object's current location
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsInRadius(WCell.Util.Graphics.Vector3@,System.Single)">
            <summary>
            Indicates whether the given radius is within the given distance to this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsInRadius(WCell.Util.Graphics.Vector3,System.Single)">
            <summary>
            Indicates whether the given radius is within the given distance to this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsInUpdateRange(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Indicates whether the given obj is in update range
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsInRadiusSq(WCell.Util.Graphics.Vector3@,System.Single)">
            <summary>
            Indicates whether the given radius is within the given distance to this object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetDistanceSqInt(WCell.Util.Graphics.Vector3@)">
            <summary>
            Less precise method to get the square distance to a point
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.PlaceOnTop(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Adds the given object ontop of this one.
            The object will not be added immediately after the method-call.
            </summary>
            <remarks>This object must be in the world for this method call.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetAngleTowards(WCell.Util.Graphics.Vector3)">
            <summary>
            Gets the angle between this object and the given position, in relation to the north-south axis
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetAngleTowards(WCell.Util.Graphics.Vector3@)">
            <summary>
            Gets the angle between this object and the given position, in relation to the north-south axis
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetAngleTowards(WCell.Core.Paths.IHasPosition)">
            <summary>
            Gets the angle between this object and the given position, in relation to the north-south axis
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsBehind(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Returns whether this Object is behind the given obj
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsInFrontOf(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Returns whether this Object is in front of the given obj
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsInFrontOfThis(WCell.Util.Graphics.Vector3)">
            <summary>
            Returns whether the given pos is in front of this Object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetPointXY(System.Single,System.Single,WCell.Util.Graphics.Vector3@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetPointInFront(System.Single,WCell.Util.Graphics.Vector3@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetPointBehind(System.Single,WCell.Util.Graphics.Vector3@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.SendPacketToArea(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends a packet to all nearby characters.
            </summary>
            <param name="packet">the packet to send</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.SendPacketToArea(WCell.RealmServer.RealmPacketOut,System.Single,System.Boolean)">
            <summary>
            Sends a packet to all nearby characters.
            </summary>
            <param name="packet">the packet to send</param>
            <param name="radius">the radius of the area to send to</param>
            <param name="includeSelf">whether or not to send the packet to ourselves (if we're a character)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.SendPacketToArea(WCell.RealmServer.RealmPacketOut,System.Boolean)">
            <summary>
            Sends a packet to all nearby characters.
            </summary>
            <param name="packet">the packet to send</param>
            <param name="includeSelf">whether or not to send the packet to ourselves (if we're a character)</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.SendFieldUpdateToArea(WCell.Constants.Updates.UpdateFieldId,System.UInt32)">
            <summary>
            Sends a manual update field change to all nearby characters.
            </summary>
            <param name="field">the field to update</param>
            <param name="value">the value to update it to</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.SendFieldUpdateToArea(WCell.Constants.Updates.UpdateFieldId)">
            <summary>
            Sends a manual update field refresh to all nearby characters.
            </summary>
            <param name="field">the field to refresh</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.SendFieldUpdateTo(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.Updates.UpdateFieldId)">
            <summary>
            Sends a manual update field refresh to all nearby characters.
            </summary>
            <param name="field">the field to refresh</param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.ExecuteInContext(System.Action)">
            <summary>
            Ensures that the given action is always executed in map context of this Character - which
            might be right now or after the Character is added to a map or during the next Map update.
            </summary>
            <returns>Whether the Action has been executed immediately (or enqueued)</returns>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.CanDoHarm">
            <summary>
            Checks whether this Unit can currently do any harm (must be alive and not in a sanctuary)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.CanBeHarmed">
            <summary>
            Checks whether this Object can currently be harmed (must be alive and not in sanctuary)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsInSanctuary">
            <summary>
            whether this Unit is in a no-combat zone
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsFriendlyWith(WCell.RealmServer.Factions.IFactionMember)">
            <summary>
            Indicates whether the 2 units are friendly towards each other.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsAtLeastNeutralWith(WCell.RealmServer.Factions.IFactionMember)">
            <summary>
            Indicates whether the 2 units are neutral towards each other.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.IsHostileWith(WCell.RealmServer.Factions.IFactionMember)">
            <summary>
            Indicates whether the 2 units are hostile towards each other.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.CanHarm(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Indicates whether we can currently do any harm and are allowed to attack
            the given opponent (hostile or neutral factions, duel partners etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.AreaAuras">
            <summary>
            The set of currently active AreaAuras or null.
            Do not modify the list.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.AddAreaAura(WCell.RealmServer.Spells.Auras.AreaAura)">
            <summary>
            Called when AreaAura is created
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.GetAreaAura(WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns the first AreaAura of the given spell
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WCell.RealmServer.Entities.WorldObject.CancelAreaAura(WCell.RealmServer.Spells.Spell)" -->
        <member name="M:WCell.RealmServer.Entities.WorldObject.CancelAreaAura(WCell.RealmServer.Spells.Auras.AreaAura)">
            <summary>
            Called by AreaAura.Remove
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.CanSee(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Indicates whether this Object can see the other object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.DetermineVisibilityFor(WCell.RealmServer.Entities.Unit)">
            <summary>
            Visibility of this object in the eyes of the given observer.
            Can be used to override default visibility checks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsPlayerOwned">
            <summary>
            Whether this or it's master is a player
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.HasPlayerMaster">
            <summary>
            Whether this object's master is a player
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsPlayerControlled">
            <summary>
            Whether this is actively controlled by a player. 
            Not to be confused with IsOwnedByPlayer.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.Highlight">
            <summary>
            Grow a bit and then become small again
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.PlayTextAndSoundByEnglishPrefix(System.String)">
            <summary>
            TODO: Find a better way to identify texts (i.e. by entry/object-type ids and sequence number)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.PlayTextAndSoundById(System.Int32)">
            <summary>
            Play a text and sound identify by the id
            </summary>
            <param name="id">Id of the text in creature_ai_texts</param>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsDeleted">
            <summary>
            Deleted objects must never be used again!
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.RemoveFromMap">
            <summary>
            Enqueues a message to remove this WorldObject from it's Map
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.Delete">
            <summary>
            Enqueues a message to remove this Object from the World and dispose it.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.DeleteNow">
            <summary>
            Removes this Object from the World and disposes it.
            </summary>
            <see cref="M:WCell.RealmServer.Entities.WorldObject.Delete"/>
            <remarks>Requires map context</remarks>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.MessageQueue">
            <summary>
            The queue of messages. Messages are executed on every map tick.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.CallPeriodically(System.Int32,System.Action{WCell.RealmServer.Entities.WorldObject})">
            <summary>
            Adds a new Action to the list of Actions to be executed every millis.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.CallPeriodicallyUntil(System.Int32,System.Int32,System.Action{WCell.RealmServer.Entities.WorldObject})">
            <summary>
            Adds a new Action to the list of Actions to be executed every millis.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.AddUpdateAction(WCell.RealmServer.Entities.ObjectUpdateTimer)">
            <summary>
            Adds a new Action to the list of Actions to be executed every action.Delay milliseconds
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.RemoveUpdateAction(WCell.RealmServer.Entities.ObjectUpdateTimer)">
            <summary>
            Removes the given Action
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:WCell.RealmServer.Entities.WorldObject.Update(System.Int32)">
            <summary>
            Make sure to call this before updating anything else (required for reseting UpdateInfo)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.ContextHandler">
            <summary>
            The current <see cref="T:WCell.Util.Threading.IContextHandler"/> of this Character.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Entities.WorldObject.IsInContext">
            <summary>
            Whether this object is in the world and within the current
            execution context.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.RealmAccount">
            <summary>
            Represents the Account that a client used to login with on RealmServer side.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.RealmAccount.LoggedIn">
            <summary>
            Is called when the Account logs in
            </summary>
        </member>
        <member name="E:WCell.RealmServer.RealmAccount.LoggedOut">
            <summary>
            Is called when the Account logs out
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.#ctor(System.String,WCell.Intercommunication.DataTypes.IAccountInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="accountName">the name of the account</param>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.IsEnqueued">
            <summary>
            Still in Auth-Queue and waiting for a free slot
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.Name">
            <summary>
            The username of this account.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.AccountId">
            <summary>
            The database row ID for this account.
            Don't change it.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.EmailAddress">
            <summary>
            The e-mail address of this account.
            </summary>
            <remarks>Use <c>SetEmail</c> instead to change the EmailAddress.</remarks>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.ClientId">
            <summary>
            Setting this would not be saved to DB.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.LastIP">
            <summary>
            The last IP-Address that this Account connected with
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.LastLogin">
            <summary>
            The time of when this Account last logged in.
            Might be null.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.RoleGroupName">
            <summary>
            The name of the RoleGroup.
            </summary>
            <remarks>
            Implements <see cref="P:WCell.Intercommunication.DataTypes.IAccountInfo.RoleGroupName"/>.
            Use <c>SetRole</c> to change the Role.
            </remarks>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.Role">
            <summary>
            The RoleGroup of this Account.
            </summary>
            <remarks>Use <c>SetRole</c> to change the Role.</remarks>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.Characters">
            <summary>
            All the character associated with this account.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.ActiveCharacter">
            <summary>
            The Character that is currently being used by this Account (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.Client">
            <summary>
            The client that is connected to this Account.
            If connected, the client is either still selecting a Character,
            seeing the Login-screen or already ingame (in which case ActiveCharacter is also set).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmAccount.AccountData">
            <summary>
            The account data cache, related to this account.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.SetRole(WCell.RealmServer.Privileges.RoleGroup)">
            <summary>
            Tells the AuthServer to change the role for this Account.
            </summary>
            <param name="role">the new role for this account</param>
            <returns>true if the role was set; false otherwise</returns>
            <remarks>Requires IO-Context</remarks>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.SetEmail(System.String)">
            <summary>
            Sets the e-mail address for this account and persists it to the DB.
            Blocking call. Make sure to call this from outside the Map-Thread.
            </summary>
            <param name="email">the new e-mail address for this account</param>
            <returns>true if the e-mail address was set; false otherwise</returns>
            <remarks>Requires IO-Context</remarks>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.SetPass(System.String,System.String)">
            <summary>
            Sets the password for this account and sends it to the Authserver to be saved.
            Blocking call. Make sure to call this from outside the Map-Thread.
            </summary>
            <returns>true if the e-mail address was set; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.LoadCharacters">
            <summary>
            Reloads all characters belonging to this account from the database.
            Blocking call. Make sure to call this from outside the Map-Thread.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.LoadAccountData">
            <summary>
            Loads account based data, creates base data if no data is found.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.InitializeAccount(WCell.RealmServer.Network.IRealmClient,System.String)">
            <summary>
            Called from within the IO-Context
            </summary>
            <param name="client"></param>
            <param name="accountName"></param>
        </member>
        <member name="M:WCell.RealmServer.RealmAccount.ValidateAuthentication(WCell.RealmServer.Network.IRealmClient,System.String)">
            <summary>
            Validates the auth-info sent by the client.
            Called within the IO-Queue's Context
            </summary>
            <returns>The session key or null if authentication failed</returns>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.GOEntry">
            <summary>
            Should not be changed, once a GameObject of a certain Entry has been added to the World
            </summary>
        </member>
        <member name="E:WCell.RealmServer.GameObjects.GOEntry.Used">
            <summary>
            Is called whenever an instance of this entry is used by the given user
            </summary>
        </member>
        <member name="E:WCell.RealmServer.GameObjects.GOEntry.Activated">
            <summary>
            Is called whenever a new GameObject of this entry is added to the world 
            (usually only happens once, when the GO is created)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.SpawnEntries">
            <summary>
            All Templates that use this GOEntry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.IsConsumable">
            <summary>
            Whether this GO vanishes after using
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.AllowMounted">
            <summary>
            Whether one may be mounted when using GOs of this Entry.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.LosOk">
            <summary>
            Whether one needs LoS to use this GO
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.UseGroupLoot">
            <summary>
            Whether this GO's loot can be taken by the whole Group.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.LinkedTrapId">
            <summary>
            The Id of a GOTrapEntry that is associated with this chest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.LinkedTrap">
            <summary>
            The Trap that is linked to this Object (if any)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntry.Lock">
            <summary>
            The lock of this GO (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntry.QuestId">
            <summary>
            Some GOs have a QuestId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntry.PageId">
            <summary>
            Some GOs have a PageId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntry.IsPartyOnly">
            <summary>
            Whether only users of the same Party as the owner
            may use this
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.InitGO(WCell.RealmServer.Entities.GameObject)">
            <summary>
            Is called when the given new GameObject has been created.
            </summary>
            <param name="go"></param>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.Spawn(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3)">
            <summary>
            Spawns and returns a new GameObject from this template into the given map
            </summary>
            <param name="owner">Can be null, if the GO is not owned by anyone</param>
            <returns>The newly spawned GameObject or null, if the Template has no Entry associated with it.</returns>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.Spawn(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3,WCell.RealmServer.Entities.Unit)">
            <summary>
            Spawns and returns a new GameObject from this template into the given map
            </summary>
            <param name="owner">Can be null, if the GO is not owned by anyone</param>
            <returns>The newly spawned GameObject or null, if the Template has no Entry associated with it.</returns>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.Spawn(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3,WCell.RealmServer.Entities.Unit)">
            <summary>
            Spawns and returns a new GameObject from this template into the given map
            </summary>
            <param name="owner">Can be null, if the GO is not owned by anyone</param>
            <returns>The newly spawned GameObject or null, if the Template has no Entry associated with it.</returns>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.GetClosestTemplate(WCell.RealmServer.Entities.IWorldLocation)">
            <summary>
            Returns the GOTemplate of this entry that is closest to the given location
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.GetClosestTemplate(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3)">
            <summary>
            Returns the GOTemplate of this entry that is closest to the given location
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOEntry.GetClosestTemplate(WCell.RealmServer.Global.Map,WCell.Util.Graphics.Vector3)">
            <summary>
            Returns the GOTemplate of this entry that is closest to the given location
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GameObjectHandler.m_user">
            <summary>
            The unit who is currently using the GO
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GameObjectHandler.CanBeUsedBy(WCell.RealmServer.Entities.Character)">
            <summary>
            Whether this GO can be used by the given user
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GameObjectHandler.TryUse(WCell.RealmServer.Entities.Character)">
            <summary>
            Tries to use this Object and returns whether the user succeeded using it.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GameObjectHandler.Use(WCell.RealmServer.Entities.Character)">
            <summary>
            Makes the given Unit use this GameObject
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GameObjectHandler.OnRemove">
            <summary>
            Called when the GameObject is being destroyed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GameObjectHandler.Dispose">
            <summary>
            GO is being removed -> Clean up everthing that needs cleanup
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.LockId">
            <summary>
            LockId from Lock.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.Radius">
            <summary>
            The radius within which the damage is applied (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.MinDamage">
            <summary>
            The minimum damage done.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.MaxDamage">
            <summary>
            The maximum damage done.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.DamageSchool">
            <summary>
            The type of damage done.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.AutoClose">
            <summary>
            The duration of the damaging effect (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.OpenTextId">
            <summary>
            The Id of a text object to be displayed when the AreaDamage starts. (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAreaDamageEntry.CloseTextId">
            <summary>
            The Id of a text object to be displayed when the AreaDamage ends. (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuctionHouseEntry.AuctionHouseId">
            <summary>
            The AuctionHouseId from AuctionHouse.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.StartOpen">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.Radius">
            <summary>
            Area of effect (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.AuraId1">
            <summary>
            SpellId from Spells.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.ConditionId1">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.AuraId2">
            <summary>
            SpellId from Spells.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.ConditionId2">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOAuraGeneratorEntry.ServerOnly">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOBarberChairEntry.ChairHeight">
            <summary>
            MapId from Maps.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOBarberChairEntry.HeightOffset">
            <summary>
            In inches
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOBarberChairEntry.SitState">
            <summary>
            The StandState when sitting in this barber chair
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.StartOpen">
            <summary>
            Possibly whether or not this button is pressed?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.LockId">
            <summary>
            LockId from Lock.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.AutoClose">
            <summary>
            Possibly the time delay before the door auto-closes?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.NoDamageImmune">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.Large">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.OpenTextId">
            <summary>
            A reference to an object holding the Text to display upon pressing the button?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOButtonEntry.CloseTextId">
            <summary>
            A reference to an object holding the Text to display upon unpressing the button?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCameraEntry.LockId">
            <summary>
            LockId from Lock.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCameraEntry.CinematicCameraId">
            <summary>
            CinematicCameraId from CinematicCamera.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCameraEntry.EventId">
            <summary>
            The Id of an Event associated with this camera (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCameraEntry.OpenTextId">
            <summary>
            The Id of a text object associated with this camera (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.Radius">
            <summary>
            The activation radius (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.SpellId">
            <summary>
            Unknown, possibly a server-side dummy spell-effect. Not a SpellId from Spells.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.WorldState1">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.WorldState2">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.WinEventId1">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.WinEventId2">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.ContestedEventId1">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.ContestedEventId2">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.ProgressEventId1">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.ProgressEventId2">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.NeutralEventId1">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.NeutralEventId2">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.NeutralPercent">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.WorldState3">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.MinSuperiority">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.MaxSuperiority">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.MinTime">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.MaxTime">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.Large">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCapturePointEntry.Highlight">
            <summary>
            ??? Is this a bool?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChairEntry.MaxCount">
            <summary>
            The maximum amount of Units that can sitting on the chair at the same time.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChairEntry.Height">
            <summary>
            The height of the chair
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChairEntry.SitState">
            <summary>
            The StandState when sitting in this chair
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChairEntry.PrivateChair">
            <summary>
            True if only the creator of the chair can sit in it.
            "onlyCreatorUse" in the fields
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.LootId">
            <summary>
            The Id of the Loot that can be looted from this Chest
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.MinRestock">
            <summary>
            Minimum number of consecutive times this object can be opened.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.MaxRestock">
            <summary>
            Maximum number of consecutive times this object can be opened.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.ChestRestockTime">
            <summary>
            The time it takes until the chest restocks its loot.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.LootedEventId">
             <summary>
            The event-id of a Quest to be triggered upon looting this kind of GO
             </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.QuestId">
            <summary>
            The Id of the quest required to be active
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.MinLevel">
            <summary>
            The minimum level a character can be in order to open this chest.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.LeaveLoot">
            <summary>
            Possibly, don't trigger a restock event unless the chest is looted completely (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.NotInCombat">
            <summary>
            Possibly, whether this chest can be looted during combat (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.LogLoot">
            <summary>
            Possibly whether or not to log the looting of this chest (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOChestEntry.OpenTextId">
            <summary>
            The Id of a text object to display upon opening this chest.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.GOEntries.GOCustomAuraEntry">
            <summary>
            Can be used to create custom GameObjects that will apply the given
            Spell to everyone in Radius.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.GOEntries.GOCustomAreaEffectEntry">
            <summary>
            Can be used to create custom GameObjects that will apply the given
            Spell to everyone in Radius.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOCustomAreaEffectEntry.AreaEffectHandler">
            <summary>
            The EffectHandler that will be applied to every Unit that comes into the Radius.
            When moving, removing or adding anything in this Method, enqueue a Message!
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODestructibleBuildingEntry.IntactNumHits">
            <summary>
            Intact: Num hits
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODestructibleBuildingEntry.DamagedNumHits">
            <summary>
            Damaged: Num hits
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODestructibleBuildingEntry.RebuildingTime">
            <summary>
            Rebuilding: Time (in seconds)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODestructibleBuildingEntry.RebuildingEvent">
            <summary>
            Rebuilding: Event
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODoorEntry.LockId">
            <summary>
            LockId from Lock.dbc
            "open" in the fields list
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODoorEntry.AutoClose">
            <summary>
            Possibly the time delay before the door closes?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODoorEntry.OpenTextId">
            <summary>
            A reference to an object holding the Text to display upon opening the door?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODoorEntry.CloseTextId">
            <summary>
            A reference to an object holding the Text to display upon closing the door?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODungeonDifficultyEntry.MapId">
            <summary>
            MapId from Maps.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GODungeonDifficultyEntry.Difficulty">
            <summary>
            Whether or not the dungeon is Heroic (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFishingHoleEntry.Radius">
            <summary>
            The activation radius (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFishingHoleEntry.LootId">
            <summary>
            Id of an object that stores the object's loot.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFishingHoleEntry.MinRestock">
            <summary>
            Minimum number of consecutive times this object can be "fished".
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFishingHoleEntry.MaxRestock">
            <summary>
            Maximum number of consecutive times this object can be "fished".
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagDropEntry.EventId">
            <summary>
            Id for an Event that is triggered upon activating this object (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagDropEntry.PickupSpellId">
            <summary>
            SpellId from Spells.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagDropEntry.NoDamageImmune">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagDropEntry.OpenTextId">
            <summary>
            Id for a text object that is displayed when activating this object (?)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntries.GOFlagEntry.Side">
            <summary>
            Represents the side owning this entry.
            Default value: Horde
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagEntry.LockId">
            <summary>
            LockId from Lock.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagStandEntry.PickupSpellId">
            <summary>
            SpellId from Spell.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagStandEntry.Radius">
            <summary>
            Activation radius (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagStandEntry.ReturnAuraId">
            <summary>
            SpellId from Spells.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagStandEntry.ReturnSpellId">
            <summary>
            SpellId from Spells.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOFlagStandEntry.OpenTextId">
            <summary>
            Id of a text object that is shown when the object is activated (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGenericEntry.ShowFloatingTooltip">
            <summary>
            Show the floating tooltip for this object (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGenericEntry.Highlight">
            <summary>
            Whether or nor to show a highlight around this object (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGenericEntry.ServerOnly">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGenericEntry.Large">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGenericEntry.FloatOnWater">
            <summary>
            Whether or not this object floats on water (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGenericEntry.QuestId">
            <summary>
            The Id of the quest required to be active
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.LockId">
            <summary>
            The LockId from Lock.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.QuestId">
            <summary>
            The Id of the quest required to be active in order to interact with this goober.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.EventId">
            <summary>
            The Id of an Event associated with this goober (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.AutoClose">
            <summary>
            The time delay before this goober auto-closes after being opened. (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.CustomAnim">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.Cooldown">
            <summary>
            Time between allowed interactions with this goober (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.PageId">
            <summary>
            The Id of a PageText object associated with this goober.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.LanguageId">
            <summary>
            The LanguageId from Languages.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.PageTextMaterialId">
            <summary>
            The PageTextMaterialId from PageTextMaterial.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.SpellId">
            <summary>
            The SpellId associated with this goober.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.Spell">
            <summary>
            The Spell associated with this goober.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.NoDamageImmune">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.Large">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.OpenTextId">
            <summary>
            The Id of a text object to be displayed when opening this goober (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGooberEntry.CloseTextId">
            <summary>
            The Id of a text object to be displayed when closing this goober (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGuardPostEntry.CreatureId">
            <summary>
            The Id of the creature associated with this guard post.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOGuardPostEntry.Charges">
            <summary>
            The number of creatures with Id = CreatureId in this guard post.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMeetingStoneEntry.MinLevel">
            <summary>
            The minimum level a character must be to activate this object.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMeetingStoneEntry.MaxLevel">
            <summary>
            The maximum level a character can be to activate this object.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMeetingStoneEntry.ZoneId">
            <summary>
            The Id of the Zone to teleport to
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMiniGameEntry.GameType">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.TaxiPathId">
            <summary>
            The TaxiPathId from TaxiPaths.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.MoveSpeed">
            <summary>
            The speed this object moves at.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.AccelRate">
            <summary>
            The rate this object accelerates at.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.StartEventId">
            <summary>
            The Id of an Event to call when this object is activated (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.StopEventId">
            <summary>
            The Id of an Event to call when this object is deactivated (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.TransportPhysics">
            <summary>
            Ref to TransportPhysics.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOMOTransportEntry.MapId">
            <summary>
            The Id of a Map this object is associated with (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.LockId">
            <summary>
            LockId from Lock.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.QuestListId">
            <summary>
            Id of quest-list
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.PageTextMaterialId">
            <summary>
            PageId from PageTextMaterial.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.GossipId">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.CustomAnim">
            <summary>
            Constrained to values 1-4
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.NoDamageImmune">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.OpenTextId">
            <summary>
            Reference to Text object containing the text to display upon interacting with this GO (?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOQuestGiverEntry.Large">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellCasterEntry.SpellId">
            <summary>
            The SpellId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellCasterEntry.Charges">
            <summary>
            The number of times this can cast the Spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellCasterEntry.IsPartyOnly">
            <summary>
            Whether you must be in the same group as the caster to recieve the Spell effect.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellFocusEntry.SpellFocus">
            <summary>
            The type of SpellFocus this is.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellFocusEntry.Radius">
            <summary>
            Caster must be within this distance of the object in order to cast the associated spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellFocusEntry.ServerOnly">
            <summary>
            TOOD: find out what this means and possibly change its type to bool or enum or whatever.
             </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSpellFocusEntry.QuestId">
            <summary>
            The Id of the quest required to be active
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.CasterCount">
            <summary>
            Amount of casters?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.SpellId">
            <summary>
            SpellId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.AnimSpellId">
            <summary>
            SpellId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.RitualPersistent">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.CasterTargetSpellId">
            <summary>
            SpellId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.CasterTargetSpellTargets">
            <summary>
            ??? Not sure if this is actually a bool
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOSummoningRitualEntry.CastersGrouped">
            <summary>
            Whether or not the Casters of this SummoningRitual are in the same Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTextEntry.PageId">
            <summary>
            The Id of a PageText object that is associated with this object.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTextEntry.Language">
            <summary>
            The LanguageId from Languages.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOEntries.GOTextEntry.PageTextMaterialId">
            <summary>
            The PageTextMaterialId from PageTextMaterial.dbc
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTransportEntry.WhenToPause">
            <summary>
            (ms)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTransportEntry.StartOpen">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTransportEntry.AutoClose">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTrapEntry.Radius">
            <summary>
            The explosion radius of this Trap in yards (Assume default if 0)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTrapEntry.MaxCharges">
            <summary>
            Probably maximum charges (trap disappears after all charges have been used)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTrapEntry.StartDelay">
            <summary>
            Trigger-delay in seconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.GOTrapEntry.Stealthed">
            <summary>
            Whether this trap is stealthed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.IGOLootableEntry.LootId">
            <summary>
            The Id of the Loot that can be looted from this Chest
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.IGOLootableEntry.MinRestock">
            <summary>
            Minimum number of consecutive times this object can be opened.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOEntries.IGOLootableEntry.MaxRestock">
            <summary>
            Maximum number of consecutive times this object can be opened.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.GOMgr">
            <summary>
            General GameObject -utility and -container class
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOMgr.DefaultInteractDistanceSq">
            <summary>
            Usually a Unit must be at least this close (in yards) to a GO in order to be allowed to interact with it
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOMgr.SpawnPoolTemplates">
            <summary>
            All templates for spawn pools
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOMgr.Loaded">
            <summary>
            Loaded flag
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOMgr.Handlers">
            <summary>
            Contains a set of <see cref="T:WCell.RealmServer.GameObjects.GameObjectHandler"/>, indexed by <see cref="T:WCell.Constants.GameObjects.GameObjectType"/>. 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.GOMgr.GOEntryCreators">
            <summary>
            Contains a set of GOEntry-creators, indexed by <see cref="T:WCell.Constants.GameObjects.GameObjectType"/>. 
            Override these to create custom GOs.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.GOPortalEntry">
            <summary>
            Walk-in portal
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.GOSelectMgr">
            <summary>
            The Selection Manager keeps track of all GOs that have been selected by Staff members
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOSelectMgr.SelectClosest(WCell.RealmServer.Entities.Character)">
            <summary>
            Tries to select the nearest GO that is in front of the character
            </summary>
            <returns>The newly selected GO.</returns>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.GOSelectMgr.Item(WCell.RealmServer.Entities.Character)">
            <summary>
            Sets the Character's selected GameObject
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.GOSelectMgr.Deselect(WCell.RealmServer.Misc.ExtraInfo)">
            <summary>
            Deselects the given Character's current GO
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.ChestHandler">
            <summary>
            GO Type 3
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.GossipGOHandler">
            <summary>
            If you want to attach a custom GossipMenu to a GO, simply use GameObject.GossipMenu and/or GOEntry.GossipMenu
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.MailboxHandler">
            <summary>
            GO Type 19
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.DoorHandler">
            <summary>
            GO Type 0: A door.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.ButtonHandler">
            <summary>
            GO Type 1: Use a Button to trigger something
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.QuestGiverHandler">
            <summary>
            GO Type 2: An object that can start or end a quest.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.BinderHandler">
            <summary>
            GO Type 4
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.GenericHandler">
            <summary>
            GO Type 5
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.ChairHandler">
            <summary>
            GOType 7
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.Handlers.ChairHandler.UserAmount">
            <summary>
            The amount of people currently using this GO
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.SpellFocusHandler">
            <summary>
            Type 8
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.TextHandler">
            <summary>
            GO Type 9
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.GooberHandler">
            <summary>
            GO Type 10
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.TransportHandler">
            <summary>
            GO Type 11
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.AreaDamageHandler">
            <summary>
            GO Type 12
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.CameraHandler">
            <summary>
            GO Type 13
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.MapObjectHandler">
            <summary>
            GO Type 14
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.MOTransportHandler">
            <summary>
            GO Type 15
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.DuelFlagHandler">
            <summary>
            GO Type 16
            </summary>
        </member>
        <member name="F:WCell.RealmServer.GameObjects.Handlers.DuelFlagHandler.Duel">
            <summary>
            The Duel that is currently being fought
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.FishingNodeHandler">
            <summary>
            GO Type 17
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.SummoningRitualHandler">
            <summary>
            GO Type 18
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.AuctionHouseHandler">
            <summary>
            GO Type 20
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.GuardPostHandler">
            <summary>
            GO Type 21
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.SpellCasterHandler">
            <summary>
            GO Type 22
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.MeetingStoneHandler">
            <summary>
            GO Type 23
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.FlagStandHandler">
            <summary>
            GO Type 24: Used for CTF
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.FishingHoleHandler">
            <summary>
            GO Type 25
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.FlagDropHandler">
            <summary>
            GO Type 26
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.MiniGameHandler">
            <summary>
            GO Type 27
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.LotteryKioskHandler">
            <summary>
            GO Type 28
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.CapturePointHandler">
            <summary>
            GO Type 29
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.AuraGeneratorHandler">
            <summary>
            GO Type 30
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Handlers.DungeonDifficultyHandler">
            <summary>
            GO Type 31: Instance Portals (apparently)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.TrapHandler">
            <summary>
            GO Type 6
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.Portal.TargetZoneId">
            <summary>
            Can be used to set the <see cref="P:WCell.RealmServer.GameObjects.Portal.Target"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.Portal.TargetZone">
            <summary>
            Can be used to set the <see cref="P:WCell.RealmServer.GameObjects.Portal.Target"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.GameObjects.Portal.Target">
            <summary>
            The target to which everyone should be teleported.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry">
            <summary>
            Spawn-information for GameObjects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry.Spawn(WCell.RealmServer.Global.Map)">
            <summary>
            Spawns and returns a new GameObject from this template into the given map
            </summary>
            <returns>The newly spawned GameObject or null, if the Template has no Entry associated with it.</returns>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry.Spawn(WCell.RealmServer.Entities.IWorldLocation)">
            <summary>
            Spawns and returns a new GameObject from this template at the given location
            </summary>
            <returns>The newly spawned GameObject or null, if the Template has no Entry associated with it.</returns>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry.FinalizeDataHolder">
            <summary>
            Finalize this GOSpawnEntry
            </summary>
            <param name="addToPool">If set to false, will not try to add it to any pool (recommended for custom GOSpawnEntry that share a pool)</param>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry.FinalizeDataHolder(System.Boolean)">
            <summary>
            Finalize this GOSpawnEntry
            </summary>
            <param name="addToPool">If set to false, will not try to add it to any pool (recommended for custom GOSpawnEntry that share a pool)</param>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry.GetAllDataHolders">
            <summary>
            Do not remove: Used internally for caching
            </summary>
        </member>
        <member name="T:WCell.RealmServer.GameObjects.Spawns.GOSpawnPoint">
            <summary>
            Represents a SpawnPoint that continuesly spawns GOs.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnPoolTemplate.#ctor(System.Int32)">
            <summary>
            Constructor for custom pools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.GameObjects.Spawns.GOSpawnPoolTemplate.#ctor(WCell.RealmServer.GameObjects.Spawns.GOSpawnEntry,System.Int32)">
            <summary>
            Constructor for custom pools
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Items.ItemTemplate.Created">
            <summary>
            Called when an ItemRecord of this ItemTemplate has been created (if newly created or loaded from DB).
            That is before the actual Item object has been created.
            Called from the IO context if loaded from DB.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Items.ItemTemplate.Equipped">
            <summary>
            Called whenever an Item of this ItemTemplate is equipped
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Items.ItemTemplate.Unequipped">
            <summary>
            Called whenever an Item of this ItemTemplate is unequipped
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Items.ItemTemplate.Used">
            <summary>
            Called whenever an item of this ItemTemplate has been used
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemTemplate.MaxAmount">
            <summary>
            The size of a stack of this item.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemTemplate.QuestId">
            <summary>
            The Id of the Quest that will be started when this Item is used
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemTemplate.SocketBonusEnchantId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemTemplate.BuyStackSize">
            <summary>
            Amount of Items to be sold in one stack
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemTemplate.MayAddToContainer(WCell.RealmServer.Items.ItemTemplate)">
            <summary>
            For templates of Containers only, checks whether the given
            Template may be added
            </summary>
            <param name="templ"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemTemplate.FinalizeDataHolder">
            <summary>
            Set custom fields etc
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemTemplate.AddMod(WCell.Constants.Items.ItemModType,System.Int32)">
            <summary>
            Adds a new modifier to this Template
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemTemplate.CheckLootConstraints(WCell.RealmServer.Entities.Character)">
            <summary>
            Returns false if the looter may not take one of these items.
            E.g. due to quest requirements, if this is a quest item and the looter does not need it (yet, or anymore).
            </summary>
            <param name="looter">Can be null</param>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemTemplate.CheckEquip(WCell.RealmServer.Entities.Character)">
            <summary>
            Returns what went wrong (if anything) when the given unit tries to equip or use Items of this Template.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.ItemTemplate.QuestHolderInfo">
            <summary>
            Contains the quests that this item can start (items usually can only start one)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.BaseInventory.m_container">
            <summary>
            The srcCont or Player that this inventory belongs to.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.#ctor(WCell.RealmServer.Items.IContainer,WCell.Constants.Updates.UpdateFieldId,WCell.RealmServer.Entities.Item[])">
            <summary>
            Inventory for shared item-array
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.Owner">
            <summary>
            The owning player of this inventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.Container">
            <summary>
            The containing ObjectBase (either Container or Character)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.Slot">
            <summary>
            The slot of where this Container is located
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.Items">
            <summary>
            The underlying arrays of items of this inventory (don't modify from outside)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.Item(System.Int32)">
            <summary>
            Sets or Gets the Item at the given slot (make sure that slot is valid and unoccupied).
            </summary>
            <remarks>Cannot set to null - Use <see cref="M:WCell.RealmServer.Items.BaseInventory.Remove(System.Int32,System.Boolean)"/> instead.</remarks>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.Count">
            <summary>
            The amount of items, currently in this inventory.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.MaxCount">
            <summary>
            The maximum amount of items, supported by this inventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.IsEmpty">
            <summary>
            whether there are no items in this inventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.BaseInventory.IsFull">
            <summary>
            whether there is no space left in this inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.SwapUnchecked(WCell.RealmServer.Items.BaseInventory,System.Int32,WCell.RealmServer.Items.BaseInventory,System.Int32)">
            <summary>
            Swaps the items at the given slots without further checks.
            </summary>
            <param name="slot1"></param>
            <param name="slot2"></param>
            <remarks>Make sure the slots are valid before calling.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.HoldFreeSlot(WCell.RealmServer.Items.ItemTemplate,System.Int32)">
            <summary>
            Finds a free slot for the given template and occpuies it with a placeholder.
            Don't forget to remove it again.
            </summary>
            <param name="templ"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.FindFreeSlot(System.Int32,System.Int32)">
            <summary>
            Find a free slot within the given range
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.GetHandler(System.Int32)">
            <summary>
            Returns the IItemSlotHandler for the specified spot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.CheckUniqueness(WCell.RealmServer.Items.IMountableItem,System.Int32@,WCell.Constants.Items.InventoryError@,System.Boolean)">
            <summary>
            Is called before adding the given amount of the given Item. 
            </summary>
            <param name="item"></param>
            <param name="amount"></param>
            <param name="err"></param>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.Constants.Items.ItemId,System.Int32@,WCell.Constants.Items.InventorySlot,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add a new item with the given template and amount ot the given slot.
            Make sure the given targetSlot is valid before calling this method.
            If slot is occupied, method will find another unoccupied slot.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Items.ItemTemplate,WCell.Constants.Items.InventorySlot,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add ONE new item with the given template to the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Items.ItemTemplate,WCell.Constants.Items.EquipmentSlot,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add a single new item with the given template to the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.Constants.Items.ItemId,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add a new item with the given id to a free slot.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Items.ItemTemplate,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add a new item with the given id to a free slot.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.Constants.Items.ItemId,System.Int32,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add ONE new item with the given template to the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.Constants.Items.ItemId,WCell.Constants.Items.InventorySlot,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add ONE new item with the given template to the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.Constants.Items.ItemId,System.Int32@,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add an item with the given template and amount
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(System.UInt32,System.Int32@,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add a new item with the given template and amount
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Items.ItemTemplate,System.Int32,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add ONE new item with the given template to the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.Constants.Items.ItemId,System.Int32@,System.Int32,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add an Item with the given template and amount ot the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Items.ItemTemplate,System.Int32@,System.Int32,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add a new item with the given template and amount ot the given slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Items.ItemTemplate,System.Int32@,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add an item with the given template and amount
            </summary>
            <param name="amount">Amount of items to be added: Will be set to the amount of Items that have actually been added.</param>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(WCell.RealmServer.Entities.Item,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to distribute the given item over all available stacks and add the remainder to a free slot.
            IMPORTANT:
            1. The Item will be destroyed if it could successfully be distributed over existing stacks of Items.
            2. If item.Container == null, parts of the item-stack might have distributed over other stacks of the same type
            but the remainder did not find a free slot or exceeded the max count of the item.
            item.Amount will hold the remaining amount.
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAddAmount(WCell.RealmServer.Entities.Item,System.Int32,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to distribute the given amount of the given Item over all available stacks and add the remainder to a free slot.
            Parts of the stack might have distributed over existing stacks, even if adding the remainder failed.
            </summary>
            <returns>InventoryError.OK in case that it could be added</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAdd(System.Int32,WCell.RealmServer.Entities.Item,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add the given item to the given slot (make sure the slot is valid and not occupied).
            Fails if not all items of this stack can be added.
            </summary>
            <returns>InventoryError.OK in case that it worked</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryMerge(WCell.RealmServer.Items.ItemTemplate,System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Tries to merge an item with the given template and amount to the stack at the given slot.
            If the given slot is empty it adds the item to the slot.
            Make sure the given targetSlot is valid before calling this method.
            </summary>
            <param name="amount">Set to the number of items actually added.</param>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.CheckAdd(System.Int32,WCell.RealmServer.Items.IMountableItem,System.Int32)">
            <summary>
            
            </summary>
            <param name="slot"></param>
            <param name="item"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.AddUnchecked(System.Int32,WCell.RealmServer.Items.ItemTemplate,System.Int32,System.Boolean)">
            <summary>
            Adds the Item to the given slot without any further checks.
            Make sure all parameters are valid (eg by calling <code>CheckAdd</code> beforehand)
            or use <code>TryAdd</code> instead.
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.MergeUnchecked(System.Int32,WCell.RealmServer.Items.ItemTemplate,System.Int32@,System.Boolean)">
            <summary>
            Adds an amount of Items with ItemTemplate to the Item in the given slot, without further checks.
            If the given slot is empty, it AddsUnchecked.
            </summary>
            <param name="amount">Set to the number of Items actually added.</param>
            <returns>The Item in the slot you merged to.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.AddUnchecked(System.Int32,WCell.RealmServer.Entities.Item,System.Boolean)">
            <summary>
            Adds the Item to the given slot without any further checks.
            Make sure all parameters are valid (eg by calling <code>CheckAdd</code> beforehand)
            or use <code>TryAdd</code> instead.
            </summary>
            <param name="slot"></param>
            <param name="item"></param>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.Remove(System.Int32,System.Boolean)">
            <summary>
            Make sure that you have a valid slot before calling this method (see IsValidSlot).
            </summary>
            <param name="ownerChange">whether the owner will change</param>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.Remove(WCell.RealmServer.Entities.Item,System.Boolean)">
            <summary>
            Don't use this method - but use item.Remove instead.
            </summary>
            <param name="item"></param>
            <param name="ownerChange"></param>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryDestroy(System.Int32)">
            <summary>
            Checks for all requirements before destroying the Item in the given slot. 
            If it cannot be destroyed, sends error to owner.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.Destroy(System.Int32)">
            <summary>
            Destroys the item at the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.AddAllUnchecked``1(``0[],WCell.RealmServer.Items.SimpleSlotId[])">
            <summary>
            Adds all given Items to the given slots.
            Tries to distribute over existing stacks first.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.TryAddAll``1(``0[])">
            <summary>
            Tries to add all given Items to this Inventory. 
            Does not add any if not all could be added.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.Distribute(WCell.RealmServer.Items.ItemTemplate,System.Int32@)">
            <summary>
            Tries to distribute Items of the given Template and amount amongst all other stacks of the same Type
            </summary>
            <param name="amount">Will be set to the amount that has actually been distributed</param>
            <returns>whether the complete amount has been fully distributed.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.CheckDistribute(WCell.RealmServer.Items.ItemTemplate,System.Int32@)">
            <summary>
            Checks whether Items of the given Template and amount can be distributed 
            amongst already existing stacks of the same Type without actually changing anything.
            </summary>
            <param name="amount">The number of items to try and distribute. 
            Will be set to the number of items that would be distributed if a real Distribute is run.</param>
            <returns>true if the whole amount can be distributed.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.GetCount(System.Int32,System.Int32)">
            <summary>
            Counts and returns the amount of items in between the given slots.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.Iterate(System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            Iterates over all Items within this Inventory.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BaseInventory.GetEnumerator">
            <summary>
            All items that are currently in this inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ContainerInventory.#ctor(WCell.RealmServer.Entities.Container,WCell.Constants.Updates.UpdateFieldId,System.Int32)">
            <summary>
            16 Initial item slots
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ContainerInventory.GetHandler(System.Int32)">
            <summary>
            Returns the IItemSlotHandler for the specified spot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ContainerInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ContainerInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ContainerInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ContainerInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.Enchanting.EnchantMgr.ApplyEquippedEffect(WCell.RealmServer.Entities.Item,WCell.RealmServer.Items.Enchanting.ItemEnchantmentEffect)">
            <summary>
            Applies the given EnchantEffect to the given Item and the wearer of the Item
            </summary>
            <param name="item"></param>
            <param name="effect"></param>
        </member>
        <member name="M:WCell.RealmServer.Items.Enchanting.EnchantMgr.RemoveEffect(WCell.RealmServer.Entities.Item,WCell.RealmServer.Items.Enchanting.ItemEnchantmentEffect)">
            <summary>
            Removes the given EnchantEffect from the given Item and the wearer of the Item
            </summary>
            <param name="item"></param>
            <param name="effect"></param>
        </member>
        <member name="F:WCell.RealmServer.Items.Enchanting.ItemEnchantment.Slot">
            <summary>
            The Enchantment slot (0-ItemConstants.MaxEnchantsPerItem).
            Not to confuse with Item-slots.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.Enchanting.ItemEnchantment.Duration">
            <summary>
            The total duration of the Enchantment in seconds.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.Enchanting.ItemEnchantmentCondition">
            <summary>
            See SpellItemEnchantmentCondition.dbc
            
            TODO: 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.Enchanting.ItemEnchantmentEffect.Misc">
            <summary>
            Depending on the <see cref="F:WCell.RealmServer.Items.Enchanting.ItemEnchantmentEffect.Type"/>:
            SpellId
            DamageSchool
            other
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.Enchanting.ItemEnchantmentEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.Enchanting.ItemEnchantmentEntry.Condition">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.GenericWeapon">
            <summary>
            A weapon that can be completely customized 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.GenericWeapon.Fists">
            <summary>
            Default Fists
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.GenericWeapon.Ranged">
            <summary>
            Default Ranged Weapon
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.GenericWeapon.Peace">
            <summary>
            No damage weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.GenericWeapon.MinRange">
            <summary>
            The minimum Range of this weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.GenericWeapon.MaxRange">
            <summary>
            The maximum Range of this Weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.GenericWeapon.AttackTime">
            <summary>
            The time in milliseconds between 2 attacks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IContainer.BaseInventory">
            <summary>
            The inventory of this Container
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IContainer.SetEntityId(System.Int32,WCell.Core.EntityId)">
            <summary>
            Sets the given EntityId field to the given value
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.IInventory">
            <summary>
            General interface for anything that can hold items (BaseInventory and PartialInventory mostly)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IInventory.Owner">
            <summary>
            The actual owner of this srcCont.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IInventory.Items">
            <summary>
            The array of items that backup this inventory (don't modify from outside)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IInventory.MaxCount">
            <summary>
            The maximum amount of items, supported by this inventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IInventory.IsEmpty">
            <summary>
            Whether Count == 0
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IInventory.IsFull">
            <summary>
            Whether Count == MaxCount
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IInventory.FindFreeSlot">
            <summary>
            Returns the next empty available slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IInventory.IsValidSlot(System.Int32)">
            <summary>
            Returns whether the given slot exists in this inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IInventory.TryAdd(System.Int32,WCell.RealmServer.Entities.Item,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add the given item to the given slot in this srcCont
            </summary>
            <returns>Whether the item could be added</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.IInventory.TryAdd(WCell.RealmServer.Entities.Item,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add the item to a free slot in this srcCont
            </summary>
            <returns>Whether the item could be added</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.IInventory.Remove(System.Int32,System.Boolean)">
            <summary>
            Removes the item at the given slot. If you intend to enable the user continuing to use that item, do not use this method
            but use PlayerInventory.TrySwap instead.
            </summary>
            <returns>Whether there was an item to be removed and removal was successful</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.IInventory.Destroy(System.Int32)">
            <summary>
            Deletes the item in the given slot (item cannot be re-used afterwards)
            </summary>
            <returns>Whether the given item could be deleted</returns>
        </member>
        <member name="T:WCell.RealmServer.Items.IItemSlotHandler">
            <summary>
            Handles Items when moved to/from certain slots
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IItemSlotHandler.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IItemSlotHandler.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IItemSlotHandler.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.IItemSlotHandler.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.ItemHitProcHandler">
            <summary>
            Handles Item OnHit-procs which are applied to the wearer of the Item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.ItemHitProcHandler.ProcTriggerFlags">
            <summary>
            ItemHitProcs always trigger
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.ItemHitProcHandler.ProcChance">
            <summary>
            Chance to Proc from 0 to 100
            Yet to implement: http://www.wowwiki.com/Procs_per_minute
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.ItemHitProcHandler.StackCount">
            <summary>
            ItemHitProcs dont have charges
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.Templates">
            <summary>
            All defined <see cref="T:WCell.RealmServer.Items.ItemTemplate">ItemTemplates</see>.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.Sets">
            <summary>
            All ItemSet definitions
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.PartialInventoryTypes">
            <summary>
            All partial inventory types by InventorySlot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.GetTemplate(WCell.Constants.Items.ItemId)">
            <summary>
            Returns the ItemTemplate with the given id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.GetTemplateForced(WCell.Constants.Items.ItemId)">
            <summary>
            Returns the ItemTemplate with the given id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.GetTemplate(System.UInt32)">
            <summary>
            Returns the ItemTemplate with the given id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.GetTemplates(WCell.Constants.Items.ItemClass)">
            <summary>
             Returns a List of templates with the given ItemClass
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.GetSet(WCell.Constants.Items.ItemSetId)">
            <summary>
            Returns the ItemSet with the given id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.GetSet(System.UInt32)">
            <summary>
            Returns the ItemSet with the given id
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.EquipmentSlotsByInvSlot">
            <summary>
            Maps a set of available InventorySlots by their corresponding InventorySlotType
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.StorageSlotsWithoutBank">
            <summary>
            Contains all InventorySlots that are used as storage on the Character, without bank slots
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.InvSlots">
            <summary>
            Contains all Equipment and on-character inventory slots without keys
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.InvSlotsWithBank">
            <summary>
            Contains all InventorySlots that are used as storage on the Character, including bank slots
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.BankSlots">
            <summary>
            Contains all BankSlots
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.BankBagSlots">
            <summary>
            Contains all InventorySlots for BankBags
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemMgr.OwnedSlots">
            <summary>
            All slots that can contain Items that actually belong to the Character (all InventorySlots, but BuyBack)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.LoadSets">
            <summary>
            Load item-set info from the DBCs (automatically called on startup)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.TruncSets">
            <summary>
            Resize all Template-Arrays of sets to their actual size.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemMgr.Apply(System.Action{WCell.RealmServer.Items.ItemTemplate},WCell.Constants.Items.ItemId[])">
            <summary>
            Adds a callback to be called on the given set of ItemTemplates after load and before Item initialization
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.BaseItemRandomPropertyInfo.ChancePercent">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.ItemSet">
            <summary>
            Represents a collectable Set of Items
            
            TODO: ID - enum
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.BagTemplateId">
            <summary>
            The bag to be used when creating a new set
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.MaxBonusCount">
            <summary>
            Maximum amount of items per set
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.ItemsOffset">
            <summary>
            offset of items in the DBC file
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.ItemsEnd">
            <summary>
            End of items in the DBC file
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.BoniOffset">
            <summary>
            Offset of Set-Boni in the DBC file
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.BoniOrderOffset">
            <summary>
            Offset of the item-order in the DBC file
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.Templates">
            <summary>
            The templates of items that belong to this set
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.Boni">
            <summary>
            An array of array of spells that get applied for each (amount-1) of items of this set.
            Eg. all spells to be applied when equipping the first item would be at Boni[0] etc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.RequiredSkill">
            <summary>
            We need this skill in order to wear items of this set
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSet.RequiredSkillValue">
            <summary>
            We need at least this much of the RequiredSkill, in order to wear items of this set
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemSet.CreateSet(WCell.RealmServer.Entities.Character,WCell.Constants.Items.ItemSetId)">
            <summary>
            If there is a free equippable bag slot: Adds all items of this set to a new bag in that slot
            </summary>
            <returns>False if their was no space left or an internal error occured and not all items could be added</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.ItemSet.Create(WCell.RealmServer.Entities.Character)">
            <summary>
            If there is a free equippable bag slot: Adds all items of this set to a new bag in that slot
            </summary>
            <returns>False if their was no space left or an internal error occured and not all items could be added</returns>
        </member>
        <member name="T:WCell.RealmServer.Items.ItemSpell">
            <summary>
            Item-bound spell, contains information on charges, cooldown, trigger etc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSpell.Index">
            <summary>
            The index of this spell within the Template
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.ItemSpell.CategoryId">
            <summary>
            SpellCategory.dbc
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.IMountableItem">
            <summary>
            ItemTemplate or Item
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.IWeapon">
            <summary>
            Any Item and Fists
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.Damages">
            <summary>
            A set of damages that will be applied on hit
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.Skill">
            <summary>
            The Skill that this weapon requires
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.IsMelee">
            <summary>
            Indicates whether this is a Melee weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.IsRanged">
            <summary>
            Indicates whether this is a ranged weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.MinRange">
            <summary>
            The minimum Range of this weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.MaxRange">
            <summary>
            The maximum Range of this Weapon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.AttackTime">
            <summary>
            The time in millis between 2 attacks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.IWeapon.InventorySlotMask">
            <summary>
            The type of weapon
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.PartialInventory">
            <summary>
            A part of another inventory (eg backpack, bank, equipment, buyback etc are all parts of the PlayerInventory)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.Offset">
            <summary>
            The offset within the underlying inventory of what this part occupies.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.End">
            <summary>
            The end within the underlying inventory of what this part occupies
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.Owner">
            <summary>
            The actual owner of this srcCont.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.Item(System.Int32)">
            <summary>
            Gets the corresponding slot without further checks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.Items">
            <summary>
            A copy of the items of this PartialInventory.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.Count">
            <summary>
            The amount of items, currently in this part of the inventory.
            Recounts everytime.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.MaxCount">
            <summary>
            The maximum amount of items, supported by this inventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.IsEmpty">
            <summary>
            whether there are no items in this inventory
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PartialInventory.IsFull">
            <summary>
            whether there is no space left in this inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.FindFreeSlot">
            <summary>
            Returns the next free slot in this part of the inventory, else BaseInventory.INVALID_SLOT
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.IsValidSlot(System.Int32)">
            <summary>
            Returns whether the given slot is valid to access items of this inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.TryAdd(System.Int32,WCell.RealmServer.Entities.Item,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add the given item to the corresponding slot: The offset of this inventory + the given slot
            </summary>
            <returns>whether the item could be added</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.TryAdd(WCell.RealmServer.Entities.Item,System.Boolean,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Tries to add the item to a free slot in this srcCont
            </summary>
            <returns>whether the item could be added</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.Remove(System.Int32,System.Boolean)">
            <summary>
            Removes the item at the given slot. If you intend to enable the user continuing to use that item, do not use this method
            but use PlayerInventory.TrySwap instead.
            </summary>
            <returns>whether there was an item to be removed and removal was successful</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.Destroy(System.Int32)">
            <summary>
            Deletes the item in the given slot (item cannot be re-used afterwards).
            </summary>
            <returns>whether the given item could be deleted</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PartialInventory.GetInventories">
            <summary>
            Returns all existing inventories (only containers have them)
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Items.EquipmentInventory">
            <summary>
            Represents the Equipment
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquipmentInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquipmentInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquipmentInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquipmentInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.BackPackInventory">
            <summary>
            Represents all items within the BackPack
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BackPackInventory.IsBackpackSlot(WCell.Constants.Items.InventorySlot)">
            <returns>whether the given InventorySlot is a backpack slot</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BackPackInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BackPackInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BackPackInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BackPackInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.EquippedContainerInventory">
            <summary>
            Represents all equippable bags
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquippedContainerInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquippedContainerInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before a bag is removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquippedContainerInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.EquippedContainerInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.BankInventory">
            <summary>
            Represents all items within the bank (excluding bags in srcCont slots)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BankInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BankInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BankInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BankInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.BankBagInventory">
            <summary>
            Represents all bank bags
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BankBagInventory.IncBankBagSlotCount(System.Boolean)">
            <summary>
            Tries to increase the amount of slots for bank bags by one.
            </summary>
            <param name="takeMoney">whether to also check (and subtract) the amount of money for the slot</param>
            <returns>whether there was still space left to add (and -if takeMoney is true- also checks whether the funds were sufficient)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BankBagInventory.DecBankBagSlotCount">
            <summary>
            Tries to reduce the amount of slots for bank bags by one.
            Returns the cont, or null if the amount is already at 0 or if the last cont still contains items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Items.BuyBackInventory">
            <summary>
            Represents all BuyBack items (that can be re-purchased at a vendor)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BuyBackInventory.AddBuyBackItem(WCell.RealmServer.Entities.Item,System.Boolean)">
            <summary>
            Adds an Item to the BuyBack inventory. If the BuyBack is full, the item in BuyBackSlot1 is destroyed
            and the items in the other slots are shifted up one to free-up the BuyBackLast slot.
            This method should only be called by the CMSG_SELL_ITEM handler.
            </summary>
            <param name="item">The item to Add to the BuyBack PartialInventory</param>
        </member>
        <member name="M:WCell.RealmServer.Items.BuyBackInventory.PushBack">
            <summary>
            The BuyBack inventory is full. In order to make room for further items, push the top item off the list
            and then move every other item up one slot, thereby freeing the last slot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.BuyBackInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BuyBackInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BuyBackInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.BuyBackInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.KeyRingInventory">
            <summary>
            Represents the keyring
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.KeyRingInventory.CheckAdd(System.Int32,System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before adding to check whether the item may be added to the corresponding slot 
            (given the case that the corresponding slot is valid and unoccupied)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.KeyRingInventory.CheckRemove(System.Int32,WCell.RealmServer.Items.IMountableItem,WCell.Constants.Items.InventoryError@)">
            <summary>
            Is called before removing the given item to check whether it may actually be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.KeyRingInventory.Added(WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is added to the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.KeyRingInventory.Removed(System.Int32,WCell.RealmServer.Entities.Item)">
            <summary>
            Is called after the given item is removed from the given slot
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.PlayerInventory.DeathDurabilityLossPct">
            <summary>
            Durability loss on all Items upon Death in percent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.PlayerInventory.SHResDurabilityLossPct">
            <summary>
            Durability loss of *all* Items when reviving at the SpiritHealer
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.PlayerInventory.m_partialInventories">
            <summary>
            Every PartialInventory is also ensured to be IISlotHandler
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.#ctor(WCell.RealmServer.Entities.Character)">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.TotalCount">
            <summary>
            The amount of items, currently in this inventory.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.Item(WCell.Constants.Items.InventorySlot)">
            <summary>
            Gets the item at the given InventorySlot (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.Item(WCell.Constants.Items.EquipmentSlot)">
            <summary>
            Gets the item at the given InventorySlot (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.IsBankOpen">
            <summary>
            whether the client currently is allowed to/tries to access his/her bank (through a banker usually)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.CurrentBanker">
            <summary>
            The banker at which we currently opened the BankBox (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.Ammo">
            <summary>
            The currently used Ammo
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.AmmoId">
            <summary>
            The id of the currently used Ammo
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.Equipment">
            <summary>
            All equipped items
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.EquippedContainers">
            <summary>
            The 4 equippable srcCont slots, next to the BackPack
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.BackPack">
            <summary>
            The contents of the backpack
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.Bank">
            <summary>
            The contents of the bankbox (excluding bags)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.BankBags">
            <summary>
            All available containers in the bank
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.BuyBack">
            <summary>
            Items that have been sold and can be re-purchased by the player
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.PlayerInventory.KeyRing">
            <summary>
            The keyring
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetHandler(System.Int32)">
            <summary>
            Returns the IItemSlotHandler for the specified InventorySlot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetContainer(WCell.Constants.Items.InventorySlot,System.Boolean)">
            <summary>
            Returns the inventory of the corresponding cont (or null).
            Only works for bags in the equipment's or bank's cont slots (only these bags may contain items).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetContainer(WCell.Core.EntityId,System.Boolean)">
            <summary>
            Returns the Inventory of the Container with the given id or this Character.
            </summary>
            <returns>Never null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetBankContainer(WCell.Constants.Items.InventorySlot)">
            <summary>
            Returns the inventory of the corresponding bank-container (or null)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.CheckInteract">
            <summary>
            Checks some basic parameters for whether the character may interact with (Equip or Use) items and
            sends an error if the character cannot interact. Also cancels the current spellcast (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Ensure(WCell.Constants.Items.ItemId,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <returns>The result (InventoryError.OK in case that it worked)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.OnNewStack(WCell.RealmServer.Entities.Item)">
            <summary>
            Called whenever the Player receives a new Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.OnRemove(WCell.RealmServer.Entities.Item)">
            <summary>
            Called when the given Item is removed for good.
            Don't use this method - but use item.Remove instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.OnAmountChanged(WCell.RealmServer.Entities.Item,System.Int32)">
            <summary>
            Called when the given Item's amount changes by the given difference
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.FindFreeSlot(System.Int32,System.Int32)">
            <summary>
            Gets a free slot in the backpack (use FindFreeSlot(IMountableItem, uint) to also look through equipped bags and optionally the bank)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.FindFreeSlotCheck(WCell.RealmServer.Items.ItemTemplate,System.Int32,WCell.Constants.Items.InventoryError@)">
            <summary>
            Finds a free slot after checking for uniqueness
            </summary>
            <param name="templ"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.FindFreeSlot(WCell.RealmServer.Items.IMountableItem,System.Int32)">
            <summary>
            Gets a free slot in a preferred equipped bag (eg Herb bag for Herbs) or backpack
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.FindFreeSlot(WCell.RealmServer.Items.IMountableItem,System.Int32,System.Boolean)">
            <summary>
            Gets a free slot in a preferred equipped bag (eg Herb bag for Herbs) or backpack.
            Looks for a suitable equipment slot first, if tryEquip is true
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetPreferredSlot(WCell.RealmServer.Items.ItemTemplate,System.Int32,WCell.RealmServer.Items.SimpleSlotId@)">
            <summary>
            Sets slotId to the slot that the given templ would prefer (if it has any bag preference).
            </summary>
            <param name="templ"></param>
            <param name="slotId"></param>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.FindFreeBankSlot(WCell.RealmServer.Items.IMountableItem,System.Int32)">
            <summary>
            Gets a free slot in the bank or one of the bankbags
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.FindFreeSlots(System.Boolean,System.Int32)">
            <summary>
            Gets 0 to max free slots in the backpack or one of the equipped bags and optionally the bank (+ its bags)
            </summary>
            <param name="inclBank">whether to also look in the bank for free slots</param>
            <param name="max">The max of free inventory slots to be returned</param>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Iterate(System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            Iterates over all existing items that this Character carries in backpack + bags (if specified, also Bank + BankBags)
            </summary>
            <param name="validator">Returns whether to continue iteration</param>
            <returns>whether iteration was not cancelled (usually indicating we didn't find what we were looking for)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Iterate(System.Boolean,System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            Iterates over all existing items that this Character carries in backpack + bags (if specified, also Bank + BankBags)
            </summary>
            <param name="inclBank">whether to also look through the bank</param>
            <param name="validator">Returns whether to continue iteration</param>
            <returns>whether iteration was not cancelled (usually indicating we didn't find what we were looking for)</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.IterateStorage(System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            Iterates over the Backpack and Bags
            </summary>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.IterateEquipment(System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            Iterates over all equipped items
            </summary>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Contains(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            whether the character has at least the given amount of Items with the given templateId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Contains(WCell.Constants.Items.ItemId,System.Int32,System.Boolean)">
            <summary>
            whether the character has  at least the given amount of Items with the given templateId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Contains(System.UInt32)">
            <summary>
            whether the character has the Item with the given ItemId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Contains(WCell.Constants.Items.ItemId)">
            <summary>
            whether the character has the Item with the given ItemId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.ContainsLowId(System.UInt32)">
            <summary>
            whether the character has the Item with the given unique id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.ContainsAll(System.UInt32[])">
            <summary>
            whether the character has all Items with the given unique id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.ContainsAll(WCell.Constants.Items.ItemId[])">
            <summary>
            whether the character has all Items with the given unique id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Consume(WCell.Constants.Items.ItemId,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Consumes the given amount of items with the given templateId.
            Also looks through the bank when inclBank is set.
            </summary>
            <param name="inclBank">whether to also search in the bank and its bags (if not enough was found in inventory and bags)</param>
            <param name="templateId"></param>
            <param name="amount">If 0, consumes all Items that were found</param>
            <param name="force">Whether only to remove if there are at least the given amount of items</param>
            <returns>whether the required amount of items was found (and thus consumed).</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Consume(System.UInt32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Consumes the given amount of items with the given templateId.
            Also looks through the bank when inclBank is set.
            </summary>
            <param name="inclBank">whether to also search in the bank and its bags (if not enough was found in inventory and bags)</param>
            <param name="templateId"></param>
            <param name="amount">If 0, consumes all Items that were found</param>
            <param name="force">Whether only to remove if there are at least the given amount of items</param>
            <returns>whether the required amount of items was found (and thus consumed).</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Consume(WCell.RealmServer.Items.ItemStackDescription[],System.Boolean)">
            <summary>
            Finds and consumes all of the given items. 
            Does not consume anything and returns false if not all items were found.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Find(System.Boolean,System.Int32,System.Collections.Generic.IList{WCell.RealmServer.Items.SimpleSlotId},System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            Finds up to max items that are validated by the given validator and puts them in the given list.
            </summary>
            <param name="inclBank">whether to also search in the bank and its bags (if not enough was found in inventory and bags)</param>
            <param name="max">Maximum amount of items to be looked through</param>
            <param name="list">List of slot-identifiers for the items to be added to</param>
            <returns>The amount of found items</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetAmount(WCell.Constants.Items.ItemId)">
            <summary>
            Returns the total amount of Items within this Inventory of the given ItemId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.TrySwap(WCell.Constants.Items.InventorySlot,System.Int32,WCell.Constants.Items.InventorySlot,System.Int32)">
            <summary>
            Moves an item from one slot to another
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.TrySwap(WCell.RealmServer.Items.BaseInventory,System.Int32,WCell.RealmServer.Items.BaseInventory,System.Int32)">
            <summary>
            Moves an item from one slot to another.
            Core method for moving items around.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.TryMove(WCell.Constants.Items.InventorySlot,System.Int32,WCell.Constants.Items.InventorySlot)">
            <summary>
            Tries to move an Item from one container into another
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.TryMove(WCell.RealmServer.Items.BaseInventory,System.Int32,WCell.RealmServer.Items.BaseInventory)">
            <summary>
            Tries to auto-equip an item from the given slot (from within the corresponding cont)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.TryEquip(WCell.Constants.Items.InventorySlot,System.Int32)">
            <summary>
            Tries to auti-equip an item from the given slot (from within the corresponding cont)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.TryEquip(WCell.RealmServer.Items.BaseInventory,System.Int32)">
            <summary>
            Tries to auti-equip an item from the given slot (from within the corresponding cont)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Withdraw(WCell.Constants.Items.InventorySlot,System.Int32)">
            <summary>
            Moves the item from the given slot in the bank to the first free slot in the inventory or one of the equipped bags
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Deposit(WCell.Constants.Items.InventorySlot,System.Int32)">
            <summary>
            Moves the item from the given slot to the given slot in the Bank or one of its bags
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemByItemId(WCell.Constants.Items.ItemId)">
            <summary>
            Returns the first stack of Items with ItemId encountered in the Character's backpack
            and bags and (if open) in the Bank and Bankbags.
            </summary>
            <param name="id">ItemId of the Item to find.</param>
            <returns>The first stack encountered or null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemByItemId(System.UInt32)">
            <summary>
            Returns the first stack of Items with ItemId encountered in the Character's backpack
            and bags and (if open) in the Bank and Bankbags.
            </summary>
            <param name="id">ItemId of the Item to find.</param>
            <returns>The first stack encountered or null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemByItemId(WCell.Constants.Items.ItemId,System.Boolean)">
            <summary>
            Returns the first stack of Items with ItemId encountered in the Character's backpack
            and bags and (optionally) in the Bank and Bankbags.
            </summary>
            <param name="id">ItemId of the Item to find.</param>
            <param name="includeBank">Whether to search the Bank.</param>
            <returns>The first stack encountered or null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemByItemId(System.UInt32,System.Boolean)">
            <summary>
            Returns the first stack of Items with ItemId encountered in the Character's backpack
            and bags and (optionally) in the Bank and Bankbags.
            </summary>
            <param name="templateId">ItemId of the Item to find.</param>
            <param name="includeBank">Whether to search the Bank.</param>
            <returns>The first stack encountered or null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemAmountByItemId(WCell.Constants.Items.ItemId)">
            <summary>
            Searches through a Character's Backpack and Bags and (if open) Bank and Bank Bags
            for Items with the given Id and adds up their amounts.
            </summary>
            <param name="id">ItemId of the Item to find.</param>
            <returns>The sum of the amounts of the Items encountered.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemAmountByItemId(System.UInt32)">
            <summary>
            Searches through a Character's Backpack and Bags and (if open) Bank and Bank Bags
            for Items with the given Id and adds up their amounts.
            </summary>
            <param name="id">ItemId of the Item to find.</param>
            <returns>The sum of the amounts of the Items encountered.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemAmountByItemId(WCell.Constants.Items.ItemId,System.Boolean)">
            <summary>
            Searches through a Character's Backpack and Bags and (if open) Bank and Bank Bags
            for Items with the given Id and adds up their amounts.
            </summary>
            <param name="id">ItemId of the Item to find.</param>
            <param name="includeBank">Whether to search the Bank and Bank Bags.</param>
            <returns>The sum of the amounts of the Items encountered.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItemAmountByItemId(System.UInt32,System.Boolean)">
            <summary>
            Searches through a Character's Backpack and Bags and (if open) Bank and Bank Bags
            for Items with the given Id and adds up their amounts.
            </summary>
            <param name="templateId">ItemId of the Item to find.</param>
            <param name="includeBank">Whether to search the Bank and Bank Bags.</param>
            <returns>The sum of the amounts of the Items encountered.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItem(WCell.Core.EntityId)">
            <summary>
            Returns the Item with the given EntityId if it exists in the player's inventory (or bank, if it is open).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetItem(WCell.Constants.Items.InventorySlot,System.Int32,System.Boolean)">
            <summary>
            Attempts to retreive an item in the character's available inventory.
            </summary>
            <param name="contSlot">The container's slot (Bag1 ... BagLast, BankBag1 ... BankBagLast), 
            use InventorySlot.Invalid for the Backpack slots.</param>
            <param name="slot">The slot within the container where the item resides.</param>
            <param name="inclBank">Whether to check the bank as well.</param>
            <returns>The item or null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetBankItem(WCell.Constants.Items.InventorySlot,System.Int32)">
            <summary>
            Returns an item from the bank in the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetAllItems(System.Boolean)">
            <summary>
            Enumerates all of the Character's owned Items (optionally with or without BuyBack)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.RemoveByItemId(WCell.Constants.Items.ItemId,System.Int32,System.Boolean)">
            <summary>
            Removes Items from the Backpack, Bags and (if indicated) from the Bank and BankBags.
            </summary>
            <param name="id">The ItemId of the Items to remove.</param>
            <param name="amount">The number of Items to remove.</param>
            <param name="includeBank">Whether to include the Bank and BankBags.</param>
            <returns>Whether amount of items was removed.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Iterate(WCell.Constants.Items.InventorySlotTypeMask,System.Func{WCell.RealmServer.Entities.Item,System.Boolean})">
            <summary>
            </summary>
            <returns>Whether a match was found</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.EnsureEmpty(WCell.Constants.Items.EquipmentSlot)">
            <summary>
            Checks if the given slot is occupied and -if so- puts the item from that slot into a free
            storage slot (within the backpack or any equipped bags).
            </summary>
            <returns>whether the given slot is now empty</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Unequip(WCell.Constants.Items.InventorySlot)">
            <summary>
            Tries to unequip the item at the given InventorySlot into a free available slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Unequip(WCell.RealmServer.Items.BaseInventory,System.Int32)">
            <summary>
            Tries to unequip the item at the given slot and put it into the first available slot in the backpack or an equipped cont.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetEquipSlot(WCell.RealmServer.Items.ItemTemplate,System.Boolean)">
            <summary>
            Returns a free EquipmentSlot (or the first allowed slot). 
            If force is set and there is no free slot and the backpack still has space, it will unequip the
            item in the first possible slot to the backpack or an equipped bag.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.SetAmmo(System.UInt32)">
            <summary>
            Sets the ammo to the given template-id. 
            </summary>
            <returns>whether the ammo with the given id was found</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.ConsumeAmmo">
            <summary>
            Tries to consume 1 piece of ammo and returns whether there was any left to be consumed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.GetSetCount(WCell.RealmServer.Items.ItemSet)">
            <summary>
            Returns the amount of Items of the given Set that the owner currently has equipped.
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.AddEquipmentHandler(WCell.RealmServer.Items.IItemEquipmentEventHandler)">
            <summary>
            Adds a handler to be notified upon equipment changes
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.RemoveEquipmentHandler(WCell.RealmServer.Items.IItemEquipmentEventHandler)">
            <summary>
            Removes the given handler
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.CheckEquipCount(WCell.RealmServer.Items.IMountableItem)">
            <summary>
            Checks for whether the given amount of that Item can still be added 
            (due to max unique count).
            </summary>
            <param name="mountItem"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.ApplyDurabilityLoss(System.Int32)">
            <summary>
            Removes the given percentage of durability from all Items of this Inventory.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Strip">
            <summary>
            Unequips all Items (if there is enough space left)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.Purge">
            <summary>
            Destroys all Items
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.CheckTotemCategories(WCell.Constants.Items.ToolCategory[])">
            <summary>
            Check for whether there is at least one Item of each Category in this Inventory.
            </summary>
            <param name="cats"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.EnsureHearthStone">
            <summary>
            Ensures that there is at least one Item that
            works as HearthStone in this inventory (if missing, tries to add one).
            </summary>
            <returns>False only if Hearthstone is missing and could not be added, otherwise true.</returns>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.AddOwnedItems">
            <summary>
            Adds the Items of this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Items.PlayerInventory.SaveAll(System.Collections.Generic.List{WCell.RealmServer.Database.ItemRecord})">
            <summary>
            Saves all items and adds their records to the given list.
            </summary>
            <param name="records"></param>
        </member>
        <member name="T:WCell.RealmServer.Items.SimpleSlotId">
            <summary>
            Represents a unique slot-descriptor per PlayerInventory (the slot number and its containing BaseInventory)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.SimpleSlotId.Item">
            <summary>
            The item at this slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.SearchSlotId">
            <summary>
            Represents a unique slot-descriptor per PlayerInventory (the slot number and its containing BaseInventory),
            also keeps track of where it was looking through last, so search can be commenced
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.SearchSlotId.InclBank">
            <summary>
            Whether to also look in the bank
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Items.SearchSlotId.SearchPos">
            <summary>
            The position in SetterSlots
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Items.SearchSlotId.Item">
            <summary>
            The item at this slot
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Items.StatModifier">
            <summary>
            A modifier to an item's owner's stats and/or CombatRatings
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.NPCEntry">
            <summary>
            NPC Entry
            </summary>
        </member>
        <member name="E:WCell.RealmServer.NPCs.NPCEntry.Activated">
            <summary>
            Called when the given NPC is added to the world or when resurrected.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.NPCs.NPCEntry.Deleted">
            <summary>
            Called when NPC is deleted
            </summary>
        </member>
        <member name="E:WCell.RealmServer.NPCs.NPCEntry.Interacting">
            <summary>
            Called when any Character interacts with the given NPC such as quests, vendors, trainers, bankers, anything that causes a gossip.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.NPCs.NPCEntry.LevelChanged">
            <summary>
            Is called when this NPC's level changed, only if the NPC of this NPCEntry may gain levels (<see cref="P:WCell.RealmServer.Entities.NPC.MayGainExperience"/>).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.AggroBaseRangeDefault">
            <summary>
            Default base-range in which a mob will aggro (in yards).
            Also see <see cref="F:WCell.RealmServer.NPCs.NPCEntry.AggroRangePerLevel"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.AggroRangePerLevel">
            <summary>
            Amount of yards to add to the <see cref="F:WCell.RealmServer.NPCs.NPCEntry.AggroBaseRangeDefault"/> per level difference.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.AggroRangeMaxDefault">
            <summary>
            Mobs with a distance >= this will not start aggressive actions
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCEntry.AggroRangeMinDefault">
            <summary>
            Mobs within this range will *definitely* aggro
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.IsIdle">
            <summary>
            Whether a new NPC should be completely idle (not react to anything that happens)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCEntry.IsEventTrigger">
            <summary>
            Whether an NPC is a special event trigger like the little
            elementals used to cast spells or trigger concerts
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.KillCreditIds">
            <summary>
            Ids of creatures which simulate a death when this entry die
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.QuestItems">
            <summary>
            Ids of items this NPC drops in relation to quests (sent in a packet)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.GetEntry(System.UInt32)">
            <summary>
            Returns the NPCEntry for the given difficulty
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.GetPetLevelStatInfo(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.CreateMainHandWeapon">
            <summary>
            Creates the default MainHand Weapon for all Spawns of this SpawnPoint
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.CreateOffhandWeapon">
            <summary>
            Creates the default OffHand Weapon for all Spawns of this SpawnPoint (might be null)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.CreateRangedWeapon">
            <summary>
            Creates the default Ranged Weapon for all Spawns of this SpawnPoint (might be null)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.SpeedFactor">
            <summary>
            The factor to be applied to the default speed for this kind of NPC
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCEntry.HordeFactionId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.FixedSpells">
            <summary>
            A set of default Spells for this NPC
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.InteractionSpell">
            <summary>
            Spell to be casted when a Character talks to the NPC
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.Spells">
            <summary>
            Usable Spells to be casted by Mobs of this Type
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.AddSpell(WCell.Constants.Spells.SpellId)">
            <summary>
            Adds a Spell that will be used by all NPCs of this Entry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.AddSpell(System.UInt32)">
            <summary>
            Adds a Spell that will be used by all NPCs of this Entry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.AddSpells(WCell.Constants.Spells.SpellId[])">
            <summary>
            Adds a Spell that will be used by all NPCs of this Entry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.AddSpells(System.UInt32[])">
            <summary>
            Adds a Spell that will be used by all NPCs of this Entry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.AddSpell(WCell.RealmServer.Spells.Spell)">
            <summary>
            Adds a Spell that will be used by all NPCs of this Entry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.TrainerEntry">
            <summary>
            Trainers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCEntry.VendorItems">
            <summary>
            Vendors
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.BattlegroundTemplate">
            <summary>
            BattleMasters
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCEntry.DefaultDecayDelayMillis">
            <summary>
            The default decay delay in seconds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCEntry._DefaultDecayDelayMillis">
            <summary>
            The default delay before removing the NPC after it died when not looted.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCEntry.FinalizeDataHolder">
            <summary>
            Is called to initialize the object; usually after a set of other operations have been performed or if
            the right time has come and other required steps have been performed.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry">
            <summary>
            Spawn-information for NPCs
            </summary>
        </member>
        <member name="E:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.Spawned">
            <summary>
            Called when a new NPC of this Spawn has been added to the world (also called on Teleport to another Map).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.FinalizeDataHolder">
            <summary>
            Finalize this NPCSpawnEntry
            </summary>
            <param name="addToPool">If set to false, will not try to add it to any pool (recommended for custom NPCSpawnEntry that share a pool)</param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.FinalizeDataHolder(System.Boolean)">
            <summary>
            Finalize this NPCSpawnEntry
            </summary>
            <param name="addToPool">If set to false, will not try to add it to any pool (recommended for custom NPCSpawnEntry that share a pool)</param>
        </member>
        <member name="P:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.HasDefaultWaypoints">
            <summary>
            Whether this SpawnEntry has fixed Waypoints from DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.CreateWaypoint(WCell.Util.Graphics.Vector3,System.Single)">
            <summary>
            Creates a Waypoint but does not add it
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.AddWaypoints(WCell.Util.Graphics.Vector3[])">
            <summary>
            Adds the given positions as WPs
            </summary>
            <param name="wps"></param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry.IncreaseWPIds(System.Collections.Generic.LinkedListNode{WCell.RealmServer.NPCs.WaypointEntry})">
            <summary>
            Increases the Id of all Waypoints, starting from the given node
            </summary>
            <param name="node">May be null</param>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Spawns.NPCSpawnPoint">
            <summary>
            Represents a SpawnPoint that continuesly spawns NPCs.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnPoolTemplate.#ctor(System.Int32)">
            <summary>
            Constructor for custom pools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Spawns.NPCSpawnPoolTemplate.#ctor(WCell.RealmServer.NPCs.Spawns.NPCSpawnEntry,System.Int32)">
            <summary>
            Constructor for custom pools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Armorer.ArmorerMgr.RepairItem(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC,WCell.RealmServer.Entities.Item,System.Boolean)">
            <summary>
            Repairs the item of the given Character at the given armorer and returns the costs
            </summary>
            <returns></returns>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.Auction._auctionId">
            <summary>
            TODO: NPC entityid must not be saved to DB
            TODO: Don't save uints as long - int is fine
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.AllowInterFactionAuctions">
            <summary>
            Whether Alliance characters can list on Horde Auctionhouses and vice-versa.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.FactionHouseDepositPercent">
            <summary>
            The percent of the auctioned item's value used to calculate the required auctionhouse deposit.
            This value is used for Alliance/Horde auctionhouses only.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.NeutralHouseDepositPercent">
            <summary>
            The percent of the auctioned item's value used to calculate the required auctionhouse deposit.
            This value is used for Neutral auctionhouses only.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.AuctionHouseCutRate">
            <summary>
            The multiplier used to calculate the cut the auctionhouse takes from your auction winnings.
            Default = 1.00
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.AllianceAuctions">
            <summary>
            All auctions listed in the Alliance Auctionhouses.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.HordeAuctions">
            <summary>
            All auctions listed in the Horde Auctionhouses.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.NeutralAuctions">
            <summary>
            All auctions listed in the Neutral auctionhouses.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Auctioneer.AuctionMgr.LoadItems">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.CreatureFamily.MaxScaleLevel">
            <summary>
            Pets of this Level will have their max Scale
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.CreatureFamily.ScaleStep">
            <summary>
            Scale step per level
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.NPCAiText">
            <summary>
            Texts yelled by mobs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCAiText.Type">
            <summary>
            Custom chat message type that indicates how the message is being transmitted
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCAiText.Comment">
            <summary>
            Mob's ID or string like "Common Kobold Text"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCAiText.Texts">
            <summary>
            Texts on all languages : 0 - eng, ... , 7 - rus, requied for .Localize()
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCAiText.FinalizeDataHolder">
            <summary>
            Is called to initialize the object; usually after a set of other operations have been performed or if
            the right time has come and other required steps have been performed.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCAiTextMgr.GetEntry(System.UInt32)">
            <summary>
            Select entries by mob's ID
            </summary>
            <param name="id">Mob's ID</param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCAiTextMgr.GetFirstTextByEnglishPrefix(System.String,System.Boolean)">
            <summary>
            Select the first Text whose english version starts with the given string
            </summary>
            <param name="englishPrefix">String preposition</param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCAiTextMgr.GetEntries(System.String)">
            <summary>
            Select entries by preposition of yelled text (on any localization)
            </summary>
            <param name="str">String preposition</param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCAiTextMgr.GetFirstTextById(System.Int32)">
            <summary>
            Select entry by the id of the text
            </summary>
            <param name="id">Id of the text</param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCAiTextMgr.Apply(System.Action{WCell.RealmServer.NPCs.NPCAiText},WCell.RealmServer.NPCs.NPCAiText[])">
            <summary>
            It may be useful... sometime
            </summary>
            <param name="cb">Action</param>
            <param name="texts">Texts</param>
        </member>
        <member name="T:WCell.RealmServer.NPCs.NPCConstants">
            <summary>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.TrainerBuyError.TrainerServiceUnavailable">
            <summary>
            "Trainer service %d unavailable"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.TrainerBuyError.InsufficientFunds">
            <summary>
            "Not enough money for trainer service %d"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.TrainerBuyError.NotEnoughSkillPoints">
            <summary>
            "Not enough skill points for trainer service %d"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.TrainerSpellState.Available">
            <summary>
            Green in the client Spell List
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.TrainerSpellState.Unavailable">
            <summary>
            Red in the client Spell List
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.TrainerSpellState.AlreadyLearned">
            <summary>
            Gray in the client Spell List
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.NPCMgr">
            <summary>
            Static helper and srcCont class for all NPCs and NPC-related information
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.DefaultNPCHealthFactor">
            <summary>
            Can be used to toughen up or soften down NPCs on servers with more of a "diablo feel"
            or custom servers.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.DefaultNPCDamageFactor">
            <summary>
            Can be used to toughen up or soften down NPCs on servers with more of a "diablo feel"
            or custom servers.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCMgr.DefaultFactionId">
            <summary>
            This is the default FactionId for all NPCs whose Faction could not be found/does not exist.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCMgr.DefaultFaction">
            <summary>
            This is the default faction for all NPCs whose Faction could not be found/does not exist.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.DefaultSpawnAmount">
            <summary>
            Default amount of NPCs to spawn if at one spawn point, if not specified otherwise
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.DefaultMinRespawnDelay">
            <summary>
            Default min delay in milliseconds after death of a unit to spawn a new one
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.DefaultMaxRespawnDelay">
            <summary>
            Default max delay in milliseconds after death of a unit to spawn a new one
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.NPCMgr.DefaultMaxHomeDistanceInCombat">
            <summary>
            If a mob is in combat and is further away from his home spot than this and there was no combat
            for DefaultCombatRetreatDelay, it will start to retreat.
            Don't use this in code other than for informational reasons.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.GiveUpCombatDelay">
            <summary>
            If a mob is in combat and is further away from his home spot than DefaultMaxHomeDistanceInCombat and there was no combat
            for this, it will start to evade (in millis).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.CombatEvadeDelay">
            <summary>
            The delay between the time the NPC finished fighting (everyone killed) and 
            evading (in millis).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.CustomEntries">
            <summary>
            Custom entries are put in a Dictionary, so that the Entries array won't explode
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.VehicleEntries">
            <summary>
            All Vehicle Entries 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.VehicleSeatEntries">
            <summary>
            All VehicleSeat Enteries
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.BarberShopStyles">
            <summary>
            All barber shop style entries.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.EquipmentEntries">
            <summary>
            Entries of equipment to be added to NPCs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.Mounts">
            <summary>
            All existing Mounts by their corresponding EntryId
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.SpawnPoolTemplates">
            <summary>
            All templates for spawn pools
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.AddEntry``1(System.UInt32,``0)">
            <summary>
            Creates a new custom NPCEntry with the given Id.
            The id must be hardcoded, so the client will always recognize it in its cache.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.AddEntry(System.UInt32,WCell.RealmServer.NPCs.NPCEntry)">
            <summary>
            Creates a new custom NPCEntry with the given Id.
            The id must be hardcoded, so the client will always recognize it in its cache.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.NPCTypeHandlers">
            <summary>
            NPCTypeHandlers indexed by set bits of NPCFlags.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.NPCSpawnTypeHandlers">
            <summary>
            NPCSpawnTypeHandlers indexed by set bits of NPCFlags.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.GetNPCTypeHandlers(WCell.RealmServer.NPCs.NPCEntry)">
            <summary>
            Returns all NPCTypeHandlers for the given NPCPrototype
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.CallNPCTypeHandlers(WCell.RealmServer.Entities.NPC)">
            <summary>
            Calls all NPCTypeHandlers of the given spawnEntry.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.GetNPCSpawnTypeHandlers(WCell.RealmServer.NPCs.NPCEntry)">
            <summary>
            Returns all NPCSpawnTypeHandlers for the given NPCPrototype
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.InitTypeHandlers">
            <summary>
            Initializes NPCTypeHandlers
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.NPCMgr.TrainerSpellTemplates">
            <summary>
            Trainer spell entries by trainer spell template id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.SpawnClosestSpawnEntry(WCell.RealmServer.Entities.IWorldLocation)">
            <summary>
            Spawns the pool to which the NPCSpawnEntry belongs which is closest to the given location
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.NPCMgr.TalkToFM(WCell.RealmServer.Entities.NPC,WCell.RealmServer.Entities.Character)">
            <summary>
            Checks which nodes are currently activated by the player and sends the results to the client.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Pets.IActivePetSettings">
            <summary>
            Settings for an active pet to be saved to DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.Pets.IActivePetSettings.PetSummonSpellId">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Pets.PermanentPetRecord">
            <summary>
            Record for Hunter pets with talents and everything
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.Pets.PermanentPetRecord.Spells">
             <summary>
            
             </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.InfinitePetRenames">
            <summary>
            Whether players are allowed to rename pets infinitely many times
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.MinPetTalentLevel">
            <summary>
            Need at least level 20 for a pet to have talents
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.MaxHunterPetLevelDifference">
            <summary>
            Hunter pets must not have less than ownerlevel - MaxMinionLevelDifference.
            They gain levels if they have less.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.PetExperienceOfOwnerPercent">
            <summary>
            Percentage of character exp that pets need to level.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.PetStaminaOfOwnerPercent">
            <summary>
            Percentage of character Stamina that gets added to the Pet's Stamina.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.PetArmorOfOwnerPercent">
            <summary>
            Percentage of character Armor that gets added to the Pet's Armor.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.PetAPOfOwnerPercent">
            <summary>
            Percentage of character RangedAttackPower that gets added to the Pet's MeleeAttackPower.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.PetResistanceOfOwnerPercent">
            <summary>
            Percentage of character Resistances that get added to the Pet's Resistances.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Pets.PetMgr.PetSpellDamageOfOwnerPercent">
            <summary>
            Percentage of character Spell Damage that gets added to the Pet's Resistances.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Pets.PetMgr.CheckForStableMasterCheats(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC)">
            <summary>
            Checks StableMaster interactions for cheating.
            </summary>
            <param name="chr">The character doing the interacting.</param>
            <param name="stableMaster">The StableMaster the character is interacting with.</param>
            <returns>True if the interaction checks out.</returns>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Pets.PetMgr.GetPetTalentPointsByLevel(System.Int32)">
            <summary>
            Calculates the number of base Talent points a pet should have
              based on its level.
            </summary>
            <param name="level">The pet's level.</param>
            <returns>The number of pet talent points.</returns>
        </member>
        <member name="P:WCell.RealmServer.NPCs.Pets.PetRecordBase`1.IsDirty">
            <summary>
            Dirty records have uncommitted changes
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.Pets.PetRecordBase`1.ActionButtons">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Pets.SummonedPetRecord">
            <summary>
            Summoned pets for which we only store ActionBar (and maybe name) settings
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Trainers.TrainerEntry">
            <summary>
            Represents everything an NPC trainer has to offer
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerEntry.TrainerType">
            <summary>
            The major type of trainer this is (Class, Profession, Secondary Skill, etc.)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerEntry.Message">
            <summary>
            TODO: Text dislayed in the upper panel of the client's trainer list menu.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerEntry.RequiredSpellId">
            <summary>
            The required profession or secondary skill that the character must have to learn from this Trainer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Trainers.TrainerEntry.SetupTrainer(WCell.RealmServer.Spells.Spell)">
            <summary>
            Determine Trainer-information, based on first Spell
            </summary>
            <param name="spell"></param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Trainers.TrainerEntry.CanTrain(WCell.RealmServer.Entities.Character)">
            <summary>
            Whether this NPC can train the character in their specialty.
            </summary>
            <returns>True if able to train.</returns>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Trainers.TrainerEntry.GetSpellEntry(WCell.Constants.Spells.SpellId)">
            <summary>
            Returns the TrainerSpellEntry from SpellsForSale with the given spellId, else null.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry">
            <summary>
            Represents something that a trainer can teach
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.Cost">
            <summary>
            The base cost of the spell at the trainer.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.RequiredSpellId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.RequiredLevel">
            <summary>
            The minimum level a character must have acheived in order to purchase this spell.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.RequiredSkillId">
            <summary>
            The required profession or secondary skill that this character must be trained in in order to purchase this spell.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.RequiredSkillAmount">
            <summary>
            The required level of skill that a character must have obtained in the RequiredSkill in order to purchase this spell.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.Spell">
            <summary>
            The spell that the character will learn upon purchase of this TrainerSpellEntry from a trainer.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.Index">
            <summary>
            The index of this Entry within the Trainer list
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.GetDiscountedCost(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC)">
            <summary>
            The price of the spell after Reputation discounts are applied.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Trainers.TrainerSpellEntry.GetTrainerSpellState(WCell.RealmServer.Entities.Character)">
            <summary>
            The availability of the spell for the spell list filter.
            </summary>
            <returns>Available, Unavailable, AlreadyKnown</returns>
        </member>
        <member name="F:WCell.RealmServer.NPCs.VehicleEntry.Id">
            <summary>
            This is *NOT* the EntryId of the NPCEntry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.VehicleEntry.Flags">
            <summary>
            flag, position 1
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.VehicleEntry.TurnSpeed">
            <summary>
            turn speed, position 2
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.VehicleEntry.PitchSpeed">
            <summary>
            pitchspeed, position 3
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vehicles.Vehicle.GetSeatFor(WCell.RealmServer.Entities.Unit)">
            <summary>
            Returns null if unit may not enter or there is no free seat available
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vehicles.Vehicle.FindSeatOccupiedBy(WCell.Core.EntityId)">
            <summary>
            Returns null if the passenger could not be found
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vehicles.Vehicle.FindSeatOccupiedBy(WCell.RealmServer.Entities.Unit)">
            <summary>
            Returns null if the unit could not be found
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vehicles.VehicleSeat.Enter(WCell.RealmServer.Entities.Unit)">
            <summary>
            Add Passenger
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vehicles.VehicleSeat.ClearSeat">
            <summary>
            Remove Passenger
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Vendors.VendorEntry.ItemsForSale">
            <summary>
            A list of VendorItemEtnries that can be bought at this Vendor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vendors.VendorEntry.GetVendorItem(System.UInt32)">
            <summary>
            Returns the VendorItemEntry with the given entryId if contained in the Vendor's ItemsForSale, else null.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vendors.VendorEntry.UseVendor(WCell.RealmServer.Entities.Character)">
            <summary>
            Character starts a trade-session with this Vendor
            </summary>
            <param name="chr"></param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vendors.VendorEntry.SellItem(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Item,System.Int32)">
            <summary>
            Tries to sell the given Item of the given Character
            </summary>
            <param name="chr">The seller.</param>
            <param name="item">May be null (will result into error message for chr)</param>
            <param name="amount">The amount of Item to sell.</param>
        </member>
        <member name="M:WCell.RealmServer.NPCs.Vendors.VendorEntry.CanPlayerSellItem(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Item,WCell.Constants.Items.SellItemError@)">
            <summary>
            Checks whether the given Item may be sold by the given
            Character and sends an Error reply if not
            </summary>
            <param name="chr"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Vendors.VendorItemEntry.StockAmount">
            <summary>
            The amount of available stacks
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Vendors.VendorItemEntry.BuyStackSize">
            <summary>
            The size of one stack
            </summary>
        </member>
        <member name="F:WCell.RealmServer.NPCs.Vendors.VendorItemEntry.StockRefillDelay">
            <summary>
            The time until the vendor restocks, after he/she ran out of this Item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.Vendors.VendorItemEntry.RemainingStockAmount">
            <summary>
            If this item has a limited supply available, this returns a number smaller than uint.MaxValue
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.WaypointEntry.Id">
            <summary>
            Id of this waypoint in the chain
            </summary>
        </member>
        <member name="P:WCell.RealmServer.NPCs.WaypointEntry.WaitTime">
            <summary>
            Time to wait at this point in milliseconds
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.MapTemplate">
            <summary>
            The template of a Map
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.Created">
            <summary>
            Called when a new Map of this MapInfo has been created.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.Started">
            <summary>
            Called after some Map has started
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.Spawning">
            <summary>
            Called when this Map is about to add default spawn points.
            The returned value determines whether spawning should commence or be skipped.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.Spawned">
            <summary>
            Called when this Map added all default spawns and objects.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.Stopping">
            <summary>
            Called when this Map is about to stop.
            The returned value determines whether the Map should stop.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.PlayerEntered">
            <summary>
            Called when the given Character enters this Map.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.PlayerLeft">
            <summary>
            Called when the given Character left this Map (Character might already be logging off).
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.PlayerBeforeDeath">
            <summary>
            Is called before a Character dies.
            If false is returned, the Character won't die.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.PlayerDied">
            <summary>
            Is called when the Target of the given action died
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.MapTemplate.PlayerResurrected">
            <summary>
            Is called when the given Character has been resurrected
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapTemplate.MaxPlayerCount">
            <summary>
            Maximum amount of players allowed in the map.
            See Difficulties for more information.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.MapTemplate.BattlegroundTemplate">
            <summary>
            The default BattlegroundTemplate, associated with this MapTemplate
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapTemplate.InstanceTemplate">
            <summary>
            The default InstanceTemplate, associated with this MapInfo
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapTemplate.Bounds">
            <summary>
            The BoundingBox around the entire Map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.MapTemplate.IsInstance">
            <summary>
            All zone ids within the Map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.MapTemplate.IsBattleground">
            <summary>
            Battleground or Arena
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.MapTemplate.MayEnter(WCell.RealmServer.Entities.Character)">
            <summary>
            Does all the default checks
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Global.World">
            <summary>
            Manages the areas and maps that make up the game world, and tracks all entities in all maps.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.World.WorldPaused">
            <summary>
            Is called after the World paused or unpaused completely and before the PauseLock is released.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.World.Saved">
            <summary>
            Is called after the World has been saved and before the PauseLock is released (eg. during shutdown)
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Global.World.Broadcasted">
            <summary>
            Is called when the given Chatter (can be null) broadcasts something
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.World.Instance">
            <summary>
            Only used for implementing interfaces
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.World.PauseLock">
            <summary>
            While pausing, resuming and saving, the World locks against this Lock, 
            so resuming cannot start before all Contexts have been paused
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.World.PauseObject">
            <summary>
            Global PauseObject that all Contexts wait for when pausing
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.MapTemplates">
            <summary>
            Gets the collection of maps.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.ZoneTemplates">
            <summary>
            Gets the collection of zones.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.CharacterCount">
            <summary>
            The number of characters in the game.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.HordeCharCount">
            <summary>
            The number of online characters that belong to the Horde
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.AllianceCharCount">
            <summary>
            The number of online characters that belong to the Alliance
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.StaffMemberCount">
            <summary>
            The number of online staff characters
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.TaskQueue">
            <summary>
            Task queue for global tasks and timers
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.World.ExecuteWhilePaused(System.Action)">
            <summary>
            Pauses the World, executes the given Action, unpauses the world again and blocks while doing so
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.World.IsSaving">
            <summary>
            Indicates whether the world is currently saving.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.World.Save(System.Boolean)">
            <summary>
            Blocks until all pending changes to dynamic Data have been saved.
            </summary>
            <param name="beforeShutdown">Whether the server is about to shutdown.</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.Resync">
            <summary>
            Does some things to get the World back into sync
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.World.AddNamedEntity(WCell.RealmServer.Entities.INamedEntity)">
            <summary>
            Add a NamedEntity
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.World.AddCharacter(WCell.RealmServer.Entities.Character)">
            <summary>
            Add a character to the world manager.
            </summary>
            <param name="chr">the character to add</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.RemoveCharacter(WCell.RealmServer.Entities.Character)">
            <summary>
            Removes a character from the world manager.
            </summary>
            <param name="chr">the character to stop tracking</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetCharacter(System.UInt32)">
            <summary>
            Gets a <see cref="T:WCell.RealmServer.Entities.Character" /> by entity ID.
            </summary>
            <param name="lowEntityId">EntityId.Low of the Character to be looked up</param>
            <returns>the <see cref="T:WCell.RealmServer.Entities.Character" /> of the given ID; null otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetCharacter(System.String,System.Boolean)">
            <summary>
            Gets a character by name.
            </summary>
            <param name="name">the name of the character to get</param>
            <returns>the <see cref="T:WCell.RealmServer.Entities.Character" /> object representing the character; null if not found</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetNamedEntity(System.String,System.Boolean)">
            <summary>
            Gets a character by name.
            </summary>
            <param name="name">the name of the character to get</param>
            <returns>the <see cref="T:WCell.RealmServer.Entities.Character" /> object representing the character; null if not found</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetAllCharacters">
            <summary>
            Gets all current characters.
            </summary>
            <returns>a list of <see cref="T:WCell.RealmServer.Entities.Character" /> objects</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetAllNamedEntities">
            <summary>
            Gets all current characters.
            </summary>
            <returns>a list of <see cref="T:WCell.RealmServer.Entities.Character" /> objects</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetCharactersOfRace(WCell.Constants.RaceId)">
            <summary>
            Gets an enumerator of characters based on their race.
            </summary>
            <param name="entRace">the race to search for</param>
            <returns>a list of <see cref="T:WCell.RealmServer.Entities.Character" /> objects belonging to the given race</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetCharactersOfClass(WCell.Constants.ClassId)">
            <summary>
            Gets an enumerator of characters based on their class.
            </summary>
            <param name="entClass">the class to search for</param>
            <returns>a list of <see cref="T:WCell.RealmServer.Entities.Character" /> objects who are of the given class</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetCharactersOfLevel(System.UInt32)">
            <summary>
            Gets an enumerator of characters based on their level.
            </summary>
            <param name="level">the level to search for</param>
            <returns>a list of <see cref="T:WCell.RealmServer.Entities.Character" /> objects who are of the given level</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetCharactersStartingWith(System.String)">
            <summary>
            Gets an enumerator of characters based on what their name starts with.
            </summary>
            <param name="nameStarts">the starting part of the name to search for</param>
            <returns>a list of <see cref="T:WCell.RealmServer.Entities.Character" /> objects whose name starts with the given string</returns>
        </member>
        <member name="P:WCell.RealmServer.Global.World.Maps">
            <summary>
            Gets all default (non-instanced) Maps
            </summary>
            <returns>a collection of all current maps</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetAllMaps">
            <summary>
            All Continents and Instances, including Battlegrounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.AddMap(WCell.RealmServer.Global.Map)">
            <summary>
            Adds the map, associated with its unique Id
            </summary>
            <param name="map">the map to add</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetNonInstancedMap(WCell.Constants.World.MapId)">
            <summary>
            Gets a normal Map by its Id
            </summary>
            <returns>the <see cref="T:WCell.RealmServer.Global.Map" /> object; null if the ID is not valid</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetMap(WCell.RealmServer.Global.IMapId)">
            <summary>
            Gets a normal Map by its Id
            </summary>
            <returns>the <see cref="T:WCell.RealmServer.Global.Map" /> object; null if the ID is not valid</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetMapTemplate(WCell.Constants.World.MapId)">
            <summary>
            Gets map info by ID.
            </summary>
            <param name="mapID">the ID to the map to get</param>
            <returns>the <see cref="T:WCell.RealmServer.Global.MapTemplate" /> object for the given map ID</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetZoneInfo(WCell.Constants.World.ZoneId)">
            <summary>
            Gets zone template by ID.
            </summary>
            <param name="zoneID">the ID to the zone to get</param>
            <returns>the <see cref="T:WCell.RealmServer.Global.Zone" /> object for the given zone ID</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.GetSite(WCell.Constants.World.ZoneId)">
            <summary>
            Gets the first significant location within the Zone with the given Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Global.World.CallOnAllChars(System.Action{WCell.RealmServer.Entities.Character},System.Action)">
            <summary>
            Calls the given Action on all currently logged in Characters
            </summary>
            <param name="action"></param>
            <param name="doneCallback">Called after the action was called on everyone.</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.CallOnAllChars(System.Action{WCell.RealmServer.Entities.Character})">
            <summary>
            Calls the given Action on all currently logged in Characters
            </summary>
            <param name="action"></param>
            <param name="doneCallback">Called after the action was called on everyone.</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.CallOnAllMaps(System.Action{WCell.RealmServer.Global.Map},System.Action)">
            <summary>
            Calls the given Action on all currently existing Maps within each Map's context
            </summary>
            <param name="action"></param>
            <param name="doneCallback">Called after the action was called on all Maps.</param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.CallOnAllMaps(System.Action{WCell.RealmServer.Global.Map})">
            <summary>
            Calls the given Action on all currently existing Maps within each Map's context
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Global.World.IsEventActive(System.UInt32)">
            <summary>
            Checks if the event is currently active
            </summary>
            <param name="eventId">Id of the event to check</param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Global.ZoneTemplate">
            <summary>
            Holds information about a zone, an area within a map.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.ZoneTemplate.WorldStates">
            <summary>
            All WorldStates that are active in this Zone
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.ZoneTemplate.Site">
            <summary>
            The location of a significant site within this Zone.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.ZoneTemplate.Flags">
            <summary>
            The flags for the zone.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.ZoneTemplate.Ownership">
            <summary>
            Who does this Zone belong to (if anyone)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneTemplate.IsPvP">
            <summary>
            Whether this is a PvP zone.
            Improve: http://www.wowwiki.com/PvP_flag
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneTemplate.IsArena">
            <summary>
            Whether or not the zone is an arena.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneTemplate.IsSanctuary">
            <summary>
            Whether or not the zone is a sanctuary.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneTemplate.IsCity">
            <summary>
            Whether or not the zone is a city.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneTemplate.IsHostileTo(WCell.RealmServer.Entities.Character)">
            <summary>
            Whether this Zone is hostile towards the given Character
            </summary>
            <param name="chr">The Character in question.</param>
            <returns>Whether or not to set the PvP flag.</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneTemplate.OnPlayerEntered(WCell.RealmServer.Entities.Character,WCell.RealmServer.Global.Zone)">
            <summary>
            Called when a player enters the zone.
            </summary>
            <param name="chr">the character entering the zone</param>
            <param name="oldZone">the zone the character came from</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneTemplate.OnPlayerLeft(WCell.RealmServer.Entities.Character,WCell.RealmServer.Global.Zone)">
            <summary>
            Called when a player leaves the zone.
            </summary>
            <param name="chr">the character leaving the zone</param>
            <param name="oldZone">the zone the character just left</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneTemplate.FinalizeZone">
            <summary>
            Called after ZoneInfo was created
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.InstancedMap.InstanceId">
            <summary>
            The instances unique identifier, raid and instance IDs are seperate
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.InstancedMap.IsActive">
            <summary>
            Whether this Instance is active.
            Once the last boss has been killed, an instance turns inactive.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.InstancedMap.ShouldStop">
            <summary>
            Instances are stopped manually
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.InstancedMap.IsRaid">
            <summary>
            If its a saving type instance, raid or heroic
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.InstancedMap.IsPVPArea">
            <summary>
            If its a PVP area, BattleGround or Arena
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.InstancedMap.CanReset(WCell.RealmServer.Entities.Character)">
            <summary>
            
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Global.InstancedMap.TeleportInside(WCell.RealmServer.Entities.Character)">
            <summary>
            Teleports player into an instance
            </summary>
            <param name="chr"></param>
        </member>
        <member name="T:WCell.RealmServer.Global.Map">
            <summary>
            Represents a continent or Instance (including Battleground instances), that may or may not contain Zones.
            X-Axis: South -> North
            Y-Axis: East -> West
            Z-Axis: Down -> Up
            Orientation: North = 0, 2*Pi, counter-clockwise
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.AutoSpawnMaps">
            <summary>
            Whether to spawn NPCs and GOs immediately, whenever a new Map gets activated the first time.
            For developing you might want to toggle this off and use the "Map Spawn" command ingame to spawn the map, if necessary.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.DefaultUpdateDelay">
            <summary>
            Default update delay in milliseconds
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.CharacterUpdateEnvironmentTicks">
            <summary>
            Every how many ticks to send UpdateField-changes to Characters
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.ScanInactiveAreasDefault">
            <summary>
            Whether to have NPCs in inactive areas scan for enemies
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.CanNPCsEvadeDefault">
            <summary>
            Whether NPCs can evade and run back to their spawn point when pulled too far away
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.MainZones">
            <summary>
            List of all Main zones (that have no parent-zone but only children)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.Zones">
            <summary>
            All the Zone-instances within this map.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.Map.FirstTaxiNode">
            <summary>
            The first TaxiPath-node of this Map (or null).
            This is used to send individual Taxi Maps to Players.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.#ctor(WCell.RealmServer.Global.MapTemplate)">
            <summary>
            Creates a map from the given map info.
            </summary>
            <param name="rgnTemplate">the info for this map to use</param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.InitMap">
            <summary>
            Method is called after Creation of Map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.InstanceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.DefaultZone">
            <summary>
            The first MainZone (for reference and Maps that only contain one Zone)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.Bounds">
            <summary>
            The bounds of this map.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.Name">
            <summary>
            The display name of this map.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.Id">
            <summary>
            The map ID of this map.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.RequiredClient">
            <summary>
            The minimum required ClientId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.IsInstance">
            <summary>
            Whether or not the map is instanced
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.Type">
            <summary>
            The type of the map (normal, battlegrounds, instance, etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.Difficulty">
            <summary>
            Difficulty of the instance
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.MinLevel">
            <summary>
            The minimum level a player has to be to enter the map (instance)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.MaxLevel">
            <summary>
            The maximum level a player can be to enter the map (instance)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.MaxPlayerCount">
            <summary>
            Maximum number of players allowed in the map (instance)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.IsRunning">
            <summary>
            Whether or not the map is currently processing object updates
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.IsInContext">
            <summary>
            Indicates whether the current Thread is the Map's update-thread.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.PlayerCount">
            <summary>
            The amount of all Players in this Map (excludes Staff members)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.CharacterCount">
            <summary>
            The amount of all Characters in this Map (includes Staff members)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.AllianceCount">
            <summary>
            The number of Alliance Players currently in the map (not counting Staff)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.HordeCount">
            <summary>
            The number of Alliance Players currently in the map (not counting Staff)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.TickCount">
            <summary>
            Amount of passed ticks in this Map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.Characters">
            <summary>
            Don't modify the List.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.XpCalculator">
            <summary>
            The calculator used to compute Xp given for killing NPCs
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.ShouldStop">
            <summary>
            Called whenever an object is removed from the map to determine whether it may stop now.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.UpdateInactiveAreas">
            <summary>
            Whether to also update Nodes in areas without Players.
            Default: <see cref="F:WCell.RealmServer.Global.Map.UpdateInactiveAreasDefault"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.ScanInactiveAreas">
            <summary>
            Whether to let NPCs scan inactive Nodes for hostility.
            Default: <see cref="F:WCell.RealmServer.Global.Map.ScanInactiveAreasDefault"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.UpdateDelay">
            <summary>
            Time in milliseconds between the beginning of 
            one Map-Update and the next.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.ObjectCount">
            <summary>
            Total amount of objects within this Map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.CanNPCsEvade">
            <summary>
            Whether NPCs in this Map will try to evade after Combat
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.IsAIFrozen">
            <summary>
            Toggles all NPCs to be invul and idle
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.Start">
            <summary>
            Starts the Map's update-, message- and timer- loop
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.Stop">
            <summary>
            Stops map updating and stops the update delta measuring
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.EnsureContext">
            <summary>
            Ensures execution within the map.
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown if the calling thread isn't the map thread</exception>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.EnsureNoContext">
            <summary>
            Ensures execution outside the Map-context.
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown if the calling thread is the map thread</exception>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.EnsureNotUpdating">
            <summary>
            Ensures that Map is not updating.
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown if the Map is currently updating</exception>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.IsSpawned">
            <summary>
            Whether this Map's NPCs and GOs have been fully spawned
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RemoveSpawnPool``5(``4)">
            <summary>
            Called by SpawnPool.
            Use SpawnPool.Remove* methods to remove pools.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.ClearLater">
            <summary>
            Adds a message to the Map to clear it
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RemoveAll">
            <summary>
            Removes all Objects, NPCs and Spawns from this Map.
            </summary>
            <remarks>Requires map context</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RemoveObjects">
            <summary>
            Removes all Objects and NPCs from the Map
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.Reset">
            <summary>
            Clears all Objects and NPCs and spawns the default ones again
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.SpawnMapLater">
            <summary>
            If not added already, this method adds all default GameObjects and NPC spawnpoints to this map.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.SpawnMap">
            <summary>
            
            </summary>
            <see cref="M:WCell.RealmServer.Global.Map.SpawnMapLater"/>
            <remarks>Requires map context</remarks>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.LastUpdateTime">
            <summary>
            The time in seconds when the last 
            Update started.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RegisterUpdatable(WCell.Core.Timers.IUpdatable)">
            <summary>
            Adds a new Updatable right away.
            Requires Map context.
            <see cref="M:WCell.RealmServer.Global.Map.RegisterUpdatableLater(WCell.Core.Timers.IUpdatable)"/>
            </summary>
            <param name="updatable"></param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.UnregisterUpdatable(WCell.Core.Timers.IUpdatable)">
            <summary>
            Unregisters an Updatable right away.
            In map context.
            <see cref="M:WCell.RealmServer.Global.Map.UnregisterUpdatableLater(WCell.Core.Timers.IUpdatable)"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RegisterUpdatableLater(WCell.Core.Timers.IUpdatable)">
            <summary>
            Registers the given Updatable during the next Map Tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.UnregisterUpdatableLater(WCell.Core.Timers.IUpdatable)">
            <summary>
            Unregisters the given Updatable during the next Map Update
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.CallDelayed(System.Int32,System.Action)">
            <summary>
            Executes the given action after the given delay within this Map's context.
            </summary>
            <remarks>Make sure that once the timeout is hit, the given action is executed in the correct Map's context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.CallPeriodically(System.Int32,System.Action)">
            <summary>
            Executes the given action after the given delay within this Map's context.
            </summary>
            <remarks>Make sure that once the timeout is hit, the given action is executed in the correct Map's context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddMessage(System.Action)">
            <summary>
            Adds a message to the message queue for this map.
            TODO: Consider extra-message for Character that checks whether Char is still in Map?
            </summary>
            <param name="action">the action to be enqueued</param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddMessage(WCell.Util.Threading.IMessage)">
            <summary>
            Adds a message to the message queue for this map.
            </summary>
            <param name="msg">the message</param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.MapUpdateCallback(System.Object)">
            <summary>
            Callback for executing updates of the map, which includes updates for all inhabiting objects.
            </summary>
            <param name="state">the <see cref="T:WCell.RealmServer.Global.Map" /> to update</param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.UpdateMap">
            <summary>
            Can be overridden to add any kind of to be executed every Map-tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.ForceUpdateCharacters">
            <summary>
            Instantly updates all active Characters' environment: Collect environment info and send update deltas
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.PartitionSpace">
            <summary>
            Partitions the space of the zone.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetNodeFromPoint(WCell.Util.Graphics.Vector3@)">
            <summary>
            Gets the partitioned node in which the point lies.
            </summary>
            <param name="pt">the point to search for</param>
            <returns>a <see cref="T:WCell.RealmServer.Global.ZoneSpacePartitionNode" /> if found; null otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.IsPointInMap(WCell.Util.Graphics.Vector3@)">
            <summary>
            Checks to see if the supplied location is within this zone's bounds.
            </summary>
            <param name="point">the point to check for containment</param>
            <returns>true if the location is within the bounds, false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetZone(WCell.Constants.World.ZoneId)">
            <summary>
            Gets a zone by its area ID.
            </summary>
            <param name="id">the ID of the zone to search for</param>
            <returns>the Zone object representing the specified ID; null if the zone was not found</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInRadius(WCell.Util.Graphics.Vector3,System.Single,WCell.Constants.Updates.ObjectTypes,System.UInt32,System.Int32)">
            <summary>
            Gets all entities in a radius from the origin, according to the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="radius">the area to check in</param>
            <param name="filter">the entities to return</param>
            <param name="limit">Max amount of objects to search for</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInRadius``1(WCell.Util.Graphics.Vector3,System.Single,System.UInt32,System.Int32)">
            <summary>
            Gets all entities in a radius from the origin, according to the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="radius">the area to check in</param>
            <param name="limit">Max amount of objects to search for</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInRadius``1(WCell.Util.Graphics.Vector3,System.Single,System.Func{``0,System.Boolean},System.UInt32,System.Int32)">
            <summary>
            Gets all entities in a radius from the origin, according to the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="radius">the area to check in</param>
            <param name="filter">the entities to return</param>
            <param name="limit">Max amount of objects to search for</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInRadius(WCell.Util.Graphics.Vector3,System.Single,System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean},System.UInt32,System.Int32)">
            <summary>
            Gets all objects in a radius around the origin, regarding the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="radius">the area to check in</param>
            <param name="filter">a delegate to filter search results</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInBox(WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.BoundingBox,WCell.Constants.Updates.ObjectTypes,System.Int32,System.UInt32)">
            <summary>
            Gets all entities in a radius from the origin, according to the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="box">the BoundingBox object that matches the area we want to search in</param>
            <param name="filter">the entities to return</param>
            <param name="limit">max amount of objects to search for</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInBox``1(WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.BoundingBox,System.UInt32,System.Int32)">
            <summary>
            Gets all entities in a radius from the origin, according to the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="box">the BoundingBox object that matches the area we want to search in</param>
            <param name="limit">Max amount of objects to search for</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInBox``1(WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.BoundingBox,System.Func{``0,System.Boolean},System.UInt32,System.Int32)">
            <summary>
            Gets all entities in a radius from the origin, according to the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="box">the BoundingBox object that matches the area we want to search in</param>
            <param name="filter">the entities to return</param>
            <param name="limit">Max amount of objects to search for</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObjectsInBox(WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.BoundingBox,System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean},System.UInt32,System.Int32)">
            <summary>
            Gets all objects in a radius around the origin, regarding the search filter.
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="origin">the point to search from</param>
            <param name="box">the BoundingBox object that matches the area we want to search in</param>
            <param name="filter">a delegate to filter search results</param>
            <returns>a linked list of the entities which were found in the search area</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.IterateObjects(WCell.Util.Graphics.Vector3,System.Single,System.UInt32,System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean})">
            <summary>
            Iterates over all objects in the given radius around the given origin.
            If the predicate returns false, iteration is cancelled and false is returned.
            </summary>
            <param name="origin"></param>
            <param name="radius"></param>
            <param name="predicate">Returns whether to continue iteration.</param>
            <returns>Whether Iteration was not cancelled (usually indicating that we did not find what we were looking for).</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.SendPacketToArea(WCell.RealmServer.RealmPacketOut,WCell.Util.Graphics.Vector3@,System.UInt32)">
            <summary>
            Sends a packet to all nearby characters.
            </summary>
            <param name="packet">the packet to send</param>
            <param name="includeSelf">whether or not to send the packet to ourselves (if we're a character)</param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.SendPacketToMap(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends a packet to all characters in the map
            </summary>
            <param name="packet">the packet to send</param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RemoveObjectLater(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Removes an entity from the zone.
            </summary>
            <param name="obj">the entity to remove</param>
            <returns>true if the entity was removed; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddObjectNow(WCell.RealmServer.Entities.WorldObject,WCell.Util.Graphics.Vector3)">
            <summary>
            Adds the given Object to this Map.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddObjectNow(WCell.RealmServer.Entities.WorldObject,WCell.Util.Graphics.Vector3@)">
            <summary>
            Adds the given Object to this Map.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddObjectNow(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Adds the given Object to this Map.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetObject(WCell.Core.EntityId)">
            <summary>
            Gets a WorldObject by its ID.
            Requires map context.
            </summary>
            <param name="id">the ID of the WorldObject</param>
            <returns>The corresponding <see cref="T:WCell.RealmServer.Entities.WorldObject" /> if found; null otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.OnEnter(WCell.RealmServer.Entities.Character)">
            <summary>
            Called when a Character object is added to the Map
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.OnLeave(WCell.RealmServer.Entities.Character)">
            <summary>
            Called when a Character object is removed from the Map
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.RemoveObjectNow(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Removes an entity from this Map, instantly.
            Also make sure that the given Object is actually within this Map.
            Requires map context.
            </summary>
            <param name="obj">the entity to remove</param>
            <returns>true if the entity was removed; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.CopyObjects">
            <summary>
            Returns all objects within the Map.
            </summary>
            <remarks>Requires map context.</remarks>
            <returns>an array of all objects in the map</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetNearestGameObject(WCell.Util.Graphics.Vector3,WCell.Constants.GameObjects.GOEntryId,System.UInt32)">
            <summary>
            Returns the specified GameObject that is closest to the given point.
            </summary>
            <remarks>Requires map context.</remarks>
            <returns>the closest GameObject to the given point, or null if none found.</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetNearestNPC(WCell.Util.Graphics.Vector3@,WCell.Constants.NPCs.NPCId)">
            <summary>
            Returns the specified NPC that is closest to the given point.
            </summary>
            <remarks>Requires map context.</remarks>
            <returns>the closest NPC to the given point, or null if none found.</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetNearestSpiritHealer(WCell.Util.Graphics.Vector3@)">
            <summary>
            Returns the spirit healer that is closest to the given point.
            </summary>
            <remarks>Requires map context.</remarks>
            <returns>the closest spirit healer, or null if none found.</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetGOWithSpellFocus(WCell.Util.Graphics.Vector3,WCell.Constants.Spells.SpellFocus,System.Single,System.UInt32)">
            <summary>
            Gets the first GO with the given SpellFocus within the given radius around the given position.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddObjectLater(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Enqueues an object to be moved into this Map during the next Map-update
            </summary>
            <param name="obj">the entity to add</param>
            <returns>true if the entity was added, false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.TransferObjectLater(WCell.RealmServer.Entities.WorldObject,WCell.Util.Graphics.Vector3)">
            <summary>
            Enqueues an object to be removed from its old map (if already added to one) and 
            moved into this one during the next Map-updates of the maps involved. 
            </summary>
            <param name="obj">the object to add</param>
            <returns>true if the entity was added, false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.MoveObject(WCell.RealmServer.Entities.WorldObject,WCell.Util.Graphics.Vector3@)">
            <summary>
            Moves the given object to the given position (does not animate movement)
            </summary>
            <param name="newPos">the position to move the entity to</param>
            <param name="obj">the entity to move</param>
            <returns>true if the entity was moved, false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.IsEventActive(System.UInt32)">
            <summary>
            Checks if the event is currently active
            </summary>
            <param name="eventId">Id of the event to check</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.GetEnumerator">
            <summary>
            Enumerates all objects within the map.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddMessageAndWait(System.Action)">
            <summary>
            Adds the given message to the map's message queue and does not return 
            until the message is processed.
            </summary>
            <remarks>Make sure that the map is running before calling this method.</remarks>
            <remarks>Must not be called from the map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.AddMessageAndWait(WCell.Util.Threading.IMessage)">
            <summary>
            Adds the given message to the map's message queue and does not return 
            until the message is processed.
            </summary>
            <remarks>Make sure that the map is running before calling this method.</remarks>
            <remarks>Must not be called from the map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.WaitOneTick">
            <summary>
            Waits for one map tick before returning.
            </summary>
            <remarks>Must not be called from the map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.WaitTicks(System.Int32)">
            <summary>
            Waits for the given amount of ticks.
            One tick might take 0 until Map.UpdateSpeed milliseconds.
            </summary>
            <remarks>Make sure that the map is running before calling this method.</remarks>
            <remarks>Must not be called from the map context.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Global.Map.IsDisposed">
            <summary>
            Indicates whether this Map is disposed. 
            Disposed Maps may not be used any longer.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.SendMessage(System.String)">
            <summary>
            Sends the given message to everyone
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.SendMessage(System.String,System.Object[])">
            <summary>
            Sends the given message to everyone
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.OnPlayerDeath(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Is called whenever a Character dies.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.OnHonorableKill(WCell.RealmServer.Misc.IDamageAction)">
            <summary>
            Is called whenever an honorable character was killed by another character
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Global.Map.OnNPCDied(WCell.RealmServer.Entities.NPC)">
            <summary>
            Is called whenever an NPC dies
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapDifficultyEntry.BindingType">
            <summary>
            Softly bound instances can always be reset but you only x times per hour.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapDifficultyDBCEntry.RequirementString">
            <summary>
            You must have level...
            You must have Key of...
            Heroid Difficulty requires completion of...
            You must complete the quest...
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapDifficultyDBCEntry.ResetTime">
            <summary>
            Automatic reset-time in seconds.
            0 for non-raid Dungeons
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.MapDifficultyDBCEntry.MaxPlayerCount">
            <summary>
            Might be 0 (have to use MapInfo.MaxPlayerCount)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.IRealmMessage">
            <summary>
            Defines the interface of a message.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.IRealmMessage.Boundary">
            <summary>
            Indicates where the message is valid.
            Mapal messages must be disposed when object is moved to a different Map.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.IRealmMessage.Execute">
            <summary>
            Executes the message.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.RealmMessage">
            <summary>
            Defines a message with no input parameters.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage.Obtain(System.Action)">
            <summary>
            Returns a recycled or new RealmMessage object with the given callback.
            TODO: Object recycling
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage.#ctor(System.Action)">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage.#ctor(System.Action,WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage.Callback">
            <summary>
            The callback that is called when the message is executed.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage.Execute">
            <summary>
            Executes the message, calling any callbacks that are bound.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.WaitRealmMessage">
            <summary>
            Rather performance-hungry message to ensure that a task
            executed before continuing
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.WaitRealmMessage.Wait">
            <summary>
            Waits until this RealmMessage executed.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.RealmMessage1`1">
            <summary>
            Defines a message with one input parameter.
            </summary>
            <typeparam name="T1">the type of the first input parameter</typeparam>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage1`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage1`1.#ctor(System.Action{`0})">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage1`1.#ctor(`0,System.Action{`0})">
            <summary>
            Constructs a message with the specific callback and input parameter.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage1`1.#ctor(`0,System.Action{`0},WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback and input parameter.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage1`1.Callback">
            <summary>
            The callback that is called when the message is executed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage1`1.Parameter1">
            <summary>
            The first input parameter.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage1`1.Execute">
            <summary>
            Executes the message, calling any callbacks that are bound, passing the given input parameters.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.#ctor(System.Action{`0,`1})">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.#ctor(System.Action{`0,`1},WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.#ctor(`0,`1,System.Action{`0,`1})">
            <summary>
            Constructs a message with the specific callback and input parameters.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
            <param name="param2">the second input parameter</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.#ctor(`0,`1,System.Action{`0,`1},WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback and input parameters.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
            <param name="param2">the second input parameter</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.#ctor(`0,`1)">
            <summary>
            Constructs a message with the specific callback and input parameters.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
            <param name="param2">the second input parameter</param>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage2`2.Callback">
            <summary>
            The callback that is called when the message is executed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage2`2.Parameter1">
            <summary>
            The first input parameter.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage2`2.Parameter2">
            <summary>
            The second input parameter.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage2`2.Execute">
            <summary>
            Executes the message, calling any callbacks that are bound, passing the given input parameters.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage3`3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage3`3.#ctor(System.Action{`0,`1,`2})">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage3`3.#ctor(System.Action{`0,`1,`2},WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage3`3.#ctor(`0,`1,`2,System.Action{`0,`1,`2},WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback and input parameters.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
            <param name="param2">the second input parameter</param>
            <param name="param3">the third input parameter</param>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage3`3.Callback">
            <summary>
            The callback that is called when the message is executed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage3`3.Parameter1">
            <summary>
            The first input parameter.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage3`3.Parameter2">
            <summary>
            The second input parameter.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage3`3.Parameter3">
            <summary>
            The third input parameter.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage3`3.Execute">
            <summary>
            Executes the message, calling any callbacks that are bound, passing the given input parameters.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage4`4.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage4`4.#ctor(System.Action{`0,`1,`2,`3})">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage4`4.#ctor(System.Action{`0,`1,`2,`3},WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage4`4.#ctor(System.Action{`0,`1,`2,`3},`0,`1,`2,`3,WCell.RealmServer.Global.RealmMessageBoundary)">
            <summary>
            Constructs a message with the specific callback and input parameters.
            </summary>
            <param name="callback">the callback to invoke when the message is executed</param>
            <param name="param1">the first input parameter</param>
            <param name="param2">the second input parameter</param>
            <param name="param3">the third input parameter</param>
            <param name="param4">the fourth input parameter</param>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage4`4.Callback">
            <summary>
            The callback that is called when the message is executed.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage4`4.Parameter1">
            <summary>
            The first input parameter.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage4`4.Parameter2">
            <summary>
            The second input parameter.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage4`4.Parameter3">
            <summary>
            The third input parameter.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.RealmMessage4`4.Parameter4">
            <summary>
            The fourth input parameter.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.RealmMessage4`4.Execute">
            <summary>
            Executes the message, calling any callbacks that are bound, passing the given input parameters.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.PathNode">
            <summary>
            Represents a Node in the Taxi-network (can also be considered a "station")
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.PathNode.Paths">
            <summary>
            All Paths from this Node to its neighbour Nodes
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.TerrainMgr.Provider">
            <summary>
            Use InitializationPass.First in Addon to set a custom provider
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.TerrainMgr.InitTerrain">
            <summary>
            Called by World
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.CharacterChangedHandler">
            <summary>
            Delegate used for events when a <see cref="T:WCell.RealmServer.Entities.Character" /> is changed, like logging in or out.
            </summary>
            <param name="chr">the <see cref="T:WCell.RealmServer.Entities.Character" /> being changed</param>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldEvent">
            <summary>
            Holds all information regarding a World Event
            such as Darkmoon Faire
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.Id">
            <summary>
            Id of the game event
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.From">
            <summary>
            Absolute start date, the event will never start before
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.Until">
            <summary>
            Absolute end date, the event will never start after
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent._Occurence">
            <summary>
            Do not use, time in minutes read from database.
            Instead you should use TimeSpan <seealso cref="F:WCell.RealmServer.Global.WorldEvent.Occurence"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent._Length">
            <summary>
            Do not use, time in minutes read from database.
            Instead you should use TimeSpan <seealso cref="F:WCell.RealmServer.Global.WorldEvent.Duration"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.Occurence">
            <summary>
            Delay in minutes between occurences of the event
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.Duration">
            <summary>
            Length in minutes of the event
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.HolidayId">
            <summary>
            Client side holiday id
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEvent.Description">
            <summary>
            Generally the event's name
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldEventNPC">
            <summary>
            Holds all information regarding a spawn
            involved in a WorldEvent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventNPC.Guid">
            <summary>
            Spawn id of the object
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventNPC._eventId">
            <summary>
            ID of the world event relating to this entry
            as found in the database, negative values mean
            we should despawn
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventNPC.EventId">
            <summary>
            ID of the world event relating to this entry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventNPC.Spawn">
            <summary>
            True if we should spawn this entry
            False if we should despawn it
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldEventGameObject">
            <summary>
            Holds all information regarding a spawn
            involved in a WorldEvent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventGameObject.Guid">
            <summary>
            Spawn id of the object
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventGameObject._eventId">
            <summary>
            ID of the world event relating to this entry
            as found in the database, negative values mean
            we should despawn
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventGameObject.EventId">
            <summary>
            ID of the world event relating to this entry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventGameObject.Spawn">
            <summary>
            True if we should spawn this entry
            False if we should despawn it
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldEventNpcData">
            <summary>
            Holds all information regarding a change of model
            or equipment for a WorldEvent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventNpcData.Guid">
            <summary>
            Spawn id of the object
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventNpcData.EventId">
            <summary>
            ID of the world event relating to this entry
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldEventQuest">
            <summary>
            Holds all information regarding a quest
            involved in a WorldEvent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventQuest.QuestId">
            <summary>
            Id of the quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldEventQuest.EventId">
            <summary>
            ID of the world event relating to this entry
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldEventMgr">
            <summary>
            Manages world events
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldEventMgr.LoadAll">
            <summary>
            Loads the world events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldInstanceCollection`2.GetInstance(`0,System.UInt32)">
            <summary>
            Gets an instance
            </summary>
            <returns>the <see cref="T:WCell.RealmServer.Global.Map" /> object; null if the ID is not valid</returns>s
        </member>
        <member name="M:WCell.RealmServer.Global.WorldInstanceCollection`2.GetOrCreateInstances(`0)">
            <summary>
            
            </summary>
            <param name="map"></param>
            <returns></returns>
            <remarks>Never returns null</remarks>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldLocationMgr">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldLocationMgr.WorldLocations">
            <summary>
            All world locations definition
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.WorldLocationMgr.LocationCache">
            <summary>
            For faster iteration (Do we even need the dictionary?)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldLocationMgr.Initialize">
            <summary>
            Depends on Table-Creation (Third)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldLocationMgr.Get(System.String)">
            <summary>
            Searches in loaded world locations for a specific world location name
            </summary>
            <param name="name">Name of the location to search</param>
            <returns>WorldLocation for the selected location. Returns null if not found</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldLocationMgr.GetFirstMatch(System.String)">
            <summary>
            Gets the first <see cref="T:WCell.RealmServer.Global.WorldZoneLocation"/> matching the given name parts
            </summary>
            <param name="partialName"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldLocationMgr.CreateTeleMenu">
            <summary>
            Creates a GossipMenu of all locations
            </summary>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Global.WorldZoneLocation">
            <summary>
            World locations are specific game locations that can be accessed with teleport command.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.WorldZoneLocation.ZoneTemplate">
            <summary>
            The Zone to which this Location belongs (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.WorldZoneLocation.ToString">
            <summary>
            Overload the ToString method to return a formated text with world location name and id
            </summary>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.Name">
            <summary>
            The name of the zone.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.Id">
            <summary>
            The ID of the zone.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.ParentZoneId">
            <summary>
            The ID of the zone's parent zone.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.MapId">
            <summary>
            The ID of this zone's parent map.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.MapTemplate">
            <summary>
            The <see cref="P:WCell.RealmServer.Global.Zone.MapTemplate">Map</see> to which this Zone belongs.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.Flags">
            <summary>
            The flags for the zone.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.Zone.Ownership">
            <summary>
            Who does this Zone belong to (if anyone)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.Zone.UpdateChannels(WCell.RealmServer.Entities.Character,WCell.RealmServer.Global.Zone)">
            <summary>
            Lets the player join/leave the appropriate chat-channels
            </summary>
            <param name="chr">the player</param>
        </member>
        <member name="T:WCell.RealmServer.Global.ZoneSpacePartitionNode">
            <summary>
            Represents a division of map space (a node in any Map's quadtree).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Global.ZoneSpacePartitionNode.DefaultPartitionThreshold">
            <summary>
            The max depth of the QuadTrees used for space partitioning within Maps
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.IsLeaf">
            <summary>
            Whether or not this node is a leaf node. (contains objects)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.Bounds">
            <summary>
            The dimensional bounds of this node.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.X">
            <summary>
            The origin X of this node's bounds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.Y">
            <summary>
            The origin Y of this node's bounds.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.Length">
            <summary>
            The length of this node.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.Width">
            <summary>
            The width of this node.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Global.ZoneSpacePartitionNode.HasObjects">
            <summary>
            Whether or not this node has objects.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.#ctor(WCell.Util.Graphics.BoundingBox)">
            <summary>
            Creates a node with the given bounds.
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.PartitionSpace(WCell.RealmServer.Global.ZoneSpacePartitionNode,System.Int32,System.Int32)">
            <summary>
            Partitions the node, dividing it into subnodes until the desired depth is reached.
            </summary>
            <param name="maxLevels">the maximum depth to partition</param>
            <param name="startingDepth">the depth to start partitioning from</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.FindNeighbors(WCell.RealmServer.Global.ZoneSpacePartitionNode,System.Int32,System.Int32)">
            <summary>
            TODO: Find all intermediate neighbors
            </summary>
            <param name="parent"></param>
            <param name="vertical"></param>
            <param name="horizontal"></param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetObjectsOfSpecificType``1(WCell.Util.Graphics.BoundingBox@,System.Collections.Generic.List{``0},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <typeparam name="T">the specific type of the objects to retrieve</typeparam>
            <param name="entities">the list to append retrieved objects to</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea``1(WCell.Util.Graphics.BoundingBox@,System.Collections.Generic.List{``0},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <typeparam name="T">the minimum type of the objects to retrieve</typeparam>
            <param name="box">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea``1(WCell.Util.Graphics.BoundingBox@,System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <typeparam name="T">the minimum type of the objects to retrieve</typeparam>
            <param name="box">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea(WCell.Util.Graphics.BoundingBox@,System.Collections.Generic.List{WCell.RealmServer.Entities.WorldObject},WCell.Constants.Updates.ObjectTypes,System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <param name="box">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
            <param name="filter">the type (in respect to the WoW client) that the object must be</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea(WCell.Util.Graphics.BoundingBox@,System.Collections.Generic.List{WCell.RealmServer.Entities.WorldObject},System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <param name="box">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
            <param name="filter">a predicate to determin whether or not to add specific objects</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetObjectsOfSpecificType``1(WCell.Util.Graphics.BoundingSphere@,System.Collections.Generic.List{``0},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <typeparam name="T">the specific type of the objects to retrieve</typeparam>
            <param name="entities">the list to append retrieved objects to</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea``1(WCell.Util.Graphics.BoundingSphere@,System.Collections.Generic.List{``0},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <typeparam name="T">the minimum type of the objects to retrieve</typeparam>
            <param name="sphere">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea``1(WCell.Util.Graphics.BoundingSphere@,System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <typeparam name="T">the minimum type of the objects to retrieve</typeparam>
            <param name="sphere">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea(WCell.Util.Graphics.BoundingSphere@,System.Collections.Generic.List{WCell.RealmServer.Entities.WorldObject},WCell.Constants.Updates.ObjectTypes,System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <param name="sphere">the area to search</param>
            <param name="entities">the list to append retrieved objects to</param>
            <param name="filter">the type (in respect to the WoW client) that the object must be</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetEntitiesInArea(WCell.Util.Graphics.BoundingSphere@,System.Collections.Generic.List{WCell.RealmServer.Entities.WorldObject},System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean},System.UInt32,System.Int32@)">
            <summary>
            Gets all objects within a specified radius.
            </summary>
            <param name="entities">the list to append retrieved objects to</param>
            <param name="filter">a predicate to determin whether or not to add specific objects</param>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.Iterate(WCell.Util.Graphics.BoundingSphere@,System.Func{WCell.RealmServer.Entities.WorldObject,System.Boolean},System.UInt32)">
            <summary>
            Iterates over all objects in this Node.
            </summary>
            <param name="predicate">Returns whether to continue iteration.</param>
            <returns>Whether Iteration was not cancelled (usually indicating that we did not find what we were looking for).</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.AddObject(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Adds an object to the node.
            </summary>
            <param name="obj">the object to add</param>
            <returns>whether or not the object was added successfully</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.GetLeafFromPoint(WCell.Util.Graphics.Vector3@)">
            <summary>
            Gets a leaf node from a given point.
            </summary>
            <param name="pt">the point to retrieve the parent node from</param>
            <returns>the node which contains the given point; null if the point is invalid</returns>
        </member>
        <member name="M:WCell.RealmServer.Global.ZoneSpacePartitionNode.RemoveObject(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Removes an object from the node.
            </summary>
            <param name="obj">the object to remove</param>
            <returns>whether or not the object was removed successfully</returns>
        </member>
        <member name="T:WCell.RealmServer.Groups.Group">
            <summary>
            Base group class for every group type.
            Don't forget to lock the SyncRoot while iterating over a Group.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.Group.GroupInstanceKickDelayMillis">
            <summary>
            The time after which a member who left a Group will be teleported out of a Group owned instance in seconds.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.Group.MaxKillRewardDistance">
            <summary>
            Max distance in yards to be rewarded for a group kill
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.Group.MinLevelToBeInvitedInRaid">
            <summary>
            Minimun level to be invited in a raid
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.LootMethod">
            <summary>
            The chosen LootMethod.
            Make sure to send an Update after changing this, so the Group is informed about the change.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.LootThreshold">
            <summary>
            The least Quality of Items to be handled by the MasterLooter or to be rolled for.
            Make sure to send an Update after changing this, so the Group is informed about the change.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.DungeonDifficulty">
            <summary>
            The DungeonDifficulty.
            Make sure to send an Update after changing this, so the Group is informed about the change.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.SubGroups">
            <summary>
            All SubGroups of this Group. 
            By default there is only 1 SubGroup, except for RaidGroups which always have 8 (some might be empty)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.Leader">
            <summary>
            The GroupMember who is leader of this Group.
            Is null if the Group has no online members.
            This will only ever be null if no one in the Group is online.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.MasterLooter">
            <summary>
            The GroupMember who is the looter of the group. Returns null if there isnt one.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.IsBattleGroup">
            <summary>
            Returns true if this is a BattleGroup. //TODO: 
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.MainAssistant">
            <summary>
            The MainAssistant of this Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.MainTank">
            <summary>
            The MainTank of this Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.IsFull">
            <summary>
            Whether this Group is full 
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.FactionGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.ForeachCharacter(System.Action{WCell.RealmServer.Entities.Character})">
            <summary>
            Executes the given callback in each character's current context
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.CallOnAllInSameContext(WCell.Util.Threading.IContextHandler,System.Action{WCell.RealmServer.Entities.Character})">
            <summary>
            Executes the given callback immediately for every online group member in the given context.
            IMPORTANT: Must be called from within context.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.CharacterCount">
            <summary>
            The amount of Members in this Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.MaxMemberCount">
            <summary>
            The maximum amount of Members in this Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.FirstMember">
            <summary>
            The Member who joined this Group earliest, of everyone who is currently in this Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.LastMember">
            <summary>
            The Member who joined this Group last, of everyone who is currently in this Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.InvitesLeft">
            <summary>
            Free spots left in this group (= MaxCount - CurrentCount)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.RoundRobinMember">
            <summary>
            The member whose turn it is in RoundRobin
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.SyncRoot">
            <summary>
            The SyncRoot against which to synchronize this group (when iterating over it or making certain changes)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.AddMember(WCell.RealmServer.Entities.Character,System.Boolean)">
            <summary>
            Add member to Group
            </summary>
            <param name="update">Indicates if this group needs to be updated after adding the 
            new member</param>
            <returns>True if the member was added successfully. False otherwise.</returns>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.RemoveMember(WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Remove member from this Group
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.OnAddMember(WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Called when the given member is added
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.OnMemberRemoved(WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Called before the given member is removed to clean up everything related to the given member
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.Disband">
            <summary>
            Disbands this Group
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.CheckInvite(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character@,System.String)">
            <summary>
            Check whether the given inviter may invite the given target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.CheckAction(WCell.RealmServer.Groups.GroupMember,WCell.RealmServer.Groups.GroupMember,System.String,WCell.Constants.GroupPrivs)">
            <summary>
            Checks whether the given target exists in this group and whether the given requestMember has the given privs
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendUpdate">
            <summary>
            Send the Updated list of the group state to each group member
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendAll(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Send a packet to each group member
            </summary>
            <param name="packet">Realm Packet</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendAll(WCell.RealmServer.RealmPacketOut,WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Send a packet to each group member except one specified
            </summary>
            <param name="packet">Realm Packet</param>
            <param name="ignored">Member that won't receive the message</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendEmptyUpdate(WCell.RealmServer.Entities.Character)">
            <summary>
            Send Empty Group List
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendGroupDestroyed(WCell.RealmServer.Entities.Character)">
            <summary>
            Send Party Disband Packet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendPing(WCell.RealmServer.Groups.GroupMember,System.Single,System.Single)">
            <summary>
            Sends ping to the group, except pinger
            </summary>
            <param name="pinger">The group member who pingged the minimap</param>
            <param name="x">x coordinate of ping</param>
            <param name="y">y coordinate of ping</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendRoll(System.Int32,System.Int32,System.Int32,WCell.Core.EntityId)">
            <summary>
            Sends roll results to the group
            </summary>
            <param name="min">minimal value</param>
            <param name="max">maximal value</param>
            <param name="roll">value rolled out</param>
            <param name="guid">guid of roller</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendTargetIconList(WCell.RealmServer.Entities.Character)">
            <summary>
            Sends all info about set icons to the client
            </summary>
            <param name="requester">The character requesting the target icon list</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SendTargetIconList">
            <summary>
            Sends all info about set icons to the client
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SetTargetIcon(System.Byte,WCell.Core.EntityId,WCell.Core.EntityId)">
            <summary>
            Sends info about change of single target icons info to all the party
            </summary>
            <param name="iconId">what element of array has changed</param>
            <param name="targetId">new value</param>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.Name">
            <summary>
            The name of the this ChatTarget
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.Group.EntityId">
            <summary>
            The EntityId (only set for Owner)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.GetAllCharacters">
            <summary>
            All online characters. 
            Don't forget to lock the SyncRoot while iterating over a Group.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.GetCharacterSet">
            <summary>
            Returns all online Characters in a <see cref="T:WCell.RealmServer.Entities.SynchronizedCharacterList"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.Send(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends the given packet to all online characters
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.GetNextRoundRobinMember">
            <summary>
            Selects and returns the next online Member whose turn it is in RoundRobin.
            </summary>
            <returns>null if all members of this Group are offline.</returns>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.SetLootMethod(WCell.Constants.Looting.LootMethod,WCell.RealmServer.Groups.GroupMember,WCell.Constants.Items.ItemQuality)">
            <summary>
            Sets the given Looting-parameters and updates the Group.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.UpdateOutOfRangeMembers(WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Update the stats of the given <see cref="T:WCell.RealmServer.Groups.GroupMember"/> to all 
            out of range members of this group. 
            </summary>
            <remarks>Method requires Group-synchronization.</remarks>
            <param name="member">The <see cref="T:WCell.RealmServer.Groups.GroupMember"/> who needs to send
            the update</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.GetEnumerator">
            <summary>
            All members of this Group and all its SubGroups.
            Don't forget to lock the SyncRoot while iterating over a Group.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.GetActiveInstance(WCell.RealmServer.Global.MapTemplate)">
            <summary>
            Gets the Instance of the given Map of either the Leader or any member
            if anyone is already in it.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.Group.EnsurePureStaffGroup">
            <summary>
            Kick every non-staff member
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Groups.GroupMember">
            <summary>
            Represents the relationship between a Character and its Group/SubGroup.
            GroupMembers are also a singly linked list where the head is the person who joined first and the tail is the person who joined last.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.GroupMember.m_lastPos">
            <summary>
            Is set when player logs out
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.GroupMember.m_Map">
            <summary>
            Is set when player logs out
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Id">
            <summary>
            The low part of the Character's EntityId. Use EntityId.GetPlayerId(Id) to get a full EntityId
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Name">
            <summary>
            The name of this GroupMember
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.SubGroup">
            <summary>
            The SubGroup of this Member (not null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Group">
            <summary>
            The Group of this Member (not null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Character">
            <summary>
            Returns the Character or null, if this member is offline
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Map">
            <summary>
            The current or last Map in which this GroupMember was
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Position">
            <summary>
            The current position of this GroupMember or the last position if member already logged out
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.Next">
            <summary>
            The GroupMember who joined after this GroupMember
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsLeader">
            <summary>
            Whether this member is the leader of the Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsMasterLooter">
            <summary>
            Whether this member is the MasterLooter of the Group
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsAssistant">
            <summary>
            Whether this member is an Assistant
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsAtLeastAssistant">
            <summary>
            Whether this member is the Leader, MainAssistant or Assistant
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsMainAssistant">
            <summary>
            Whether this member is a MainAssistant
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsMainTank">
            <summary>
            Whether this member is the MainTank
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Groups.GroupMember.IsAtLeastMainAssistant">
            <summary>
            Whether this member is MainAssistant or leader
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.GroupMember.LeaveGroup">
            <summary>
            Lets this Member leave the group.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.GroupMember.IterateMembersInRange(System.Single,System.Action{WCell.RealmServer.Groups.GroupMember})">
            <summary>
            Calls the given handler over all members of the same Group within the given radius
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Groups.GroupMgr">
            <summary>
            TODO: Group-Tracking (including buffs/debuffs)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.GroupMgr.OfflineChars">
            <summary>
            Maps char-id to the corresponding GroupMember object so it can be looked up when char reconnects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.GroupMgr.RemoveOfflineCharacter(System.UInt32)">
            <summary>
            Removes an offline Character with the given Id
            from his/her Group
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:WCell.RealmServer.Groups.GroupMgr.OnCharacterLogout(WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Cleanup character invitations and group leader, looter change on character logout/disconnect
            </summary>
            <param name="member">The GroupMember logging out / disconnecting (or null if the corresponding Character is not in a Group)</param>
        </member>
        <member name="T:WCell.RealmServer.Groups.IGroupConverter`1">
            <summary>
            Defines an interface that allows one type of group to convert itself into another.
            </summary>
            <typeparam name="T">the type of group to convert to</typeparam>
        </member>
        <member name="M:WCell.RealmServer.Groups.IGroupConverter`1.ConvertTo">
            <summary>
            Converts one type of group to another.
            </summary>
            <returns>the newly converter group object</returns>
        </member>
        <member name="T:WCell.RealmServer.Groups.PartyGroup">
            <summary>
            Represents a party group.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.PartyGroup.MaxSubGroupCount">
            <summary>
            Max Amount of allowed sub-groups
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Groups.PartyGroup.MaxMemberCount">
            <summary>
            Max amount of allowed members in a Party
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.PartyGroup.#ctor(WCell.RealmServer.Entities.Character)">
            <summary>
            Creates a party group with the given character as the leader.
            </summary>
            <param name="leader"></param>
        </member>
        <member name="P:WCell.RealmServer.Groups.PartyGroup.Flags">
            <summary>
            Tye type of group.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WCell.RealmServer.Groups.PartyGroup.ConvertTo" -->
        <member name="T:WCell.RealmServer.Groups.RaidGroup">
            <summary>
            Represents a raid group.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.#ctor(WCell.RealmServer.Entities.Character)">
            <summary>
            Creates a raid group with the given character as the leader.
            </summary>
            <param name="leader">the character to be the leader</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.#ctor(WCell.RealmServer.Groups.Group)">
            <summary>
            Creates a raid group from an existing party group.
            TODO: This looks wrong
            </summary>
            <param name="group">the group to convert</param>
        </member>
        <member name="P:WCell.RealmServer.Groups.RaidGroup.Flags">
            <summary>
            The type of group.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.SetAssistant(WCell.RealmServer.Entities.Character,System.Boolean)">
            <summary>
            Sets whether or not the given player is an assistant.
            </summary>
            <param name="member">the member to set</param>
            <param name="isAssistant">whether or not the member is an assistant</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.SetMainAssistant(WCell.RealmServer.Entities.Character,System.Boolean)">
            <summary>
            Sets whether or not the given player is the main assistant.
            </summary>
            <param name="member">the member to set</param>
            <param name="add">whether or not the member is an assistant</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.MoveMember(WCell.RealmServer.Groups.GroupMember,WCell.RealmServer.Groups.SubGroup)">
            <summary>
            Moves a member of the raid group into another subgroup.
            </summary>
            <param name="member">the member to move</param>
            <param name="group">the target subgroup</param>
            <returns>Whether the move was successful or false if the target group was full</returns>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.SendReadyCheckRequest(WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Sends a ready check request to the members of the raid group.
            </summary>
            <param name="member">the member who requested the check</param>
        </member>
        <member name="M:WCell.RealmServer.Groups.RaidGroup.SendReadyCheckResponse(WCell.RealmServer.Groups.GroupMember,WCell.RealmServer.Groups.ReadyCheckStatus)">
            <summary>
            Sends the response of a member to the original ready check requester.
            </summary>
            <param name="member">the responding member</param>
            <param name="status">their ready status</param>
        </member>
        <member name="P:WCell.RealmServer.Groups.SubGroup.IsFull">
            <summary>
            Whether this SubGroup has already the max amount of members
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Groups.SubGroup.Send(WCell.RealmServer.RealmPacketOut,WCell.RealmServer.Groups.GroupMember)">
            <summary>
            Send a packet to every group member except for the one specified.
            </summary>
            <param name="packet">the packet to send</param>
            <param name="ignored">the member that won't receive the packet</param>
        </member>
        <member name="T:WCell.RealmServer.Help.Tickets.Ticket">
            <summary>
            Represents a ticket issued by a player.
            TODO: Save to DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.CharId">
            <summary>
            The low part of the EntityId of the Character who issued this Ticket
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.Owner">
            <summary>
            The owner of this Ticket or null if not online
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.OwnerName">
            <summary>
            The owner of this Ticket or null if not online
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.Map">
            <summary>
            The Map where this Ticket was submitted or the Owner last logged out.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.Position">
            <summary>
            The Position where this Ticket was submitted or the Owner last logged out.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.Timestamp">
            <summary>
            The time when the ticket was submitted
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.Age">
            <summary>
            The time between now and when the ticket was submitted
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.Ticket.Handler">
            <summary>
            The current Handler of this Ticket.
            Setting the handler is synchronized and also automatically sets the Handler's current HandlingTicket to this.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Help.Tickets.ITicketHandler">
            <summary>
            Represents anyone who can (but not necessarily is allowed to) handle Tickets
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Help.Tickets.ITicketHandler.HandlingTicket">
            <summary>
            The ticket that is currently being handled by this TicketHandler
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Help.Tickets.ITicketHandler.MayHandle(WCell.RealmServer.Help.Tickets.Ticket)">
            <summary>
            Indicates whether this Handler may handle the given Ticket
            </summary>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Help.Tickets.TicketMgr">
             <summary>
             Manages support, help-requests, GM Tickets, surveys etc.
            
             TODO: Commands - Summon, Goto, Next, Previous
             TODO: Staff chat-channeling for enforced help
             TODO: Individual settings for staff/ticket issuing? Use ticket types?
             TODO: Backup command to store certain tickets?
             </summary>
        </member>
        <member name="M:WCell.RealmServer.Help.Tickets.TicketMgr.GetTicket(System.UInt32)">
            <summary>
            </summary>
            <param name="charId"></param>
            <returns>The Ticket of the Character with the given charId or null if the Character did not issue any.</returns>
        </member>
        <member name="M:WCell.RealmServer.Help.Tickets.TicketMgr.GetNextUnhandledTicket(WCell.RealmServer.Help.Tickets.ITicketHandler)">
            <summary>
            
            </summary>
            <param name="handler">May be null</param>
            <returns>Returns the next Ticket that is not already handled and may be handled by the given handler.</returns>
        </member>
        <member name="T:WCell.RealmServer.Help.HelpMgr">
            <summary>
            Not sure yet
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Quests.QuestTemplate">
            <summary>
            Quest Templates represent all information that is associated with a possible ingame Quest.
            TODO: AreaTrigger relations
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.CompleteHandler">
            <summary>
            Single handler to verify whether a Quest has been completed
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Starters">
            <summary>
            The list of all entities that can start this Quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Finishers">
            <summary>
            The List of all entities that can finish this Quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Id">
            <summary>
            Unique identifier of quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.IsActive">
            <summary>
            Determines whether quest is active or not. 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Level">
            <summary>
            Level of given quest, for which the quest is optimized. (If FFFFFFFF, then it's level independent or special)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.MinLevel">
            <summary>
            Level of given quest, for which the quest is optimized. (If FFFFFFFF, then it's level independent or special)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ZoneTemplate">
            <summary>
            Restricted to this Zone
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.QuestType">
            <summary>
            QuestType, for more detailed description of type look at <seealso cref="T:WCell.Constants.Quests.QuestType"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.SuggestedPlayers">
            <summary>
            Number of players quest is optimized for.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ObjectiveMinReputation">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ObjectiveMaxReputation">
            <summary>
            Player cannot have more than this in reputation
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewMoney">
            <summary>
            Gets or sets the reward money in copper, if it's negative,
            money will be required for quest completition and deducted
            from player's money after completition.
            1     = 1 copper
            10    = 10 copper
            100   = 1 silver
            1000  = 10 silver
            10000 = 1 gold 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.MoneyAtMaxLevel">
            <summary>
            Money gained instead of RewMoney at level 70.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewSpell">
            <summary>
            Cast spell id of spell which shown to be cast on character when finishing the quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewSpellCast">
            <summary>
            Cast spell id of spell which is cast on character when finishing the quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.CastSpell">
            <summary>
            Cast spell id of spell which is casted on character when starting the quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.BonusHonor">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.SrcItemId">
            <summary>
            An Quest-starting Item
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Flags">
            <summary>
            QuestFlags, for more detailed description of flags look at <see cref="T:WCell.Constants.Quests.QuestFlags"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewardTitleId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewardMailTemplateId">
            <summary>
            The id of the loot to be sent via mail to the finisher after completion
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewardMailDelaySeconds">
            <summary>
            The delay after which the Reward Mail should be sent
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewardItems">
            <summary>
            Array of items containing item ID, index and quantity of items.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewardChoiceItems">
            <summary>
            Array of items containing item ID, index and quantity of items.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.MapId">
            <summary>
            Map Id of point showing something.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.PointX">
            <summary>
            X-coordinate of point showing something.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.PointY">
            <summary>
            Y-coordinate of point showing something.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.PointOpt">
            <summary>
            Options of point showing something.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestTemplate.DefaultTitle">
            <summary>
            Title (name) of the quest to be shown in <see cref="T:WCell.RealmServer.Quests.QuestLog"/> in the server's default language.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Instructions">
            <summary>
            Text sumarizing the objectives of quest.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestTemplate.DefaultObjective">
            <summary>
            Objective of the quest to be shown in <see cref="T:WCell.RealmServer.Quests.QuestLog"/> in the server's default language.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Details">
            <summary>
            Detailed quest descriptions shown in <see cref="T:WCell.RealmServer.Quests.QuestLog"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.EndTexts">
            <summary>
            Text which is QuestGiver going to say upon quest finishing.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.CompletedTexts">
            <summary>
             Text which is displayed in quest objectives window once all objectives are completed 
             </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ObjectOrSpellInteractions">
            <summary>
            Array of interactions containing ID, index and quantity.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.CollectableSourceItems">
            <summary>
            Array of source items interactions containing ID and quantity.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.CollectableItems">
            <summary>
            Array of items you need to collect.
            If the items are quest-only,
            they will be deleted upon canceling quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ObjectiveTexts">
            <summary>
            Array of quest objectives text, every value is a short note that is shown
            once all objectives of the corresponding slot have been fullfilled.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.SpecialFlags">
            <summary>
            Special Quest flags, unknown purpose.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.TimeLimit">
            <summary>
            Time limit for timed Quest. It's not taken into account
            if there's no Timed flag set in QuestFlags
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.OfferRewardTexts">
            <summary>
            Text which will be shown when the objectives are done. In the
            offering rewards window.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ProgressTexts">
            <summary>
            Text which will be shown when the objectives aren't done yet. In the 
            window where you have to have items.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.Repeatable">
            <summary>
            Value indicating whether this <see cref="T:WCell.RealmServer.Quests.QuestTemplate"/> is repeatable.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RequiredClientId">
            <summary>
            Value indicating whether this <see cref="T:WCell.RealmServer.Quests.QuestTemplate"/> is available only for clients
            with expansion.
            probably obsolete, there is QuestFlag for this
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ProvidedItems">
            <summary>
            Array of Items to be given upon accepting the quest. These items will be destroyed when the Quest is solved or canceled.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RequiredLevel">
            <summary>
            Required minimal level to be able to see this quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RequiredRaces">
            <summary>
            Required race mask to check availability to player.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RequiredClass">
            <summary>
            Required class mask to check availability to player.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RequiredSkillValue">
            <summary>
            Tradeskill level which is required to accept this quest.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewXPId">
            <summary>
            Represents the Reward XP column id.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestTemplate.ShouldBeConnectedInGraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ReqAllActiveQuests">
            <summary>
            Quests that may must all be active in order to get this Quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ReqAllFinishedQuests">
            <summary>
            Quests that must all be finished in order to get this Quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ReqAnyActiveQuests">
            <summary>
            Quests of which at least one must be active to get this Quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ReqAnyFinishedQuests">
            <summary>
            Quests of which at least one must be finished to get this Quest
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.ReqUndoneQuests">
            <summary>
            Quests of which none may have been accepted or completed
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.AreaTriggerObjectives">
            <summary>
            Triggers or areas which are objective to be explored as requirements.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.PlayersSlain">
            <summary>
            Number of players to kill
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewardReputations">
            <summary>
            Array of <see href="ReputationReward">ReputationRewards</see>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestTemplate.RewHonorMultiplier">
            <summary>
            Multiplier of reward honor
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestTemplate.Sharable">
            <summary>
            Value indicating whether this <see cref="T:WCell.RealmServer.Quests.QuestTemplate"/> is shareable.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestTemplate.IsDaily">
            <summary>
            Value indicating whether this <see cref="T:WCell.RealmServer.Quests.QuestTemplate"/> is daily.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)">
            <summary>
            To finish this Quest the Character has to interact with the given
            kind of GO the given amount of times. This is a unique interaction.
            To Add more than one GO for a particular objective add the first with
            this method then use <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedGOInteraction(System.UInt32,WCell.Constants.GameObjects.GOEntryId)"/>
            </summary>
            <param name="goId">The entry id of the GO that must be interacted with</param>
            <param name="amount">The number of times this GO must be interacted with</param>
            <returns>The index of this template in the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.GOInteractions"/> array</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedGOInteraction(System.UInt32,WCell.Constants.GameObjects.GOEntryId)">
            <summary>
            Adds an alternative GO to the interaction template that may also
            be interacted with for this quest objective <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)"/>
            </summary>
            <param name="index">The index into the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.GOInteractions"/>
            array where the first GO was added with <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)"/></param>
            <param name="goEntry">The entry id of the alternative GO that can be interacted with</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedGOInteractions(System.UInt32,System.Collections.Generic.IEnumerable{WCell.Constants.GameObjects.GOEntryId})">
            <summary>
            Adds alternative GOs to the interaction template that may also
            be interacted with for this quest objective. <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)"/>
            </summary>
            <param name="index">The index into the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.GOInteractions"/> array
            where the first GO was added with <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)"/></param>
            <param name="goids">The entry ids of the alternative GOs that can be interacted with</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedGOInteractions(System.UInt32,WCell.Constants.GameObjects.GOEntryId[])">
            <summary>
            Adds alternative GOs to the interaction template that may also
            be interacted with for this quest objective. <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)"/>
            </summary>
            <param name="index">The index into the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.GOInteractions"/> array
            where the first GO was added with <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddGOInteraction(WCell.Constants.GameObjects.GOEntryId,System.Int32,WCell.Constants.Spells.SpellId)"/></param>
            <param name="goids">The entry ids of the alternative GOs that can be interacted with</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetInteractionTemplateFor(WCell.Constants.GameObjects.GOEntryId)">
            <summary>
            Returns the first QuestInteractionTemplate that requires the given NPC to be interacted with
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)">
            <summary>
            To finish this Quest the Character has to interact with the given
            kind of NPC the given amount of times. This is a unique interaction.
            To Add more than one NPC for a particular objective add the first with
            this method then use <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedNPCInteraction(System.UInt32,WCell.Constants.NPCs.NPCId)"/>
            </summary>
            <param name="npcid">The entry id of the NPC that must be interacted with</param>
            <param name="amount">The number of times this NPC must be interacted with</param>
            <returns>The index of this template in the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.NPCInteractions"/> array</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedNPCInteraction(System.UInt32,WCell.Constants.NPCs.NPCId)">
            <summary>
            Adds an alternative NPC to the interaction template that may also
            be interacted with for this quest objective. <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)"/>
            </summary>
            <param name="index">The index into the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.NPCInteractions"/> array
            where the first NPC was added with <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)"/></param>
            <param name="npcid">The entry id of the alternative NPC that can be interacted with</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedNPCInteractions(System.UInt32,System.Collections.Generic.IEnumerable{WCell.Constants.NPCs.NPCId})">
            <summary>
            Adds alternative NPCs to the interaction template that may also
            be interacted with for this quest objective. <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)"/>
            </summary>
            <param name="index">The index into the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.NPCInteractions"/> array
            where the first NPC was added with <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)"/></param>
            <param name="npcids">The entry ids of the alternative NPCs that can be interacted with</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.AddLinkedNPCInteractions(System.UInt32,WCell.Constants.NPCs.NPCId[])">
            <summary>
            Adds alternative NPCs to the interaction template that may also
            be interacted with for this quest objective. <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)"/>
            </summary>
            <param name="index">The index into the <see cref="F:WCell.RealmServer.Quests.QuestTemplate.NPCInteractions"/> array
            where the first NPC was added with <seealso cref="M:WCell.RealmServer.Quests.QuestTemplate.AddNPCInteraction(WCell.Constants.NPCs.NPCId,System.Int32,WCell.Constants.Spells.SpellId)"/></param>
            <param name="npcids">The entry ids of the alternative NPCs that can be interacted with</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetInteractionTemplateFor(WCell.Constants.NPCs.NPCId)">
            <summary>
            Returns the first QuestInteractionTemplate that requires the given NPC to be interacted with
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.CheckBasicRequirements(WCell.RealmServer.Entities.Character)">
            <summary>
            Checks whether the given Character may do this Quest
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.CheckRequiredActiveQuests(WCell.RealmServer.Quests.QuestLog)">
            <summary>
            Check quest-relation requirements of active quests
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.CheckRequiredFinishedQuests(WCell.RealmServer.Quests.QuestLog)">
            <summary>
            Check quest-relation requirements of quests that need to be finished for this one to start
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.IsObsolete(WCell.RealmServer.Entities.Character)">
            <summary>
            Determines whether is quest obsolete for given character.
            </summary>
            <param name="chr">The character.</param>
            <returns>
            	<c>true</c> if [is quest obsolete] [the specified qt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.IsTooHighLevel(WCell.RealmServer.Entities.Character)">
            <summary>
            Determines whether [is quest too high level] [the specified qt].
            </summary>
            <param name="chr">The CHR.</param>
            <returns>
            	<c>true</c> if [is quest too high level] [the specified qt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetStartStatus(WCell.RealmServer.Quests.QuestHolderInfo,WCell.RealmServer.Entities.Character)">
            <summary>
            Checks the requirements and returns the QuestStatus for ending a Quest.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetAvailability(WCell.RealmServer.Entities.Character)">
            <summary>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetEndStatus(WCell.RealmServer.Entities.Character)">
            <summary>
            Checks the requirements and returns the QuestStatus for ending a Quest.
            </summary>
            <param name="chr">The client.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetStarter(WCell.Constants.GameObjects.GOEntryId)">
            <summary>
            Returns the GOEntry with the given id or null
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetStarter(WCell.Constants.NPCs.NPCId)">
            <summary>
            Returns the NPCEntry with the given id or null
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetStarter(WCell.Constants.Items.ItemId)">
            <summary>
            Returns the ItemTemplate with the given id or null
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetStarter``1(System.UInt32)">
            <summary>
            Returns the Starter of the given Type which has the given Id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetFinisher(WCell.Constants.GameObjects.GOEntryId)">
            <summary>
            Returns the GOEntry with the given id or null
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetFinisher(WCell.Constants.NPCs.NPCId)">
            <summary>
            Returns the NPCEntry with the given id or null
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GetFinisher``1(System.UInt32)">
            <summary>
            Returns the Finisher of the given Type which has the given Id
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.GiveInitialItems(WCell.RealmServer.Entities.Character)">
            <summary>
            Tries to give all Initial Items (or none at all).
            </summary>
            <remarks>If not all Initial Items could be given, the Quest cannot be started.</remarks>
            <param name="receiver"></param>
            <returns>Whether initial Items were given.</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.CastInitialSpell(WCell.RealmServer.Entities.Character)">
            <summary>
            Tries to cast the Initial Spell
            </summary>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestTemplate.TryGiveRewards(WCell.RealmServer.Entities.Character,WCell.RealmServer.Quests.IQuestHolder,System.UInt32)">
            <summary>
            Tries to give all Rewards (or none at all).
            </summary>
            <remarks>If not all Rewards could be given, the Quest remains completable.</remarks>
            <param name="receiver"></param>
            <param name="qHolder"></param>
            <param name="rewardSlot">The slot of choosable items</param>
            <returns>Whether Rewards were given.</returns>
        </member>
        <member name="T:WCell.RealmServer.Quests.IQuestHolder">
            <summary>
            A QuestHolder are usually NPCs and GameObjects that trigger the start or end of a Quest
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.IQuestHolder.OnQuestGiverStatusQuery(WCell.RealmServer.Entities.Character)">
            <summary>
            Called whenever the QuestGiver status is sent to a Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.IQuestHolder.QuestHolderInfo">
            <summary>
            All Quest-information that this QuestGiver holds. 
            Is null if this is not an actual QuestGiver.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.IQuestHolderEntry.Id">
            <summary>
            Ids of all IQuestHolderEntries are not globally unique.
            This might be an Id of GOEntry, NPCEntry, ItemTemplate (or other)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.IQuestHolderEntry.QuestHolderInfo">
            <summary>
            All Quest-information that this QuestGiver holds. 
            Is null if this is not an actual QuestGiver.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.IQuestHolderEntry.GetInWorldTemplates">
            <summary>
            All "templates" of this entry that exist in the world (GOTemplate, SpawnEntry etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.Quest.Template">
            <summary>
            Template on which is this quest based, we might actually somehow cache only used templates
            in case someone would requested uncached template, we'd load it from DB/XML
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.Quest.Until">
            <summary>
            The time at which this Quest will expire for timed quests.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.Quest.#ctor(WCell.RealmServer.Quests.QuestLog,WCell.RealmServer.Quests.QuestTemplate,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.RealmServer.Quests.Quest"/> class.
            Which represents one item in character's <seealso cref="T:WCell.RealmServer.Quests.QuestLog"/>
            </summary>
            <param name="template">The Quest Template.</param>
        </member>
        <member name="M:WCell.RealmServer.Quests.Quest.#ctor(WCell.RealmServer.Quests.QuestLog,WCell.RealmServer.Database.QuestRecord,WCell.RealmServer.Quests.QuestTemplate)">
            <summary>
            Load Quest progress
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.Quest.CollectedItems">
            <summary>
            Amounts of picked up Items
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.Quest.CollectedSourceItems">
            <summary>
            Amounts of picked up Items
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.Quest.Interactions">
            <summary>
            Amounts interactions
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.Quest.VisitedATs">
            <summary>
            Visited AreaTriggers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.Quest.Status">
            <summary>
            Current status of quest in QuestLog
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.Quest.CompleteStatus">
            <summary>
            
            </summary>
            <returns>
            	<c>true</c> if [is quest completed] [the specified qt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.Quest.TryFinish(WCell.RealmServer.Quests.IQuestHolder,System.UInt32)">
            <summary>
            Tries to hand out the rewards, archives this quest and sends details about the next quest in the chain (if any).
            </summary>
            <param name="qHolder"></param>
            <param name="rewardSlot"></param>
        </member>
        <member name="M:WCell.RealmServer.Quests.Quest.ArchiveQuest">
            <summary>
            Removes Quest from Active log and adds it to the finished Quests
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.Quest.Cancel(System.Boolean)">
            <summary>
            Cancels the quest and removes it from the QuestLog
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Quests.QuestHolderInfo">
            <summary>
            TODO: Add methods related to query QuestGiver-specific information etc
            
            Represents all information that a QuestGiver has
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestHolderInfo.QuestStarts">
            <summary>
            Set of Quests that may start at this QuestHolder
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestHolderInfo.QuestEnds">
            <summary>
            Set of Quests that may be turned in at this QuestHolder
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestHolderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.RealmServer.Quests.QuestHolderInfo"/> class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestHolderInfo.GetHighestQuestGiverStatus(WCell.RealmServer.Entities.Character)">
            <summary>
            Gets the Highest Status of any quest newly available or continuable for the given Character
            </summary>
            <param name="chr">The character which is status calculated with.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestHolderInfo.GetAvailableQuests(WCell.RealmServer.Entities.Character)">
            <summary>
            Gets list of quests, which are activatable by this Character (not low leveled nor unavailable).
            </summary>
            <param name="chr">The client.</param>
            <returns>List of the active quests.</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestHolderInfo.GetQuestMenuItems(WCell.RealmServer.Entities.Character)">
            <summary>
            Gets the QuestMenuItems for a <see href="GossiGossipMenu">GossipMenu</see> 
            </summary>
            <param name="chr">The client.</param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Quests.QuestLog">
            <summary>
            TODO: Change dictionary to array
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.#ctor(WCell.RealmServer.Entities.Character)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.RealmServer.Quests.QuestLog"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.TimedQuestSlot">
            <summary>
            Gets the timed quest.
            Every Character is only allowed to solve one timed Quest at a time (makes sense doesn't it?)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.EscortQuestSlot">
            <summary>
            Gets the escort quest.
            </summary>
            <value>The escort quest.</value>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.ActiveQuests">
            <summary>
            Gets the current quests.
            </summary>
            <value>The current quests.</value>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.CurrentDailyCount">
            <summary>
            Gets the current daily count.
            </summary>
            <value>The current daily count.</value>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.FinishedQuests">
            <summary>
            Gets the finished quests.
            </summary>
            <value>The finished quests.</value>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.Owner">
            <summary>
            Gets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestLog.HasFreeSpace">
            <summary>
            Determines whether the amount of active Quests is less than the maximum amount of Quests.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.AddQuest(WCell.RealmServer.Quests.QuestTemplate)">
            <summary>
            Adds the given new Quest.
            Returns null if no free slot was available or inital Items could not be handed out.
            </summary>
            <param name="qt">The qt.</param>
            <returns>false if it failed to add the quest</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.AddQuest(WCell.RealmServer.Quests.QuestTemplate,System.Int32)">
            <summary>
            Adds the given Quest as new active Quest
            Returns null if inital Items could not be handed out.
            </summary>
            <param name="qt"></param>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.Cancel(System.UInt32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns>Whether any Quest was cancelled</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.RemoveQuest(System.UInt32)">
            <summary>
            Removes the given quest.
            Internal - Use <see cref="M:WCell.RealmServer.Quests.Quest.Cancel(System.Boolean)"/> instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.RemoveQuest(WCell.RealmServer.Quests.Quest)">
            <summary>
            Removes the given quest.
            Internal - Use <see cref="M:WCell.RealmServer.Quests.Quest.Cancel(System.Boolean)"/> instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.HasActiveQuest(WCell.RealmServer.Quests.QuestTemplate)">
            <summary>
            Adds the given Quest (if not already existing) marks it as completed 
            and offers the reward to the user.
            Does nothing and returns null if all Quest slots are currently used.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.GetActiveQuest(System.UInt32)">
            <summary>
            Gets the quest by template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.GetQuestBySlot(System.Byte)">
            <summary>
            Gets the quest by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Quest with given slot</returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.FindFreeSlot">
            <summary>
            Finds the free slot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.GetQuestById(System.UInt32)">
            <summary>
            Gets the quest by id.
            </summary>
            <param name="qid">The qid.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.GetQuestGiver(WCell.Core.EntityId)">
            <summary>
            Gets the QuestGiver with the given guid from the current Map (in case of a <see cref="T:WCell.RealmServer.Entities.WorldObject"/>) or 
            Inventory (in case of an <see cref="T:WCell.RealmServer.Entities.Item">Item</see>)
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.ResetDailyQuests">
            <summary>
            Resets the daily quest count. Needs to be called in midnight (servertime) or when character logs in after the midnight
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.OnNPCInteraction(WCell.RealmServer.Entities.NPC)">
            <summary>
            Is called when the owner of this QuestLog did
            the required interaction with the given NPC (usually killing)
            </summary>
            <param name="npc"></param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.GetReqNPCQuest(WCell.Constants.NPCs.NPCId)">
            <summary>
            Returns the first active Quest that requires the given NPC to be interacted with
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.OnUse(WCell.RealmServer.Entities.GameObject)">
            <summary>
            Is called when the owner of this QuestLog used the given GameObject
            </summary>
            <param name="go"></param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.IsRequiredForAnyQuest(WCell.RealmServer.Entities.GameObject)">
            <summary>
            Whether the given GO can be used by the player to start or progress a quest
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.OnItemAmountChanged(WCell.RealmServer.Entities.Item,System.Int32)">
            <summary>
            Is called when the owner of this QuestLog receives or looses the given amount of Items
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.GetReqItemQuest(WCell.Constants.Items.ItemId)">
            <summary>
            The Quest that requires the given Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.RequiresItem(WCell.Constants.Items.ItemId)">
            <summary>
            Whether the given Item is needed for an active Quest
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.Load">
            <summary>
            If we want this method to be public, 
            it should update all Quests correctly (remove non-existant ones etc)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestLog.RemoveFinishedQuest(System.UInt32)">
            <summary>
            Removes the given quest from the list of finished quests
            </summary>
            <param name="id"></param>
            <returns>Whether the Character had the given Quest</returns>
        </member>
        <member name="T:WCell.RealmServer.Quests.QuestMgr">
            <summary>
            Implementation of quest manager which is handlint most of the quest actions at server.
            TODO: Faction-restrictions
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestMgr.LevelObsoleteOffset">
            <summary>
            Amount of levels above the Character level at which a quest becomes obsolete to the player
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestMgr.QuestXpInfos">
            <summary>
            The Xp Reward Level that is used to determine the Xp reward upon completion.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestMgr.QuestRewRepInfos">
            <summary>
            The Reputation level that is used to deteminate the reputation reward upon quest completion.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestMgr.QuestHonorInfos">
            <summary>
            The Honor Reward Level that is used to determine the honor reward upon completion.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestMgr.LevelRequirementOffset">
            <summary>
            Amount of levels above the Character level at which a player is not allowed to do the Quest
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestMgr.LoadAll">
            <summary>
            Loads the quest templates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestMgr.CreateQuestRelationGraph">
            <summary>
            Creates the graph of all quests and their relations
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestMgr.EnsureGOQuestRelationsLoaded">
            <summary>
            Loads GO - questgiver relations.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Quests.QuestMgr.SetItemQuestRelations">
            <summary>
            Loads Item - questgiver relations.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Quests.QuestInteractionTemplate">
            <summary>
            Consists of a Type of objects, an id of the object's Template and
            amount of objects to be searched for in order to complete a <see cref="T:WCell.RealmServer.Quests.Quest"/>.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestInteractionTemplate.ObjectType">
            <summary>
            Either <see cref="F:WCell.Constants.Updates.ObjectTypeId.Unit"/> or <see cref="F:WCell.Constants.Updates.ObjectTypeId.GameObject"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Quests.QuestInteractionTemplate.RequiredSpellId">
            <summary>
            Spell to be casted.
            If not set, the objective is to kill or use the target.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Quests.QuestInteractionTemplate.RawId">
            <summary>
            The RawId is used in certain Packets.
            It encodes TemplateId and Type
            The setter should only ever be used
            when loading info from the database!
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Spell">
            <summary>
            Aura-related information of a Spell
            </summary>
            <summary>
            Represents any spell action or aura
            </summary>
            <summary>
            Represents a Spell (which -in fact- is any kind of effect or action) in WoW.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Spells.Spell.Casting">
            <summary>
            Is called after all preparations have been made and the Spell is about to start casting.
            Return anything but <c>SpellFailedReason.None</c> to cancel casting.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Spells.Spell.Cancelling">
            <summary>
            Is called before SpellCast is cancelled for the given reason.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Spells.Spell.Casted">
            <summary>
            Is called after a SpellCast has been casted.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Spells.Spell.AuraRemoved">
            <summary>
            Is called before SpellCast is cancelled for the given reason.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.NotifyCasting(WCell.RealmServer.Spells.SpellCast)">
            <summary>
            Triggers the Casting event
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTextAndSoundEvent(WCell.RealmServer.NPCs.NPCAiText)">
            <summary>
            Will let the Caster play the given text and sound after casting
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsAura">
            <summary>
            Whether this Spell is an Aura
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AuraUID">
            <summary>
            AuraUID, the same for all Auras that may not stack
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DefaultAuraFlags">
            <summary>
            AuraFlags to be applied to all Auras resulting from this Spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AuraAmplitude">
            <summary>
            General Amplitude for Spells that represent Auras (can only have one for the time being)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsAreaAura">
            <summary>
            whether this Spell is an AreaAura
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsAutoRepeating">
            <summary>
            Modal Auras cannot be updated, but must be replaced
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AreaAuraAmplitude">
            <summary>
            General Amplitude for Spells that represent AreaAuras (can only have one per spell)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AuraEffects">
            <summary>
            All effects that belong to an Aura
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AreaAuraEffects">
            <summary>
            All effects that belong to an AreaAura
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CanStack">
            <summary>
            Whether the Aura's effects should multiply it's effect value by the amount of its Applications
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.InitialStackCount">
            <summary>
            The amount of initial Aura-Applications
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsPureAura">
            <summary>
            Only has Aura effects
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsPureBuff">
            <summary>
            Only has positive Aura effects
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsPureDebuff">
            <summary>
            Only has negative Aura effects
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsGhost">
            <summary>
            whether this Spell applies the death effect
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.IsAuraProcHandler">
            <summary>
            Whether this is a proc and whether its own effects handle procs (or false, if not a proc or custom proc handlers have been added)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsShapeshift">
            <summary>
            Spell lets one shapeshift into another creature
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasFlyEffect">
            <summary>
            whether this spell applies makes the targets fly
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.IsMount">
            <summary>
            Does this Spell apply a Mount-Aura?
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsFlyingMount">
            <summary>
            Does this Spell apply a Flying-Mount Aura?
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CanApplyMultipleTimes">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasShapeshiftDependentEffects">
            <summary>
            Whether the Aura has effects that depend on the wearer's Shapeshift form
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsModalShapeshiftDependentAura">
            <summary>
            Whether the Aura is in any way dependent on the wearer's shapeshift form
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AuraCasterGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddCasterProcSpells(WCell.Constants.Spells.SpellId[])">
            <summary>
            Add Spells which, when casted by the owner of this Aura, can cause it to trigger this spell's procs.
            Don't add damage spells (they will generate a Proc event anyway).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddCasterProcSpells(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Add Spells which, when casted by the owner of this Aura, can cause it to trigger this spell's procs.
            Don't add damage spells (they will generate a Proc event anyway).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddCasterProcSpells(WCell.RealmServer.Spells.Spell[])">
            <summary>
            Add Spells which, when casted by the owner of this Aura, can cause it to trigger this spell's procs.
            Don't add damage spells (they will generate a Proc event anyway).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTargetProcSpells(WCell.Constants.Spells.SpellId[])">
            <summary>
            Add Spells which, when casted by others on the owner of this Aura, can cause it to trigger it's procs.
            Don't add damage spells (they will generate a Proc event anyway).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTargetProcSpells(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Add Spells which, when casted by others on the owner of this Aura, can cause it to trigger it's procs
            Don't add damage spells (they will generate a Proc event anyway).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTargetProcSpells(WCell.RealmServer.Spells.Spell[])">
            <summary>
            Add Spells which, when casted by others on the owner of this Aura, can cause it to trigger it's procs
            Don't add damage spells (they will generate a Proc event anyway).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.CheckCasterConstraints(WCell.RealmServer.Entities.Unit)">
            <summary>
            Checks whether the given spell can be casted by the casting Unit.
            Does not do range checks.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.HasItemRequirements">
            <summary>
            Whether this spell has certain requirements on items
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.CheckItemRestrictions(WCell.RealmServer.Items.PlayerInventory)">
            <summary>
            Checks whether the given inventory satisfies this Spell's item restrictions
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.CheckItemRestrictionsWithout(WCell.RealmServer.Items.PlayerInventory,WCell.RealmServer.Entities.Item)">
            <summary>
            Checks whether the given inventory satisfies this Spell's item restrictions
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.CheckValidTarget(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Checks whether the given target is valid for the given caster.
            Is called automatically when SpellCast selects Targets.
            Does not do maximum range check.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Spell.SpecialCastHandler">
            <summary>
            
            </summary>
            <param name="spell">The special Spell being casted</param>
            <param name="caster">The caster casting the spell</param>
            <param name="target">The target that the Caster selected (or null)</param>
            <param name="targetPos">The targetPos that was selected (or 0,0,0)</param>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DefaultSpellRange">
            <summary>
            This Range will be used for all Spells that have MaxRange = 0
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTargetTriggerSpells(WCell.Constants.Spells.SpellId[])">
            <summary>
            Add Spells to be casted on the targets of this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTargetTriggerSpells(WCell.RealmServer.Spells.Spell[])">
            <summary>
            Add Spells to be casted on the targets of this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddCasterTriggerSpells(WCell.Constants.Spells.SpellId[])">
            <summary>
            Add Spells to be casted on the targets of this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddCasterTriggerSpells(WCell.RealmServer.Spells.Spell[])">
            <summary>
            Add Spells to be casted on the targets of this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddProcHandler(WCell.RealmServer.Misc.ProcHandlerTemplate)">
            <summary>
            Add Handler to be enabled when this aura spell is active
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AdditionallyTaughtSpells">
            <summary>
            List of Spells to be learnt when this Spell is learnt
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.Initialize">
            <summary>
            Sets all default variables
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.Init2">
            <summary>
            For all things that depend on info of all spells from first Init-round and other things
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.OverrideCustomTargetDefinitions(WCell.RealmServer.Spells.Targeting.TargetAdder,WCell.RealmServer.Spells.Targeting.TargetFilter[])">
            <summary>
            Sets the AITargetHandlerDefintion of all effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.OverrideCustomTargetDefinitions(WCell.RealmServer.Spells.Targeting.TargetAdder,WCell.RealmServer.Spells.Targeting.TargetEvaluator,WCell.RealmServer.Spells.Targeting.TargetFilter[])">
            <summary>
            Sets the CustomTargetHandlerDefintion of all effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.OverrideAITargetDefinitions(WCell.RealmServer.Spells.Targeting.TargetAdder,WCell.RealmServer.Spells.Targeting.TargetFilter[])">
            <summary>
            Sets the AITargetHandlerDefintion of all effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.OverrideAITargetDefinitions(WCell.RealmServer.Spells.Targeting.TargetAdder,WCell.RealmServer.Spells.Targeting.TargetEvaluator,WCell.RealmServer.Spells.Targeting.TargetFilter[])">
            <summary>
            Sets the AITargetHandlerDefintion of all effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.OverrideCustomTargetEvaluators(WCell.RealmServer.Spells.Targeting.TargetEvaluator)">
            <summary>
            Sets the CustomTargetEvaluator of all effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.OverrideAITargetEvaluators(WCell.RealmServer.Spells.Targeting.TargetEvaluator)">
            <summary>
            Sets the AITargetEvaluator of all effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.GetEffect(WCell.Constants.Spells.SpellEffectType)">
            <summary>
            Returns the first SpellEffect of the given Type within this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.GetEffect(WCell.Constants.Spells.SpellEffectType,System.Boolean)">
            <summary>
            Returns the first SpellEffect of the given Type within this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.GetEffect(WCell.Constants.Spells.AuraType)">
            <summary>
            Returns the first SpellEffect of the given Type within this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.GetEffect(WCell.Constants.Spells.AuraType,System.Boolean)">
            <summary>
            Returns the first SpellEffect of the given Type within this Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddEffect(WCell.RealmServer.Spells.SpellEffectHandlerCreator,WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Adds a new Effect to this Spell
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddEffect(WCell.Constants.Spells.SpellEffectType,WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Adds a new Effect to this Spell
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTriggerSpellEffect(WCell.Constants.Spells.SpellId)">
            <summary>
            Adds a SpellEffect that will trigger the given Spell on oneself
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddTriggerSpellEffect(WCell.Constants.Spells.SpellId,WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Adds a SpellEffect that will trigger the given Spell on the given type of target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddPeriodicTriggerSpellEffect(WCell.Constants.Spells.SpellId)">
            <summary>
            Adds a SpellEffect that will trigger the given Spell on oneself
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddPeriodicTriggerSpellEffect(WCell.Constants.Spells.SpellId,WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Adds a SpellEffect that will trigger the given Spell on the given type of target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddAuraEffect(WCell.Constants.Spells.AuraType)">
            <summary>
            Adds a SpellEffect that will be applied to an Aura to be casted on oneself
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddAuraEffect(WCell.Constants.Spells.AuraType,WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Adds a SpellEffect that will be applied to an Aura to be casted on the given type of target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddAuraEffect(WCell.RealmServer.Spells.Auras.AuraEffectHandlerCreator)">
            <summary>
            Adds a SpellEffect that will be applied to an Aura to be casted on the given type of target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.AddAuraEffect(WCell.RealmServer.Spells.Auras.AuraEffectHandlerCreator,WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Adds a SpellEffect that will be applied to an Aura to be casted on the given type of target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.GetDuration(WCell.RealmServer.Entities.ObjectReference)">
            <summary>
            Returns the max duration for this Spell in milliseconds, 
            including all modifiers.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Spell.GetDuration(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Entities.Unit)">
            <summary>
            Returns the max duration for this Spell in milliseconds, 
            including all modifiers.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.FullName">
            <summary>
            Fully qualified name
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.IsDeprecated">
            <summary>
            Spells that contain "zzOld", "test", "unused"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DurationEntry.LevelDelta">
            <summary>
            The amount the duration increases per caster-level
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.Category">
            <summary>
            SpellCategory.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DispelType">
            <summary>
            SpellDispelType.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.Mechanic">
            <summary>
            SpellMechanic.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.spellDescriptionVariablesID">
            <summary>
            3.2.2 related to description?
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredShapeshiftMask">
            <summary>
            SpellShapeshiftForm.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ExcludeShapeshiftMask">
            <summary>
            SpellShapeshiftForm.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CreatureMask">
            <summary>
            CreatureType.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredSpellFocus">
            <summary>
            SpellFocusObject.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredCasterAuraId">
            <summary>
            Can only cast if caster has this Aura
            Used for some new BG features (Homing missiles etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredTargetAuraId">
            <summary>
            Can only cast if target has this Aura
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ExcludeCasterAuraId">
            <summary>
            Cannot be cast if caster has this
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ExcludeTargetAuraId">
            <summary>
            Cannot be cast on target if he has this
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CastDelay">
            <summary>
            Cast delay in milliseconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.ProcTriggerFlags">
            <summary>
            Indicates events which cause this spell to trigger its proc effect 
            </summary>
            <remarks>
            This spell must be a proc <see cref="F:WCell.RealmServer.Spells.Spell.IsProc"/>
            </remarks>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.ProcHitFlags">
            <summary>
            Contains information needed for ProcTriggerFlags depending on hit result
            </summary>
            <remarks> 
            This spell must be a proc <see cref="F:WCell.RealmServer.Spells.Spell.IsProc"/>
            </remarks>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DurationIndex">
            <summary>
            SpellDuration.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.PowerPerSecondPerLevel">
            <summary>
            Unused so far
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RangeIndex">
            <summary>
            SpellRange.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.Range">
            <summary>
            Read from SpellRange.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ProjectileSpeed">
            <summary>
            The speed of the projectile in yards per second
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ModalNextSpell">
            <summary>
            Hunter ranged spells have this. It seems always to be 75
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredItemClass">
            <summary>
            ItemClass.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredItemSubClassMask">
            <summary>
            Mask of ItemSubClasses, used for Enchants and Combat Abilities
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredItemInventorySlotMask">
            <summary>
            Mask of InventorySlots, used for Enchants only
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.EffectHandlerCount">
            <summary>
            Does not count void effect handlers
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.Visual">
            <summary>
            SpellVisual.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.Visual2">
            <summary>
            SpellVisual.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.SpellbookIconId">
            <summary>
            SpellIcon.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.BuffIconId">
            <summary>
            SpellIcon.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.StartRecoveryTime">
            <summary>
            Always 0?
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DamageMultipliers">
            <summary>
            Used for effect-value damping when using chain targets, eg:
            	DamageMultipliers: 0.6, 1, 1
            	"Each jump reduces the effectiveness of the heal by 40%.  Heals $x1 total targets."
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.MinFactionId">
            <summary>
            only one spellid:6994 has this value = 369
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.MinReputation">
            <summary>
            only one spellid:6994 has this value = 4
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredAuraVision">
            <summary>
            only one spellid:26869  has this flag = 1 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AreaGroupId">
            <summary>
            AreaGroup.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RuneCostEntry">
            <summary>
            SpellRuneCost.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.MissileId">
            <summary>
            SpellMissile.dbc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.PowerDisplayId">
            <summary>
            PowerDisplay.dbc
            </summary>
            <remarks>Added in 3.1.0</remarks>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CanCastOnPlayer">
            <summary>
            Wheter this spell can be cast on players (automatically false for all taunts)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsPreventionDebuff">
            <summary>
            Whether this is a Spell that is only used to prevent other Spells (cannot be cancelled etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CanOverrideEqualAuraRank">
            <summary>
            Whether this is an Aura that can override other instances of itself if they have the same rank (true by default).
            Else the spell cast will fail when trying to do so.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.TargetTriggerSpells">
            <summary>
            Spells casted whenever this Spell is casted
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CasterTriggerSpells">
            <summary>
            Spells casted whenever this Spell is casted
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CasterProcSpells">
            <summary>
            Set of Spells which, when used by the caster of this spell, can proc this Spell.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.TargetProcSpells">
            <summary>
            Set of Spells which, when used by the caster of this spell, can proc this Spell on their targets.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ProcHandlers">
            <summary>
            Custom proc handlers to be added to targets of this Aura (this spell must be an Aura).
            If this is != null, the resulting Aura of this Spell will not be added as a Proc handler itself.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.SpellTargetLocation">
            <summary>
            Used for teleport spells amongst others
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsProc">
            <summary>
            Wheter this Aura can proc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.GeneratesProcEventOnCast">
            <summary>
            Whether this spell is supposed to proc something.
            If set to true, this Spell will generate a SpellCast proc event when casted.
            Don't use for damage spells, else they will generate 2 events!
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.ProcDelay">
            <summary>
            Amount of millis before this Spell may proc another time (if it is a proc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DamageIncreasedByAP">
            <summary>
            Whether this Spell's spell damage is increased by AP
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.MaxTargetEffect">
            <summary>
            The effect whose value represents the max amount of targets to be selected.
            This is a way to boost the max target amount with a simple EffectValue modifier.
            (Of course one could just have added a new modifier for this, but well.)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AuraConditionalEffects">
            <summary>
            Optional set of SpellEffects to be applied, only if certain Auras are applied
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsOnNextStrike">
            <summary>
            Whether this is a Combat ability that will be triggered on next weapon strike (like Heroic Strike etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsPhysicalAbility">
            <summary>
            whether this is an ability involving any kind of weapon-attack
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsStrikeSpell">
            <summary>
            Whether this can trigger an instant Strike
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsPassive">
            <summary>
            whether this is actually a passive buff
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsRanged">
            <summary>
            Whether this is a ranged attack (includes wands)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsRangedAbility">
            <summary>
            Whether this is a ranged attack (includes wands), that is not triggered
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsThrow">
            <summary>
            whether this is a throw (used for any kind of throwing weapon)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsProfession">
            <summary>
            whether this is an actual SpellCaster spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.TeachesApprenticeAbility">
            <summary>
            whether this teaches the initial Profession
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsTeachSpell">
            <summary>
            whether this is teaching another spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasCooldown">
            <summary>
            Whether it has any individual or category cooldown
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasIndividualCooldown">
            <summary>
            Whether this spell has an individual cooldown (unlike a category or "global" cooldown)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.IsTame">
            <summary>
            Tame Beast (Id: 1515) amongst others
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsTameEffect">
            <summary>
            Tame Beast (Id: 13481) amongst others
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsEnchantment">
            <summary>
            Whether this spell enchants an Item
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsFishing">
            <summary>
            Fishing spawns a FishingNode which needs to be removed upon canceling
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.LearnSpell">
            <summary>
            The spell which teaches this spell (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.PersistsThroughDeath">
            <summary>
            whether Spell's effects don't wear off when dead
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsTriggeredSpell">
            <summary>
            whether this spell is triggered by another one
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.IsFood">
            <summary>
            whether its a food effect
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.IsDrink">
            <summary>
            whether its a drink effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasHarmfulEffects">
            <summary>
            Indicates whether this Spell has at least one harmful effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasBeneficialEffects">
            <summary>
            Indicates whether this Spell has at least one beneficial effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.DOEffect">
            <summary>
            The SpellEffect of this Spell that represents a PersistentAreaAura and thus a DO (or null if it has none)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsHealSpell">
            <summary>
            whether this is a Heal-spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsDualWieldAbility">
            <summary>
            Whether this is a weapon ability that attacks with both weapons
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsSkinning">
            <summary>
            whether this is a Skinning-Spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.SpecialCast">
            <summary>
            If this is set for Spells, they will not be casted in the usual manner but instead this Handler will be called.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.Talent">
            <summary>
            The Talent which this Spell represents one Rank of (every Talent Rank is represented by one Spell)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.Ability">
            <summary>
            The SkillAbility that this Spell represents
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.SkillTier">
            <summary>
            The tier of the skill that this spell represents (if this is a Skill spell)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Spell.RepresentsSkillTier">
            <summary>
            Whether this represents a tier of a skill
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.RequiredTools">
            <summary>
            Tools that are required by this spell (is set during Initialization of Items)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasTargets">
            <summary>
            Indicates whether this Spell has any targets at all
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CasterIsTarget">
            <summary>
            Indicates whether this Spell has at least one effect on the caster
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsHearthStoneSpell">
            <summary>
            Indicates whether this Spell teleports the Uni back to its bound location
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.EquipmentSlot">
            <summary>
            The equipment slot where to look for a required item
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.IsChanneled">
            <summary>
            whether this is a channel-spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CostsPower">
            <summary>
            Whether this spell costs default power (does not include Runes)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.CostsRunes">
            <summary>
            Whether this Spell has any Rune costs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasModifierEffects">
            <summary>
            Auras with modifier effects require existing Auras to be re-evaluated
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.AllAffectingMasks">
            <summary>
            All affecting masks of all Effects
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Spell.HasAuraDependentEffects">
            <summary>
            Whether this spell has effects that require other Auras to be active to be activated
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellChannel">
            <summary>
            Represents a SpellChannel during a SpellCast (basically any Spell or Action that is being performed over time).
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Spells.SpellChannel.Ticked">
            <summary>
            Is called on every SpellChannel tick.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellChannel.#ctor">
            <summary>
            Can only work with unit casters
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellChannel.Duration">
            <summary>
            The total duration of this Channel
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellChannel.IsChanneling">
            <summary>
            Whether this SpellChannel is currently being used
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellChannel.Amplitude">
            <summary>
            The amount of milliseconds between 2 channel ticks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellChannel.TimeLeft">
            <summary>
            The time in milliseconds until this channel closes
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellChannel.Pushback(System.Int32)">
            <summary>
            Reduces the channel by one tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellChannel.Open(System.Collections.Generic.List{WCell.RealmServer.Spells.SpellEffectHandler},System.Collections.Generic.List{WCell.RealmServer.Spells.Auras.IAura})">
            <summary>
            Opens this SpellChannel. 
            Will be called by SpellCast class.
            Requires an active Caster.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellChannel.Tick(System.Int32)">
            <summary>
            Triggers a new tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellChannel.Close(System.Boolean)">
            <summary>
            Will be called internally to close this Channel.
            Call SpellCast.Cancel to cancel channeling.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellChannel.Dispose">
            <summary>
            Get rid of circular references
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.AuraHandler">
            <summary>
            Static Aura helper class
            
            TODO: CMSG_PET_CANCEL_AURA
            TODO: CMSG_CANCEL_GROWTH_AURA unused?
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.HandleCancelCastSpell(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Cancels a positive aura (by right-clicking on the corresponding icon)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.SendModifierUpdate(WCell.RealmServer.Entities.Character,WCell.RealmServer.Spells.SpellEffect,System.Boolean)">
            <summary>
            Sends updates to the client for spell-modifier
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AuraHandler.MaxPositiveAuras">
            <summary>
             The maximum amount of positive Auras
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AuraHandler.MaxAuras">
            <summary>
             The maximum amount of any kind of Auras
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AuraHandler.randomAuraId">
            <summary>
            Used to make sure that certain auras can be applied multiple times
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AuraHandler.AuraIdEvaluators">
            <summary>
            Every Aura that is evaluated to true is only stackable with Auras that are also evaluated to true by the same evaluator.
            Spells that are not covered by any evaluator have no restrictions.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.IsTransform(WCell.RealmServer.Spells.Spell)">
            <summary>
            All transform and visually supported shapeshift spells are in one group
            </summary>
            <param name="spell"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(System.Collections.Generic.IEnumerable{WCell.RealmServer.Spells.Spell})">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(WCell.Constants.Spells.SpellId[])">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(WCell.Constants.Spells.SpellId,WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(WCell.Constants.Spells.SpellId,WCell.Constants.Spells.SpellId,WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(WCell.Constants.Spells.SpellLineId,WCell.Constants.Spells.SpellId[])">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(WCell.Constants.Spells.SpellLineId,WCell.Constants.Spells.SpellLineId,WCell.Constants.Spells.SpellId[])">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraGroup(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Defines a set of Auras that are mutually exclusive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraCasterGroup(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Defines a set of Auras of which one Unit can only have 1 per caster
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraHandler.AddAuraCasterGroup(System.Int32,WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Defines a set of Auras of which one Unit can only have the given amount per caster
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.AreaAura">
            <summary>
            An AreaAura either (if its using an AreaAura spell) applies AreaAura-Effects to everyone in a radius around its center or
            triggers its spell on everyone around it.
            Can be persistant (Blizzard, Hurricane etc.) or mobile (Paladin Aura)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AreaAura.DefaultAmplitude">
            <summary>
            Delay in milliseconds to wait before revalidating effected targets (Default: 1000 ms).
            This is mostly used for Paladin Auras because they don't have an amplitude on their own.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.#ctor(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Spells.Spell,WCell.RealmServer.Spells.ISpellParameters)">
            <summary>
            Creates a new AreaAura that will auto-trigger the given Spell on everyone, according
            to the given SpellParameters.
            </summary>
            <param name="distributedSpell"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.Init(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Spells.Spell)">
            <summary>
            Creates a new AreaAura which applies its effects to everyone in its radius of influence
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AreaAura.Holder">
            <summary>
            The Holder of this AreaAura.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AreaAura.Center">
            <summary>
            The Position of the holder is also the Center of the Aura.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AreaAura.Radius">
            <summary>
            Radius of the Aura
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AreaAura.TimeLeft">
            <summary>
            Milliseconds until this expires
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AreaAura.IsAdded">
            <summary>
            Aura is active if its still applied to a <c>Holder</c>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AreaAura.IsActivated">
            <summary>
            Whether this AreaAura is currently activated and applies it's effects to the area
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.Apply">
            <summary>
            Called by a SpellChannel when channeling
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.Start(WCell.RealmServer.Spells.ITickTimer,System.Boolean)">
            <summary>
            Initializes this AreaAura with the given controller. 
            If no controller is given, the AreaAura controls timing and disposal itself.
            </summary>
            <param name="controller">A controller controls timing and disposal of this AreaAura</param>
            <param name="noTimeout">whether the Aura should not expire (ignore the Spell's duration).</param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.Remove(System.Boolean)">
            <summary>
            Remove and dispose AreaAura.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.RevalidateTargetsAndApply(System.Int32)">
            <summary>
            Check for all targets in radius, kick out invalid ones and add new ones
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.OnTrapTriggered(WCell.RealmServer.Entities.Unit)">
            <summary>
            Called when the holder is a trap and the given triggerer triggered it.
            </summary>
            <param name="triggerer"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.ApplyAuraEffects(WCell.RealmServer.Entities.Unit)">
            <summary>
            Applies this AreaAura's effects to the given target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AreaAura.RemoveEffects(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.Auras.Aura}})">
            <summary>
            Removes all auras from the given targets
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Aura">
            <summary>
            An Aura is any kind of long-lasting passive effect or buff.
            Some can be seen as an icon below the Player's status bar.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.Aura.m_controller">
            <summary>
            The controlling Timer (eg a SpellChannel) or null if self-controlled
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.#ctor(WCell.RealmServer.Spells.Auras.AuraCollection,WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Spell,System.Collections.Generic.List{WCell.RealmServer.Spells.Auras.AuraEffectHandler},System.Byte,System.Boolean)">
            <summary>
            Creates a new Aura
            </summary>
            <param name="auras"></param>
            <param name="casterReference">Information about who casted</param>
            <param name="spell">The spell that this Aura represents</param>
            <param name="handlers">All handlers must have the same AuraUID</param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.SetupTimer">
            <summary>
            Called after setting up the Aura and before calling Start()
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.Auras">
            <summary>
            The <c>AuraCollection</c> of the Unit that owns this Aura.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.Spell">
            <summary>
            The Spell that belongs to this Aura
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.StackCount">
            <summary>
            The amount of times that this Aura has been applied
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.IsAdded">
            <summary>
            Whether this Aura is added to it's owner
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.IsBeneficial">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.TicksLeft">
            <summary>
            The amount of ticks left (always 0 for non-periodic auras)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.CasterReference">
            <summary>
            Information about the caster
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.CasterUnit">
            <summary>
            The actual Caster (returns null if caster went offline or disappeared for some other reason)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.SpellCast">
            <summary>
            The SpellCast that caused this Aura (if still present)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.Amplitude">
            <summary>
             The amplitude between aura-ticks (only for non-passive auras which are not channeled)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.IsVisible">
            <summary>
            Whether this Aura is not visible to the client (only its effects will make him realize it)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.MaxApplications">
            <summary>
            The maximum amount of Applications for this Aura
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.Index">
            <summary>
            The position of this Aura within the client's Aura-bar (0 if not exposed to client)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.TimeLeft">
            <summary>
            Time that is left until this Aura disbands in millis.
            Auras's without timeout can't be resetted.
            Channeled Auras are controlled by the holding SpellChannel.
            Returns a negative value if Aura doesn't has a timeout (or is already expired).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.CanBeSaved">
            <summary>
            Wheter this Aura can be saved
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.CanBeStolen">
            <summary>
            Whether it is safe and legal to steal this Aura (only temporary Auras that are not controlled by a channel or similar)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.Controller">
            <summary>
            The controller of this Aura which controls timing, application and removal (such as <see cref="T:WCell.RealmServer.Spells.SpellChannel">SpellChannels</see>)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.HasTimeout">
            <summary>
            Auras that are not passive and not controlled by a <c>ITickTimer</c> have their own Timers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.Duration">
            <summary>
            Duration in millis
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Start(WCell.RealmServer.Spells.ITickTimer,System.Boolean)">
            <summary>
            Method is called 
            </summary>
            <param name="noTimeout">Whether the Aura should always continue and never expire.</param>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.IsActivated">
            <summary>
            Disables the Aura without removing it's effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Deactivate(System.Boolean)">
            <summary>
            Called when the Aura gets deactivated
            </summary>
            <param name="cancelled"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Apply">
            <summary>
            Applies this Aura's effect to its holder
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Apply(System.Int32)">
            <summary>
            Applies one of this Aura's Ticks to its holder
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.ReApplyNonPeriodicEffects">
            <summary>
            Removes and then re-applies all non-perodic Aura-effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.ApplyNonPeriodicEffects">
            <summary>
            Applies all non-perodic Aura-effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.OnApply">
            <summary>
            Do certain special behavior everytime an Aura is applied
            for very basic Aura categories.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Refresh(WCell.RealmServer.Entities.ObjectReference)">
            <summary>
            Refreshes this aura. 
            If this Aura is stackable, will also increase the StackCount by one.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.ReEvaluateNonPeriodicHandlerRequirements">
            <summary>
            Checks all handlers and toggles those whose requirements aren't met
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.Aura.AuraOverrideStatus.NotPresent">
            <summary>
            Aura does not exist
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.Aura.AuraOverrideStatus.Replace">
            <summary>
            Aura can be overridden (if the previous Aura can be removed)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.Aura.AuraOverrideStatus.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.GetOverrideStatus(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Spell)">
            <summary>
            Stack or removes the given Aura, if possible.
            Returns whether the given incompatible Aura was removed or stacked.
            <param name="err">Ok, if stacked or no incompatible Aura was found</param>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.RemoveNonPeriodicEffects">
            <summary>
            Removes and then re-applies all non-perodic Aura-effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Remove(System.Boolean)">
            <summary>
            Removes this Aura from the player
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.RemoveVisibleEffects(System.Boolean)">
            <summary>
            Takes care of all the eye candy that is related to the removal of this Aura.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.Cleanup">
            <summary>
            Need to guarantee that all Auras that have ever been created will also be removed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.OnRemove(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            See IIAura.OnRemove
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Aura.RemoveFromClient">
            <summary>
            Removes all of this Aura's occupied fields
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.ProcSpell">
            <summary>
            Spell to be triggered (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Aura.ProcChance">
            <summary>
            Chance to proc in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.AuraCollection">
            <summary>
            Represents the collection of all Auras of a Unit
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AuraCollection.m_AuraArray">
            <summary>
            An immutable array that contains all Auras and is re-created
            whenever an Aura is added or removed (lazily prevents threading and update issues -> Find something better).
            TODO: Recycle
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.AuraCollection.m_visibleAuras">
            <summary>
            All non-passive Auras.		
            Through items and racial abilities, one Unit can easily have 100 Auras active at a time -		
            No need to iterate over all of them when checking for interruption etc.		
            </summary>        
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraCollection.Item(WCell.Constants.Spells.SpellId)">
            <summary>
            Returns the first visible Aura with the given SpellId
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraCollection.Item(WCell.Constants.Spells.SpellLineId)">
            <summary>
            Returns the first visible Aura with the given SpellId
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraCollection.Item(WCell.Constants.Spells.AuraType)">
            <summary>
            Returns the first visible (not passive) Aura with the given Type (if any).
            </summary>
            <remarks>Requires map context.</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.FindFirst(System.Predicate{WCell.RealmServer.Spells.Auras.Aura})">
            <summary>
            Returns the first Aura that matches the given Predicate.
            Only looks in active Auras.
            </summary>
            <remarks>Requires map context.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetAt(System.UInt32)">
            <summary>
            Iterates over all Auras and returns the n'th visible one
            </summary>
            <returns>The nth visible Aura or null if there is none</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetAura(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Auras.AuraIndexId,WCell.RealmServer.Spells.Spell)">
            <summary>
            Get an Aura that is incompatible with the one represented by the given spell
            </summary>
            <returns>Whether or not another Aura may be applied</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetTotalAuraModifier(WCell.Constants.Spells.AuraType,System.Int32)">
            <summary>
            Gets the total modifiers of an AuraType in this AuraCollection.
            Takes only auras with a given miscvalue into account.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.Contains(WCell.Constants.Spells.SpellLineId)">
            <summary>
            Returns the first visible Aura with the given SpellId
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CreateSelf(WCell.Constants.Spells.SpellId,System.Boolean)">
            <summary>
            Applies the given spell as an Aura (the owner being the caster) to the owner of this AuraCollection.
            Also initializes the new Aura.
            </summary>
            <returns>null if Spell is not an Aura</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CreateSelf(WCell.RealmServer.Spells.Spell,System.Boolean)">
            <summary>
            Applies the given spell as an Aura (the owner being the caster) to the owner of this AuraCollection.
            Also initializes the new Aura.
            </summary>
            <returns>null if Spell is not an Aura</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CreateAndStartAura(WCell.RealmServer.Entities.ObjectReference,WCell.Constants.Spells.SpellId,System.Boolean,WCell.RealmServer.Entities.Item)">
            <summary>
            Applies the given spell as a buff or debuff.
            Also initializes the new Aura.
            </summary>
            <returns>null if Spell is not an Aura</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CreateAndStartAura(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Spell,System.Boolean,WCell.RealmServer.Entities.Item)">
            <summary>
            Applies the given spell as a buff or debuff.
            Also initializes the new Aura.
            </summary>
            <returns>null if Spell is not an Aura or an already existing version of the Aura that was refreshed</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.OnCreated(WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Called when an Aura has been dynamically created (not called, when applying via SpellCast)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CreateAura(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Spell,System.Collections.Generic.List{WCell.RealmServer.Spells.Auras.AuraEffectHandler},WCell.RealmServer.Entities.Item,System.Boolean)">
            <summary>
            Adds a new Aura with the given information to the Owner. 
            Does not initialize the new Aura.
            If you use this method, make sure to call <see cref="M:WCell.RealmServer.Spells.Auras.Aura.Start"/> on the newly created Aura.
            Overrides any existing Aura that matches.
            </summary>
            <returns>null if Spell is not an Aura</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CreateAura(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Spell,WCell.RealmServer.Entities.Item)">
            <summary>
            Applies the given spell as a buff or debuff.
            Does not necessarily create
            Also, initializes new Auras.
            </summary>
            <returns>null if Spell is not an Aura or an already existing version of the Aura that was refreshed</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.AddAura(WCell.RealmServer.Spells.Auras.Aura,System.Boolean)">
            <summary>
            Adds an already created Aura and optionally starts it
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetOverrideStatus(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Spell)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.PrepareStackOrOverride(WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Spells.Auras.AuraIndexId,WCell.RealmServer.Spells.Spell,WCell.Constants.Spells.SpellFailedReason@,WCell.RealmServer.Spells.SpellCast)">
            <summary>
            Stack or removes the Aura represented by the given spell, if possible.
            Returns true if there is no incompatible Aura or if the Aura could be removed.
            <param name="err">Ok, if stacked or no incompatible Aura is blocking a new Aura</param>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.RemoveWhere(System.Predicate{WCell.RealmServer.Spells.Auras.Aura})">
            <summary>
            Removes all visible Auras that match the given predicate
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.RemoveWhere(System.Predicate{WCell.RealmServer.Spells.Auras.Aura},System.Int32)">
            <summary>
            Removes up to the given max amount of visible Auras that match the given predicate
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.RemoveFirstVisibleAura(System.Predicate{WCell.RealmServer.Spells.Auras.Aura})">
            <summary>
            Removes the first occurance of an Aura that matches the given predicate
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.RemoveByFlag(WCell.Constants.Spells.AuraInterruptFlags)">
            <summary>
            Removes auras based on their interrupt flag.
            </summary>
            <param name="interruptFlags">the interrupt flags to remove the auras by</param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.Remove(WCell.Constants.Spells.SpellLineId)">
            <summary>
            Removes and cancels the first Aura of the given SpellLine
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.Remove(WCell.RealmServer.Spells.SpellLine)">
            <summary>
            Removes and cancels the first Aura of the given SpellLine
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.Remove(WCell.RealmServer.Spells.Spell)">
            <summary>
            Removes and cancels the first Aura of the given Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.Remove(WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Removes the given Aura without cancelling it.
            Automatically called by <see cref="M:WCell.RealmServer.Spells.Auras.Aura.Remove(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.CleanupAuras">
            <summary>
            Removes all Aura effects, when the Owner is about to leave the world (due to logout / deletion).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.RemoveOthersAuras">
            <summary>
            Removes all auras that are casted by anyone but this unit itself
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.ClearVisibleAuras">
            <summary>
            Removes all visible buffs and debuffs
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.Clear">
            <summary>
            Removes all auras, including passive auras -
            Don't use unless you understand the consequences.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.ClearWithoutCleanup">
            <summary>
            Removes all auras, including passive auras, when owner is deleted.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetFreePositiveIndex">
            <summary>
            TODO: Improve by having a container for recyclable ids
            </summary>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraCollection.MountAura">
            <summary>
            Always represents your curent ride (or null when not mounted)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraCollection.GhostAura">
            <summary>
            Represents the Aura that makes us a Ghost
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.InvalidateAurasCopy">
            <summary>
            Create a new Copy of 
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.OnAuraChange(WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Called when an Aura gets added or removed
            </summary>
            <param name="aura"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.ReApplyAffectedAuras(WCell.RealmServer.Spells.Spell)">
            <summary>
            Reapplies all passive permanent Auras that are affected by the given Spell
            </summary>
            <param name="spell"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.ReapplyAllAuras">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetModifiedInt(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell,System.Int32)">
            <summary>
            Returns the modified value (modified by certain talent bonusses) of the given type for the given spell (as int)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetModifiedIntNegative(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell,System.Int32)">
            <summary>
            Returns the given value minus bonuses through certain talents, of the given type for the given spell (as int)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetModifiedFloat(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell,System.Single)">
            <summary>
            Returns the modified value (modified by certain talents) of the given type for the given spell (as float)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.HasHarmfulAura">
            <summary>
            Returns whether there are any harmful Auras on the Unit.
            Unit cannot leave combat mode while under the influence of harmful Auras.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.IsShapeshiftRequirementIgnored(WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns whether the given spell was modified to be casted 
            in any shapeshift form, (even if it usually requires a specific one).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetBleedBonusPercent">
            <summary>
            Extra damage to be applied against a bleeding target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.GetVisibleAuraCount(WCell.RealmServer.Entities.ObjectReference,WCell.Constants.Spells.DispelType)">
            <summary>
            Returns the amount of visible Auras that are casted by the given caster
            and have the given DispelType.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.InitializeAuras(WCell.RealmServer.Database.AuraRecord[])">
            <summary>
            Called after Character entered world to load all it's active Auras
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.SaveAurasNow">
            <summary>
            Save all savable auras
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.DumpTo(WCell.RealmServer.Chat.IChatTarget,System.Boolean)">
            <summary>
            Dumps all currently applied auras to the given chr
            </summary>
            <param name="receiver"></param>
            <param name="includePassive">Whether to also include invisible effects (eg through items etc)</param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection._GetEnumerator">
            <summary>
            We need a second method because yield return and return statements cannot
            co-exist in one method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.MayActivate(WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Checks whether the given Aura may be activated (see PlayerAuraCollection)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraCollection.MayActivate(WCell.RealmServer.Spells.Auras.AuraEffectHandler)">
            <summary>
            Checks whether the given Handler may be activated (see PlayerAuraCollection)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.AuraEffectHandler">
            <summary>
            An AuraEffectHandler handles the behavior of an aura
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraEffectHandler.EffectValue">
            <summary>
            The value of the underlying SpellEffect that was calculated when
            this Aura was last applied or refreshed (see <see cref="M:WCell.RealmServer.Spells.SpellEffect.CalcEffectValue(WCell.RealmServer.Entities.Unit)"/>).
            The value is multiplied by the StackCount of the Aura (<see cref="P:WCell.RealmServer.Spells.Auras.Aura.StackCount"/>).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraEffectHandler.IsPositive">
            <summary>
            whether this is a positive effect (by default: If they have a positive value)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraEffectHandler.Aura">
            <summary>
            The Aura to which this AuraEffect belongs
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.AuraEffectHandler.SpellEffect">
            <summary>
            The SpellEffect which created this AuraEffect OR:
            If the Aura was triggered by another Spell and the original SpellEffect had OverrideEffectValue = true,
            this is the SpellEffect that triggered the creation of the Aura (through TriggerSpell, ProcTriggerSpell etc).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.CheckInitialize(WCell.RealmServer.Spells.SpellCast,WCell.RealmServer.Entities.ObjectReference,WCell.RealmServer.Entities.Unit,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>		
            Check whether this handler can be applied to the given target.
            m_aura, as well as some other fields are not set when this method gets called.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.DoApply">
            <summary>
            To be called by Aura.Apply on periodic effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.DoRemove(System.Boolean)">
            <summary>
            To be called by Aura.Apply on periodic effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.Apply">
            <summary>
            Applies this EffectHandler's effect to its holder
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.Remove(System.Boolean)">
            <summary>
            Removes the effect from its holder
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.CanProcBeTriggeredBy(WCell.RealmServer.Misc.IUnitAction)">
            <summary>
            Whether this proc handler can be triggered by the given action
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.AuraEffectHandler.OnProc(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.IUnitAction)">
            <summary>
            Called when a matching proc event triggers this proc handler with the given
            triggerer and action.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.AuraIndexId">
            <summary>
            Represents a unique Aura-identifier: 2 Auras are exactly the same, only
            if they have the same spell-id and are both either positive or negative.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.IAura">
            <summary>
            Represents Unit- and AreaAuras
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.IAura.Start(WCell.RealmServer.Spells.ITickTimer,System.Boolean)">
            <summary>
            Initializes the Aura. Depending on how the Aura is created,
            it might be called internally or has to be called explicitely.
            </summary>
            <param name="noTimeout">Whether the Aura should always continue and never expire.</param>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.AddEffectToPassiveAuraHandler">
            <summary>
            Adds an extra effect to a passive Aura
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.CritCreatureMaskHandler">
            <summary>
            Always crits any creature of the given types
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.ItemEquipmentEventAuraHandler">
            <summary>
            This handler is notified whenever an Item is equipped/unequipped
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.LifeLeechPercentAuraHandler">
            <summary>
            Heals the wearer for EffectValue % when dealing damage
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.ModAllRuneCooldownsPercentHandler">
            <summary>
            Modifies all rune cooldowns by the EffectValue in percent
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.ProcEnergizeHandler">
            <summary>
            Energizes EffectValue on proc
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.ToggleAuraHandler">
            <summary>
            Applies another aura while active and removes it when turning inactive
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.TriggerDelayedEffectHandler">
            <summary>
            Triggers the TriggerSpell of the SpellEffect after a delay of EffectValue on the Owner
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Misc.ModAPByArmorHandler">
            <summary>
            Increases your attack power by $s2 for every ${$m1*$m2} armor value you have.
            TODO: Update when armor changes
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.AddProcHandler">
            <summary>
            Adds a custom ProcHandler to the Owner while its active
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.FearHandler">
            <summary>
            Forces target to run away in fear.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModConfuseHandler">
            <summary>
            Forces target to wander around.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.DamageShieldEffectHandler">
            <summary>
            Do flat damage to any attacker
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModChanceTargetDodgesAttackPercentHandler">
            <summary>
            Only used for WarriorArmsWeaponMastery
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModMeleeCritDamageBonusHandler">
            <summary>
            Increases crit damage in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModPacifyHandler">
            <summary>
            Prevents carrier from attacking or using "physical abilities"
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModSilenceHandler">
            <summary>
            Prevents carrier from attacking or using "physical abilities"
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModPacifySilenceHandler">
            <summary>
            Prevents carrier from attacking or using "physical abilities"
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModPetTalentPointsHandler">
            <summary>
            For BeastMastery.  Adds 4 talent points to all controlled pets.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModRageFromDamageDealtPercentHandler">
            <summary>
            TODO: Only used for WarriorArmsEndlessRage
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModSpellPowerByAPPctHandler">
            <summary>
            TODO: Reapply when AP changes
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Mod.ModTauntAuraHandler">
            <summary>
            Forces the wearer to only attack the caster while the Aura is applied
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModAllCooldownDurationHandler">
            <summary>
            Only in: Noxious Breath (Id: 24818)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Handlers.ModAllCooldownDurationHandler.IsPositive">
            <summary>
            If the amount of duration to be applied is negative, we have a positive effect 
            (because we decrease cooldown)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModAttackSpeedHandler">
            <summary>
            Adds AttackSpeed speed in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModBlockPercentHandler">
            <summary>
            Increases Chance to block
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModCombatRatingStat">
            <summary>
            Modifies CombatRatings
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModCritPercentHandler">
            <summary>
            Modifies MeleeCritHitRating
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModHasteHandler">
            <summary>
            Mods Melee Attack speed (positive value decreases time)
            Same as ModAttackSpeed
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModHastePercentHandler">
            <summary>
            Haste for melee, ranged and spells in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModMeleeHastePercentHandler">
            <summary>
            Haste for melee, ranged and spells in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModHealingDoneHandler">
            <summary>
            Increases healing done
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModHealingDonePctHandler">
            <summary>
            Increases healing taken in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModHealingTakenPctHandler">
            <summary>
            Increases healing done by %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModIncreaseEnergyHandler">
            <summary>
            Increase MaxPower
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModIncreaseSpeedHandler">
            <summary>
            Increases (or decreases) overall speed
            TODO: If ShapeshiftMask is set, it only applies to the given form(s)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModLanguageHandler">
            <summary>
            Temporarily changes the language of the holder
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModManaRegenHandler">
            <summary>
            Used by some Druid talents
            Regenerates mana in % of a given stat periodically (default every 5 secs)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.Handlers.ModManaRegenHandler.DefaultAmplitude">
            <summary>
            Used for ModManaRegen effects that don't have an Amplitude
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModManaRegenInterruptHandler">
            <summary>
            Boosts interrupted Mana regen.
            See: http://www.wowwiki.com/Formulas:Mana_Regen#Five_Second_Rule
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModMaxHealthHandler">
            <summary>
            Modifies MaxHealth
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModMountedSpeedAlwaysHandler">
            <summary>
            Same as ModIncreaseMountedSpeed, it seems
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModParryPercentHandler">
            <summary>
            Increases Chance to block
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModPowerCostHandler">
            <summary>
            Decreases cost for spells of certain schools (percent)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModPowerCostForSchoolHandler">
            <summary>
            Decreases cost for spells of certain schools (flat)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModRatingHandler">
            <summary>
            Modifies CombatRatings
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModReputationGainHandler">
            <summary>
            Modify the amount of reputation given.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModResistancePctHandler">
            <summary>
            TODO: Needs to be value in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModResistanceExclusiveHandler">
            <summary>
            Same as ModResistance?
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModResistSpellInterruptionPercentHandler">
            <summary>
            Increases the resistance against Spell Interruption
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModShieldBlockValuePercentHandler">
            <summary>
            Increases Chance to block
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModSilenceDurationPercentHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModSkillTalentHandler">
            <summary>
            Adds a flat modifier to one Skill
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModSpeedMountedFlightHandler">
            <summary>
            Flying mount speed effect.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModSpellCritChanceHandler">
            <summary>
            Mods Spell crit chance in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModSpellHastePercentHandler">
            <summary>
            Modidifies casting speed
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModSpellHitChanceHandler">
            <summary>
            Mods Spell crit chance in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModTargetResistanceHandler">
            <summary>
            Makes one ignore target's resistances
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModThreatHandler">
            <summary>
            Modifies threat generated by attacks of the given DamageSchools
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModTotalStatPercentHandler">
            <summary>
            Same as ModStatPercent, but including item bonuses
            TODO: Include item bonuses
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.AddCasterHitTriggerHandler">
            <summary>
            Gives a chance of $s1% of all melee and ranged attacks to land on the Caster instead of the Aura-owner
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.Handlers.AddModifierEffectHandler.Charges">
            <summary>
            The amount of remaining charges or 0 if it doesn't need any
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.AddModifierFlatHandler">
            <summary>
            All kinds of different Spell modifiers (mostly caused by talents)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.AddTargetTriggerHandler">
            <summary>
            test
            Gives EffectValue% to trigger another Spell
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.DamageImmunityHandler">
            <summary>
            Same as SchoolImmunityHandler?
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.DisarmHandler">
            <summary>
            Simply disarm melee and ranged for now
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.DispelImmunityHandler">
            <summary>
            Adds immunity against a specific DispelType
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.FlyHandler">
            <summary>
            Enables flying (mostly triggered through flying rides)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.GhostHandler">
            <summary>
            Dead players wear this
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.Handlers.GhostHandler.IsPositive">
            <summary>
            Not positive also means that its not removable
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.HoverHandler">
            <summary>
            Allows to hover
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.InterruptRegenHandler">
            <summary>
            Interrupts Regeneration while applied
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.MountedHandler">
            <summary>
            Applies a mount-aura
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ProcTriggerDamageHandler">
            <summary>
            Does school damage to its targets
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.Handlers.ProcTriggerSpellHandler.OnProc(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.IUnitAction)">
            <summary>
            Called when a matching proc event triggers this proc handler with the given
            triggerer and action.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.SafeFallHandler">
            <summary>
            Reduces the falling damage and allows to fall longer without taking any damage at all.
            The amount of yards the has been falling for is reduced by this number for the damage formular
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.SchoolAbsorbHandler">
            <summary>
            Adds damage absorption.
            
            There are two kinds of absorbtions:
            1. 100% absorbtion, up until a max is absorbed (usually)
            2. Less than 100% absorption until time runs out (or max is absorbed -> Needs customization, since its usually different each time)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ShapeshiftHandler">
            <summary>
            Changes the owner's form.
            TODO: The act of shapeshifting frees the caster of Polymorph and Movement Impairing effects.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.SplitDamageHandler">
            <summary>
            Allows to split all received damage with the caster
            Usually comes with a Dummy Aura.
            Description often points at at effect-values of: Soul Link (Id: 25228)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.ModStealthHandler">
            <summary>
            Activates Stealth (renders caster invisible for others and makes him/her sneaky)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.WaterWalkHandler">
            <summary>
            Allows to walk on water (Jesus!)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.PeriodicDamageHandler">
            <summary>
            Periodically damages the holder
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.PeriodicDamagePercentHandler">
            <summary>
            Periodically damages the holder in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.PeriodicHealthFunnelHandler">
            <summary>
            Channeled healing
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.PeriodicTriggerSpellHandler">
            <summary>
            Periodically makes the holder cast a Spell
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.PowerBurnHandler">
            <summary>
            Drains Mana and applies damage
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.RegenPercentOfTotalHealthHandler">
            <summary>
            Regenerates a percentage of your total Mana every tick
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.RegenPercentOfTotalManaHandler">
            <summary>
            Regenerates a percentage of your total Mana every tick
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.Handlers.RetainComboPointsHandler">
            <summary>
            Retains combo points, applied through another effect of this SpellCast (removes them if not used in time)
            Only in: Rogue Subtlety Premeditation (Id: 14183)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.ModStatPercentHandler.Update">
            <summary>
            Re-evaluate effect value, if stats changed
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.PeriodicallyUpdatedAuraEffectHandler">
            <summary>
            A kind of AuraEffectHandler that gets updated on every tick.
            Can be used to re-evaluate effect values of depending Auras
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Auras.PlayerAuraCollection">
            <summary>
            AuraCollection for Character objects. 
            Contains a lot of modifications and bookkeeping that is not required for NPCs.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.ModifierWithChargesCount">
            <summary>
            Amount of currently added modifiers that require charges.
            If > 0, will iterate over modifiers and remove charges after SpellCasts.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.SpellModifiersFlat">
            <summary>
            Flat modifiers of spells
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.SpellModifiersPct">
            <summary>
            Percent modifiers of spells
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.CriticalStrikeEnabledMask">
            <summary>
            Mask of spells that are allowed to crit hit, although they are not allowed to, by default
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.itemRestrictedAuras">
            <summary>
            Set of Auras that are only applied when certain items are equipped
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.shapeshiftRestrictedAuras">
            <summary>
            Set of Auras that are only applied in certain shapeshift forms
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.auraStateRestrictedAuras">
            <summary>
            Set of Auras that are only applied in certain AuraStates
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.aurasWithAuraDependentEffects">
            <summary>
            Set of Auras which have effects that depend on other Auras
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.GetModifiedInt(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell,System.Int32)">
            <summary>
            Returns the modified value (modified by certain talent bonusses) of the given type for the given spell (as int)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.GetModifiedIntNegative(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell,System.Int32)">
            <summary>
            Returns the given value minus bonuses through certain talents, of the given type for the given spell (as int)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.GetModifiedFloat(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell,System.Single)">
            <summary>
            Returns the modified value (modified by certain talents) of the given type for the given spell (as float)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.GetModifierPercent(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns the percent modifier (through certain talents) of the given type for the given spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.GetModifierFlat(WCell.Constants.Spells.SpellModifierType,WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns the flat modifier (through certain talents) of the given type for the given spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.MayActivate(WCell.RealmServer.Spells.Auras.Aura,System.Boolean)">
            <summary>
            Check all restrictions on the given Aura (optionally, exclude item check)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Auras.PlayerAuraCollection.CanSpellCrit(WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns wehther the given spell is allowed to crit, if it was not
            allowed to crit by default. (Due to Talents that override Spell behavior)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellHandler">
            <summary>
            Static helper class for packet sending/receiving and container of all spells
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendSpellsAndCooldowns(WCell.RealmServer.Entities.Character)">
            <summary>
            Sends initially all spells and item cooldowns to the character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendSpellRemoved(WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Removes a spell from the client's spellbook
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendCastSuccess(WCell.RealmServer.Entities.ObjectBase,System.UInt32,WCell.RealmServer.Entities.Character)">
            <summary>
            Sent to hit targets before CastGo
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendSpellGo(WCell.RealmServer.Entities.IEntity,WCell.RealmServer.Spells.SpellCast,System.Collections.Generic.ICollection{WCell.RealmServer.Entities.WorldObject},System.Collections.Generic.ICollection{WCell.RealmServer.Spells.MissedTarget},System.Byte)">
            <summary>
            Sent after spell start. Triggers the casting animation.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendCastFailed(WCell.RealmServer.Network.IPacketReceiver,System.Byte,WCell.RealmServer.Spells.Spell,WCell.Constants.Spells.SpellFailedReason)">
            <summary>
            This is sent to caster if spell fails
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendCastFailPackets(WCell.RealmServer.Spells.SpellCast,WCell.Constants.Spells.SpellFailedReason)">
            <summary>
            Spell went wrong or got cancelled
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendCastDelayed(WCell.RealmServer.Spells.SpellCast,System.Int32)">
            <summary>
            Delays the spell-cast
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendChannelStart(WCell.RealmServer.Spells.SpellCast,WCell.Constants.Spells.SpellId,System.Int32)">
            <summary>
            Starts Channeling
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendChannelUpdate(WCell.RealmServer.Spells.SpellCast,System.UInt32)">
            <summary>
            Changes the time of the channel
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendVisual(WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellId)">
            <summary>
            Shows a spell visual
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendVisual(WCell.RealmServer.Entities.WorldObject,System.UInt32)">
            <summary>
            Shows a spell visual
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendImpact(WCell.RealmServer.Entities.WorldObject,System.UInt32)">
            <summary>
            Shows a spell Impact animation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendClearCoolDown(WCell.RealmServer.Entities.Character,WCell.Constants.Spells.SpellId)">
            <summary>
            Clears a single spell's cooldown
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendSpellCooldown(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Network.IRealmClient,System.UInt32,System.UInt16)">
            <summary>
            Send a custom cooldown time to the client
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendItemCooldown(WCell.RealmServer.Network.IRealmClient,System.UInt32,WCell.RealmServer.Entities.IEntity)">
            <summary>
            Send a custom cooldown time to the client
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendCooldownUpdate(WCell.RealmServer.Entities.Character,WCell.Constants.Spells.SpellId)">
            <summary>
            Forces the client to start or update a cooldown timer on the given single spell
            (mostly important for certain talents and item spells that don't automatically start cooling down)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.SendSpellModifier(WCell.RealmServer.Entities.Character,System.Byte,WCell.Constants.Spells.SpellModifierType,System.Int32,System.Boolean)">
            <summary>
            Sends spell modifier update
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.HandleCancelChanneling(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Somehow seems to be the same as CMSG_CANCEL_CAST
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.HandleUnlearnSpell(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Probably can only be sent by God client
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellHandler.AnimateSpellAdd">
            <summary>
            Whether to cast the learn spell when adding spells
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellHandler.MinCooldownSaveTimeMillis">
            <summary>
            Minimum length of cooldowns that are to be saved to DB in milliseconds
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellHandler.SpellsRequiringTools">
            <summary>
            All spells that require tools
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellHandler.DOSpells">
            <summary>
            All spells that represent DynamicObjects.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellHandler.StaticDOs">
            <summary>
            All staticly spawned DynamicObjects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Get(System.UInt32)">
            <summary>
            Returns the spell with the given spellId or null if it doesn't exist
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Get(WCell.Constants.Spells.SpellId)">
            <summary>
            Returns the spell with the given spellId or null if it doesn't exist
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.AddCustomSpell(System.String)">
            <summary>
            Can be used to add a Spell that does not exist.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.AddCustomSpell(System.UInt32,System.String)">
            <summary>
            Can be used to add a Spell that does not exist.
            Usually used for spells that are unknown to the client to signal a certain state.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(WCell.Constants.Spells.SpellLineId,System.Action{WCell.RealmServer.Spells.Spell})">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(System.Action{WCell.RealmServer.Spells.Spell},WCell.Constants.Spells.SpellLineId,WCell.Constants.Spells.SpellId[])">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(System.Action{WCell.RealmServer.Spells.Spell},WCell.Constants.Spells.SpellLineId,WCell.Constants.Spells.SpellLineId,WCell.Constants.Spells.SpellId[])">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(System.Action{WCell.RealmServer.Spells.Spell},WCell.Constants.Spells.SpellId[])">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(System.Action{WCell.RealmServer.Spells.Spell},WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(System.Action{WCell.RealmServer.Spells.Spell},System.Collections.Generic.IEnumerable{WCell.Constants.Spells.SpellId})">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Apply(System.Action{WCell.RealmServer.Spells.Spell},System.Collections.Generic.IEnumerable{WCell.RealmServer.Spells.Spell})">
            <summary>
            Apply the given action on all Spells with the given ids
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.GetAffectedSpellLines(WCell.Constants.ClassId,System.UInt32[])">
            <summary>
            Returns a list of all SpellLines that are affected by the given spell family set (very long bit field)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.Initialize2">
            <summary>
            Second initialization pass
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellHandler.LoadOverrides">
            <summary>
            Load given Spell-data from DB
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellHandler.SpellEffectCreators">
            <summary>
            All effect handler-creation delegates, indexed by their type
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.AISpellSettings">
            <summary>
            Defines parameters of AI when casting this spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.AISpellSettings.IdleTimeAfterCastMillis">
            <summary>
            Amount of time to idle after casting the spell
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.CooldownRange">
            <summary>
            Defines minimum and maximum of possible Spell cooldown.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.AISpellCooldownCategory">
            <summary>
            Categories of default cooldowns for AI casters
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.AISpellCooldownCategory.AuraBeneficial">
            <summary>
            Buff or positive aura (eg. to improve stats, speed etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.AISpellCooldownCategory.AuraHarmful">
            <summary>
            Debuff or negative aura (eg. to reduce stats, speed etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.AISpellCooldownCategory.DirectBeneficial">
            <summary>
            Positive non-aura spell (healing etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.AISpellCooldownCategory.DirectHarmful">
            <summary>
            Negative non-aura spell (damage spells)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.AISpellUtil.DecideDefaultTargetHandlerDefintion(WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Called on every SpellEffect, after initialization
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Effects.AddComboPointsEffectHandler.Apply(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Applying combopoints cannot result in a fail
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.AddExtraAttacksEffectHandler">
            <summary>
            Does x extra swings
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.ApplyAreaAuraEffectHandler">
            <summary>
            Represents a mobile Aura-Effect that is applied to everyone in the area.
            The SpellCast-object creates AreaAuras explicitely.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.ApplyAuraEffectHandler">
            <summary>
            Applies a single AuraEffectHandler to every target
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.Effects.ApplyAuraEffectHandler.HasOwnTargets">
            <summary>
            Aura-Spells should always have targets
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Effects.ApplyAuraEffectHandler.AddAuraHandlers(System.Collections.Generic.List{WCell.RealmServer.Spells.AuraApplicationInfo})">
            <summary>
            Adds all AuraEffectHandlers that this SpellEffectHandler created, 
            indexed by the target they have been created for (if this effect creates Auras at all)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.ApplyStatAuraPercentEffectHandler">
            <summary>
            Weird stuff:
            Mostly like ApplyAura but often (not always!) applies to all enemies around the caster, although target = Self.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.PersistantAreaAuraEffectHandler">
            <summary>
            Creates a Dynamic Object, which -contrary to what its name suggests- is a static animation in the world and
            applies a static <see cref="T:WCell.RealmServer.Spells.Auras.AreaAura">AreaAura</see> to everyone who is within the radius of influence
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.Custom.CannibalizeEffectHandler">
            <summary>
            Have an undead feed of flesh
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.Custom.RemoveCooldownEffectHandler">
            <summary>
            Removes the cooldown for the SpellEffect.AffectSpellSet
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.DisenchantEffectHandler">
            <summary>
            Disenchant Visual (Id: 61335)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.DistractEffectHandler">
            <summary>
            TODO: Stop movement for a short time or until someting happened to the NPC
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.DualWeildEffectHandler">
            <summary>
            Should be a passive spell
            Adds the DualWeild skill
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.DuelEffectHandler">
            <summary>
            The caster requests a duel with the given target.
            Only used in: Duel (Id: 7266) (non-displayed Skill)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.EnergizeEffectHandler">
            <summary>
            Adds any kind of Power
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.EnvironmentalDamageEffectHandler">
            <summary>
            Mostly caused by burning fires
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.FeedPetEffectHandler">
            <summary>
            Is used to feed the currently ActivePet of the Caster
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.HealEffectHandler">
            <summary>
            Either just heals or trades one Rejuvenation or Regrowth for a lot of healing
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.KnockBackEffectHandler">
            <summary>
            Knocks all targets back
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.LanguageEffectHandler">
            <summary>
            Adds a language
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.NormalizedWeaponDamagePlusEffectHandler">
            <summary>
            Adds flat melee damage to the attack
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.OpenLockEffectHandler">
            <summary>
            Tries to open a GameObject or Item or disarm a trap
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.ResurrectFlatEffectHandler">
            <summary>
            TODO: Target gets a res query
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SchoolDamagePercentEffectHandler">
            <summary>
            Deal EffectValue% damage (don't add further modifiers)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SchoolDamageByAPPctEffectHandler">
            <summary>
            Deals EffectValue in % of Melee AP
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SelfResurrectEffectHandler">
            <summary>
            Only resurrects oneself and no one else! :)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SendEventEffectHandler">
            <summary>
            Quest related
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SkillEffectHandler">
            <summary>
            Uses a Skill (add skill checks here?)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SkillStepEffectHandler">
            <summary>
            Learns a new Skill-Tier
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.StealBeneficialBuffEffectHandler">
            <summary>
            Steals a positive Aura -which has a timeout and is not channeled- off the target and applies it on oneself
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.CreateItemEffectHandler">
            <summary>
            Creates a new Item and puts it in the caster's backpack
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SummonEffectHandler">
            <summary>
            Summons a friendly companion, Pets, Guardians or Totems
            TODO: Handle Totems
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.SummonPetEffectHandler">
            <summary>
            Summons the current pet or a custom one
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.TameCreatureEffectHandler">
            <summary>
            Tames the target
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.ThreatHandler">
            <summary>
            Generates Threat
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.TradeSkillEffectHandler">
            <summary>
            Learns a Trade Skill (add skill checks here?)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.TriggerSpellEffectHandler">
            <summary>
            Triggers a spell on this Effect's targets
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.UnusedEffectHandler">
            <summary>
            This handles all the unused effects
            Technically should not be called since no spells have the effect this takes the place of
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.VideoEffectHandler">
            <summary>
            Video Effect.
            Spells with this effect might be used to trigger client-side video sequences!
            
            eg.:
            
            every Flight Path
            Filming (Id: 28129)
            Stormcrow Amulet (Id: 31606)
            Elekk Taxi (Id: 31788)
            Attack Run 1 (Id: 32059) - Attack Run 4
            Nethrandamus Flight (Id: 32551)
            Gateways Murket and Shaadraz
            Aerial Assault Flight (Horde)
            Aerial Assault Flight (Heavy Bomb)
            ....
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Effects.WeaponEffectHandler">
            <summary>
            Used for weapon proficiencies
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.ITickTimer">
            <summary>
            An interface for a repeating timer with ticks (that maybe controls other timers)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.ITickTimer.TimeLeft">
            <summary>
            The total amount of remaining milliseconds
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.ITickTimer.Until">
            <summary>
            The Environment.TickCount of the last Tick (Timer will close afterwards)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.ITickTimer.Amplitude">
            <summary>
            The average amplitude between ticks (in ms)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.ITickTimer.Duration">
            <summary>
            The total duration of this Timer (in ms)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.ITickTimer.Ticks">
            <summary>
            The amount of ticks that already passed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.ITickTimer.MaxTicks">
            <summary>
            The maximum amount of ticks
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.ITickTimer.OnRemove(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.Auras.Aura)">
            <summary>
            Called when the given Aura is removed from the given owner
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.NPCSpellCollection">
            <summary>
            NPC spell collection
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.NPCSpellCollection.DefaultNPCSpellCooldownMillis">
            <summary>
            Cooldown of NPC spells, if they don't have one
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.NPCSpellCollection.MaxCombatSpellRange">
            <summary>
            The max combat of any 1vs1 combat spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.NPCSpellCollection.ShuffleReadySpells">
            <summary>
            Shuffles all currently ready Spells
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.NPCSpellCollection.AddReadySpell(WCell.RealmServer.Spells.Spell)">
            <summary>
            Adds the given spell as ready. Once casted, the spell will be removed.
            This can be used to signal a one-time cast of a spell whose priority is to be
            compared to the other spells.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.NPCSpellCollection.AddCooldown(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Entities.Item)">
            <summary>
            When NPC Spells cooldown, they get removed from the list of
            ready Spells.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.NPCSpellCollection.GetRemainingCooldownMillis(WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns the delay until the given spell has cooled down in milliseconds
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.PlayerSpellCollection.m_sendPackets">
            <summary>
            Whether to send Update Packets
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.PlayerSpellCollection.m_idCooldowns">
            <summary>
            All current Spell-cooldowns. 
            Each SpellId has an expiry time associated with it
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.PlayerSpellCollection.m_categoryCooldowns">
            <summary>
            All current category-cooldowns. 
            Each category has an expiry time associated with it
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.PlayerSpellCollection.m_runes">
            <summary>
            The runes of this Player (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.PlayerSpellCollection.OwnerChar">
            <summary>
            Owner as Character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.PlayerSpellCollection.Runes">
            <summary>
            The set of runes of this Character (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.OnlyAdd(WCell.RealmServer.Database.SpellRecord)">
            <summary>
            Adds the spell without doing any further checks nor adding any spell-related skills or showing animations (after load)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.AddSpell(WCell.RealmServer.Spells.Spell,System.Boolean)">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.Replace(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Spells.Spell)">
            <summary>
            Replaces or (if newSpell == null) removes oldSpell.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.OnRemove(WCell.RealmServer.Spells.Spell)">
            <summary>
            Enqueues a new task to remove that spell from DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.AddSpellRequirements(WCell.RealmServer.Spells.Spell)">
            <summary>
            Add everything to the caster that this spell requires
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.IsReady(WCell.RealmServer.Spells.Spell)">
            <summary>
            Returns true if spell is currently cooling down.
            Removes expired cooldowns of that spell.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.ClearCooldowns">
            <summary>
            Clears all pending spell cooldowns.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.PlayerSpellCollection.ClearCooldown(WCell.RealmServer.Spells.Spell,System.Boolean)">
            <summary>
            Clears the cooldown for this spell
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WCell.RealmServer.Spells.PlayerSpellCollection.OnSave" -->
        <member name="T:WCell.RealmServer.Spells.RuneSet">
            <summary>
            A set of Runes that Death Knights use
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.GetReadyRunes(WCell.Constants.Spells.RuneType)">
            <summary>
            Returns how many runes of the given type are ready
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.HasEnoughRunes(WCell.RealmServer.Spells.Spell)">
            <summary>
            Whether there are enough runes in this set to satisfy the given cost requirements
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.ConsumeRunes(WCell.RealmServer.Spells.Spell)">
            <summary>
            Method is internal because we don't have a packet yet to signal the client spontaneous cooldown updates
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.StartCooldown(System.UInt32)">
            <summary>
            TODO: Send update to client, if necessary
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.UnsetCooldown(System.UInt32)">
            <summary>
            TODO: Send update to client, if necessary
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.GetCooldown(WCell.Constants.Spells.RuneType)">
            <summary>
            Gets the cooldown of the given RuneType in rune refreshment per second.
            For example:
            1 = a rune refreshes in one second;
            0.1 = a rune refrehes in 10 seconds.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.ModAllCooldownsPercent(System.Int32)">
            <summary>
            Modifies all cooldowns by the given percentage
            </summary>
            <param name="percentDelta">If this value is 100, runes will cooldown in half the time</param>
            <returns>The delta of all rune types</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.RuneSet.GetActiveRuneMask">
            <summary>
            Used for packets
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.ShapeshiftInfoFlags.NotActualShapeshift">
            <summary>
            This is used for stances and anything that does not really shift the form of the caster
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.ShapeshiftInfoFlags.AgilityBasedAttackPower">
            <summary>
            Only used in cat form
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.ShapeshiftEntry.AttackTime">
            <summary>
            In millis
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellCast">
            <summary>
            Represents the progress of any Spell-casting
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.PrepareAI">
            <summary>
            Called during Preparation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.OnAICasted">
            <summary>
            Called when finished casting
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.CheckDebuffResist(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.Spell,System.Int32,System.Boolean)">
            <summary>
            Checks whether the given target resisted the debuff, represented through the given spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellCast.m_pushbacks">
            <summary>
            The amount of Pushbacks (the more Pushbacks, the less effective they are)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Spell">
            <summary>
            Spell being casted
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Handlers">
            <summary>
            All SpellEffectHandlers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.SelectedTarget">
            <summary>
            Something that has been selected by the Caster for this Spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.InitialTargets">
            <summary>
            Returns all targets that this SpellCast initially had
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.TargetLoc">
            <summary>
            The target location for a spell which has been sent by the player
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.TargetItem">
            <summary>
            An Item that this Spell is being used on
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.CasterObject">
            <summary>
            The Unit or GameObject (traps etc), triggering this spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.CasterUnit">
            <summary>
            The caster himself or owner of the casting Item or GameObject
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.CasterChar">
            <summary>
            The caster himself or owner of the casting Item or GameObject
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.CasterLevel">
            <summary>
            This corresponds to the actual level of Units
            and for GOs returns the level of the owner.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.CasterItem">
            <summary>
            Any kind of item that was used to trigger this cast
            (trinkets, potions, food etc.)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.SourceLoc">
            <summary>
            The source location for a spell which has been sent by the player
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Client">
            <summary>
            The Caster's or Caster's Master's Client (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Map">
            <summary>
            The map where the SpellCast happens
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.MapId">
            <summary>
            Needed for IWorldLocation interface
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Position">
            <summary>
            Needed for IWorldLocation interface
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Context">
            <summary>
            The context to which the SpellCast belongs
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.StartTime">
            <summary>
            The time at which the cast started (in millis since system start)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.CastDelay">
            <summary>
            Time in milliseconds that it takes until the spell will start (0 if GodMode)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.RemainingCastTime">
            <summary>
            The time in milliseconds between now and the actual casting (meaningless if smaller equal 0).
            Can be changed. Might return bogus numbers if not casting.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Channel">
            <summary>
            An object representing the channeling of a spell (any spell that is performed over a period of time)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.Id">
            <summary>
            Sent by the caster when initializing a spell.
            Can be ignored for spells not casted by players.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.IsAICast">
            <summary>
            Whether the SpellCast was started by an AI-controlled Unit
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.IsPlayerCast">
            <summary>
            Whether the SpellCast was started by a Player
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.IsCasting">
            <summary>
            whether the cast is currently being performed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.IsChanneling">
            <summary>
            whether the caster is currently channeling a spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.IsPending">
            <summary>
            Whether this SpellCast is waiting to be casted on next strike
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.IsPassive">
            <summary>
            Returns false if Player actively casted the spell, else true.
            Passive SpellCasts wont do any of the requirement checks.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.GodMode">
            <summary>
            Ignore most limitations
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.TriggerEffect">
            <summary>
            The SpellEffect that triggered this cast (or null if not triggered)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCast.TriggerAction">
            <summary>
            The action that triggered this SpellCast, if any.
            If you want to save the Action for a point later in time, you need to
            increment the ReferenceCount, and decrement it when you are done with it.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.#ctor">
            <summary>
            Creates a recyclable SpellCast.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Start(WCell.RealmServer.Spells.Spell,WCell.RealmServer.RealmPacketIn,System.Byte,System.Byte,System.UInt32)">
            <summary>
            This starts a spell-cast, requested by the client.
            The client submits where or what the user selected in the packet.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Prepare(WCell.RealmServer.Spells.Spell,System.Boolean,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Use this method to change the SpellCast object after it has been prepared.
            If no changes are necessary, simply use <see cref="M:WCell.RealmServer.Spells.SpellCast.Start(WCell.RealmServer.Spells.Spell,System.Boolean,WCell.RealmServer.Entities.WorldObject[])"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.SendCastStart">
            <summary>
            Is sent in either of 3 cases:
            1. At the beginning of a Cast of a normal Spell that is not instant
            2. After the last check if its instant and not a weapon ability
            3. On Strike if its a weapon ability
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.CheckPlayerCast(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Checks the current Cast when Players are using it
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.CheckHit">
            <summary>
            Check if SpellCast hit the targets.
            </summary>
            <remarks>Never returns null</remarks>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.CheckTame(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC)">
            <summary>
            Checks the current SpellCast parameters for whether taming the Selected NPC is legal.
            Sends the TameFailure packet if it didn't work
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.ConsumePower(System.Int32)">
            <summary>
            Tries to consume the given amount of power
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.ConsumeReagents">
            <summary>
            Tries to consume all reagents or cancels the cast if it failed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Pushback">
            <summary>
            Caused by damage.
            Delays the cast and might result in interruption (only if not DoT).
            See: http://www.wowwiki.com/Interrupt
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.TriggerSingle(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Casts the given spell on the given target, inheriting this SpellCast's information.
            SpellCast will automatically be enqueued if the Character is currently not in the world.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.TriggerAll(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Spells.Spell[])">
            <summary>
            Triggers all given spells instantly on the given single target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Trigger(WCell.Constants.Spells.SpellId,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Casts the given spell on the given targets within this SpellCast's context.
            Finds targets automatically if the given targets are null.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Trigger(WCell.Constants.Spells.SpellId,WCell.RealmServer.Spells.SpellEffect,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Casts the given spell on the given targets within this SpellCast's context.
            Finds targets automatically if the given targets are null.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Trigger(WCell.Constants.Spells.SpellId,WCell.RealmServer.Spells.SpellEffect,WCell.RealmServer.Misc.IUnitAction,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Casts the given spell on the given targets within this SpellCast's context.
            Finds targets automatically if the given targets are null.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Trigger(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Spells.SpellEffect,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Casts the given spell on the given targets within this SpellCast's context.
            Determines targets and hostility, based on the given triggerEffect.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Trigger(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Spells.SpellEffect,WCell.RealmServer.Misc.IUnitAction,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Casts the given spell on the given targets within this SpellCast's context.
            Determines targets and hostility, based on the given triggerEffect.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Trigger(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Entities.WorldObject[])">
            <summary>
            Casts the given spell on the given targets within this SpellCast's context.
            Finds targets automatically if the given targets are null.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.TriggerSelected(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Casts the given spell on targets determined by the given Spell.
            The given selected object will be the target, if the spell is a single target spell.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.ValidateAndTriggerNew(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Entities.Unit,WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Misc.IUnitAction,WCell.RealmServer.Spells.SpellEffect)">
            <summary>
            Creates a new SpellCast object to trigger the given spell.
            Validates whether the given target is the correct target
            or if we have to look for the actual targets ourselves.
            Revalidate targets, if it is:
            - an area spell 
            - a harmful spell and currently targeting friends
            - not harmful and targeting an enemy
            </summary>
            <param name="spell"></param>
            <param name="target"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Cleanup">
            <summary>
            Close the timer and get rid of circular references; will be called automatically
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.CheckCasterValidity">
            <summary>
            Is called whenever the validy of the caster might have changed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Remove(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Remove target from targets set and handler targets
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.PrePerform">
            <summary>
            Does some sanity checks and adjustments right before perform
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Perform">
            <summary>
            Performs the actual Spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.CalculateImpactDelay">
            <summary>
            Calculates the delay until a spell impacts its target in milliseconds
            </summary>
            <returns>delay in ms</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.Impact">
            <summary>
            Validates targets and applies all SpellEffects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.TriggerProcOnTargets(WCell.Constants.Spells.ProcTriggerFlags)">
            <summary>
            Triggers proc on all targets of SpellCast
            </summary>
            <param name="flags">What happened to targets ie. ProcTriggerFlags.ReceivedHarmfulSpell</param>
            <returns>Combination of hit result on all targets.</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCast.TriggerProcOnCaster(WCell.Constants.Spells.ProcTriggerFlags,WCell.Constants.Spells.ProcHitFlags)">
            <summary>
            Trigger proc on the caster of the spell.
            </summary>
            <param name="flags">What spell caster casted ie. ProcTriggerFlags.DoneHarmfulSpell</param>
            <param name="hitFlags">Hit result of the spell</param>
        </member>
        <member name="T:WCell.RealmServer.Spells.MissedTarget">
            <summary>
            Represents a target which didn't get hit by a SpellCast
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellCollection.m_byId">
            <summary>
            All spells by id
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellCollection.m_TargetTriggers">
            <summary>
            Additional effects to be triggered when casting certain Spells
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCollection.Owner">
            <summary>
            Required by SpellCollection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellCollection.Count">
            <summary>
            The amount of Spells in this Collection
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.AddSpell(System.UInt32)">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.AddSpell(WCell.Constants.Spells.SpellId)">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.AddSpell(WCell.RealmServer.Spells.Spell)">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.AddSpell(System.Collections.Generic.IEnumerable{WCell.Constants.Spells.SpellId})">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.AddSpell(WCell.Constants.Spells.SpellId[])">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.AddSpell(System.Collections.Generic.IEnumerable{WCell.RealmServer.Spells.Spell})">
            <summary>
            Teaches a new spell to the unit. Also sends the spell learning animation, if applicable.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.OnlyAdd(WCell.Constants.Spells.SpellId)">
            <summary>
            Adds the spell without doing any further checks or adding any spell-related skills or showing animations
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.GetHighestRankOf(WCell.Constants.Spells.SpellLineId)">
            <summary>
            Gets the highest rank of the line that this SpellCollection contains
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.GetHighestRankOf(WCell.RealmServer.Spells.SpellLine)">
            <summary>
            Gets the highest rank of the line that this SpellCollection contains
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.Replace(WCell.Constants.Spells.SpellId,WCell.Constants.Spells.SpellId)">
            <summary>
            Only works if you have 2 valid spell ids and oldSpellId already exists.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.Replace(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Spells.Spell)">
            <summary>
            Replaces or (if newSpell == null) removes oldSpell; does nothing if oldSpell doesn't exist.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.ClearCooldown(WCell.Constants.Spells.SpellId,System.Boolean)">
            <summary>
            Clears the cooldown for the given spell
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellCollection.TriggerSpellsFor(WCell.RealmServer.Spells.SpellCast)">
            <summary>
            Trigger all spells that might be triggered by the given Spell
            </summary>
            <param name="spell"></param>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffect.SummonEntry">
            <summary>
            Only valid for SpellEffects of type Summon
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffect.AffectedLines">
            <summary>
            All specific SpellLines that are affected by this SpellEffect
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.RepairBrokenTargetPairs">
            <summary>
            More or less frequently occuring target pairs that make no sense
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.SharesTargetsWith(WCell.RealmServer.Spells.SpellEffect,System.Boolean)">
            <summary>
            Whether this effect can share targets with the given effect
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.AddRequiredActivationAuras(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Adds a set of Auras of which at least one need to be active for this SpellEffect to activate
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.AddAffectingSpells(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Adds a set of spells to the explicite relationship set of this effect, which is used to determine whether
            a certain Spell and this effect have some kind of influence on one another (for procs, talent modifiers etc).
            Only adds the spells, will not work on the spells' trigger spells.
            </summary>
            <param name="abilities"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.AddAffectingSpells(WCell.Constants.Spells.SpellId[])">
            <summary>
            Adds a set of spells to the explicite relationship set of this effect, which is used to determine whether
            a certain Spell and this effect have some kind of influence on one another (for procs, talent modifiers etc).
            Only adds the spells, will not work on the spells' trigger spells.
            </summary>
            <param name="abilities"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.AddToAffectMask(WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Adds a set of spells to this Effect's AffectMask, which is used to determine whether
            a certain Spell and this effect have some kind of influence on one another (for procs, talent modifiers etc).
            Usually the mask also contains any spell that is triggered by the original spell.
            
            If you get a warning that the wrong set is affected, use AddAffectingSpells instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.MakeProcWithMask(WCell.RealmServer.Spells.Auras.AuraEffectHandlerCreator,WCell.Constants.Spells.SpellLineId[])">
            <summary>
            Uses the AffectMask, rather than exclusive trigger spells. This is important if also spells
            that are triggerd by the triggered spells are allowed to trigger this proc.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.GetModifiedDamage(WCell.RealmServer.Entities.Unit)">
            <summary>
            Get's Basepoints for a spell after applying DamageMods.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.EffectType">
            <summary>
            SpellEffectNames.dbc - no longer included in mpqs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.DiceSides">
            <summary>
            Random value max (BaseDice to DiceSides)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.BasePoints">
            <summary>
            Base value
            Value = BasePoints + rand(BaseDice, DiceSides)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.Radius">
            <summary>
            SpellRadius.dbc
            Is always at least 5y. 
            If area-related spells dont have a radius we just look for very close targets
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.AuraType">
            <summary>
            SpellAuraNames.dbc - no longer included in mpqs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.Amplitude">
            <summary>
            Interval-delay in milliseconds
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffect.GetMaxTicks">
            <summary>
            Returns the max amount of ticks of this Effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.ProcValue">
            <summary>
            $e1/2/3 in Description
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.ItemId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.TriggerSpell">
            <summary>
            Not set during InitializationPass 2, so 
            for fixing things, use GetTriggerSpell() instead.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.PointsPerComboPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.AffectMask">
            <summary>
            Multi purpose.
            1. If it is a proc effect, determines set of spells that can proc this proc (use <see cref="M:WCell.RealmServer.Spells.SpellEffect.AddToAffectMask(WCell.Constants.Spells.SpellLineId[])"/>)
            2. If it is a modifier effect, determines set of spells to be affected by this effect
            3. Ignored in some cases
            4. Special applications in some cases
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.APValueFactor">
            <summary>
            Factor of the amount of AP to be added to the EffectValue (1.0f = +100%)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.SpellPowerValuePct">
            <summary>
            Amount of Spell Power to be added to the EffectValue in % (1 = +1%)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.APPerComboPointValueFactor">
            <summary>
            Factor of the amount of AP to be added to the EffectValue per combo point
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.RequiredShapeshiftMask">
            <summary>
            Only use this effect if the caster is in the given form (if given)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.OverrideEffectValue">
            <summary>
            If set, it will use the SpellEffect that triggered or proc'ed this SpellEffect (if any)
            instead of this one.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.AffectSpellSet">
            <summary>
            Explicitely defined spells that are somehow related to this effect.
            Is used for procs, talent-modifiers and AddTargetTrigger-relations mostly. 
            Can be used for other things.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.RequiredActivationAuras">
            <summary>
            Set of Auras that need to be active for this effect to activate
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.EffectValueOverrideEffect">
            <summary>
            If the caster has the spell of the EffectValueOverrideEffect it uses it for EffectValue calculation.
            If not it uses this Effect's original value.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.CustomTargetHandlerDefintion">
            <summary>
            Used to determine the targets for this effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.AITargetHandlerDefintion">
            <summary>
            Used only by AI to determine targets
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.CustomTargetEvaluator">
            <summary>
            Evaluates targets for non-AI spell casts
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.AITargetEvaluator">
            <summary>
            Evaluates targets for AI spell casts
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.Spell">
            <summary>
            The spell to which this effect belongs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsAreaEffect">
            <summary>
            Applies to targets in a specific area
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsTargetAreaEffect">
            <summary>
            Whether this requires the caster to target the area
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsAreaAuraEffect">
            <summary>
            Applies to targets in a specific area
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsSummon">
            <summary>
            Summons something
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsPeriodic">
            <summary>
            Whether it happens multiple times (certain Auras or channeled effects)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect._IsPeriodicAura">
            <summary>
            Probably useless
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.HasTargets">
            <summary>
            Whether this effect has actual Objects as targets
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsHealEffect">
            <summary>
            Whether this is a heal-effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsDamageEffect">
            <summary>
            Whether this is a damage effect
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsProc">
            <summary>
            Whether this Effect is triggered by Procs
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.HarmType">
            <summary>
            Harmful, neutral or beneficial
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsStrikeEffectFlat">
            <summary>
            Whether this effect gives a flat bonus to your strike's damage
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsStrikeEffectPct">
            <summary>
            Whether this effect gives a percent bonus to your strike's damage
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffect.IsStrikeEffect">
            <summary>
            Whether this is an effect that applies damage on strike
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsEnchantmentEffect">
            <summary>
            Wheter this Effect enchants an Item
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.MiscBitSet">
            <summary>
            All set bits of the MiscValue field. 
            This is useful for all SpellEffects whose MiscValue is a flag field.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.MinValue">
            <summary>
            Set to the actual (min) EffectValue
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsEnhancer">
            <summary>
            Whether this effect boosts other Spells
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.IsTotem">
            <summary>
            Whether this Effect summons a Totem
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellEffect.AffectMaskBitSet">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffect.IsScripted">
            <summary>
            Whether this spell effect (probably needs special handling)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellEffectHandler">
            <summary>
            A SpellEffectHandler handles one SpellEffect during a SpellCast. 
            Supplied Caster and Target arguments will be checked against the Handler's CasterType and TargetType 
            properties before the Application of the Effect begins.
            The following methods will be called after another, on each of a Spell's SpellEffects:
            Before starting:
            1. Init - Initializes all targets (by default adds standard targets) and checks whether this effect can succeed
            When performing:
            2. CheckValidTarget - Checks whether this effect may be applied upon the given target
            3. Apply - If none of the effects failed, applies the effect (by default to all targets)
            After performing:
            4. Cleanup - Cleans up everything that is not wanted anymore
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffectHandler.HasOwnTargets">
            <summary>
            whether Targets need to be initialized
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffectHandler.CasterType">
            <summary>
            The required Type for the Caster
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellEffectHandler.TargetType">
            <summary>
            The required Type for all Targets
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.Initialize">
            <summary>
            Initializes this effect and checks whether the effect can be casted *before* Targets have been initialized.
            Use CheckValidTarget to validate Targets.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.InitializeTarget(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            This method is called on every target during CheckApply(). 
            Invalid targets either lead to Spell-Fail or the target being removed from Target-List.
            </summary>
            <returns>whether the given target is valid.</returns>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.Apply">
            <summary>
            Apply the effect (by default to all targets of the targettype)
            Returns the reason for why it went wrong or SpellFailedReason.None
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.Apply(WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Apply the effect to a single target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.Cleanup">
            <summary>
            Cleans up (if there is anything to clean)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.CheckCasterType(WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Called automatically after Effect creation, to check for valid caster type: 
            If invalid, a developer allowed a spell to be casted from the wrong context (or not?)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.CalcDamageValue">
            <summary>
            Used for one-shot damage and healing effects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellEffectHandler.CalcDamageValue(System.Int32)">
            <summary>
            Used for one-shot damage and healing effects
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellGroup">
            <summary>
            A set of Spells
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.AuraCasterGroup.MaxCount">
            <summary>
            The amount of Auras from this group that one caster may 
            apply to a single target.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellLine">
            <summary>
            SpellLines are holding class-spells of different Ranks together
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellLine.HighestRank">
            <summary>
            The spell with the highest rank in this line
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellProcEventEntry">
            <summary>
            Represents a row from UDB's spell_proc_event database table.
            Defines some corrections for spells
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.ProcEventHelper">
            <summary>
            Contains a list of all SpellProcEventEntries and some helper functions
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.ProcEventHelper.PatchSpells(WCell.RealmServer.Spells.Spell[])">
            <summary>
            Apply custom proc settings from SpellProcEventEntry to all spells
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.ProcEventHelper.PatchSpell(WCell.RealmServer.Spells.Spell,WCell.RealmServer.Spells.SpellProcEventEntry)">
            <summary>
            Apply custom proc settings from SpellProcEventEntry to a given spell
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellSummonHandler">
            <summary>
            SpellSummonHandler's define how objects/NPCs of certain summontypes are to be summoned
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellSummonCritterHandler">
            <summary>
            Non-combat pets
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellSummonPetHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellSummonEntry.DetermineAmountBySpellEffect">
            <summary>
            If set to false, the amount determines health
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders">
            <summary>
            Contains default spell targeting Adders.
            For more info, refer to: http://wiki.wcell.org/index.php?title=API:Spells#Targeting
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddSummon(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Your current summon or self
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddSelection(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Adds the object or unit that has been chosen by a player when the spell was casted
            </summary>
            <param name="targets"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddSelection(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@,System.Boolean)">
            <summary>
            Adds the selected targets and chain-targets (if any)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddAreaSource(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Adds targets around the caster
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddAreaDest(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Adds targets around the target area
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddItemOrObject(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Used for Lock picking and opening (with or without keys)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetAdders.AddSecondHighestThreatTarget(WCell.RealmServer.Spells.SpellTargetCollection,WCell.RealmServer.Spells.Targeting.TargetFilter,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetDefinitions.GetTargetDefinition(WCell.Constants.Spells.ImplicitSpellTargetType)">
            <summary>
            Returns the handler and filter for the given target type
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Targeting.DefaultTargetEvaluators">
            <summary>
            Set of methods to evaluate whether a target is "good" for an AI caster
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetEvaluators.NearestEvaluator(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetEvaluators.MostWoundedEvaluator(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            AI heal spells
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetEvaluators.AnyWoundedEvaluator(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            AI heal spells.
            This evaluator demonstrates how to losen constraints - i.e. don't go for the best choice, but go for anyone that satisfies some condition.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetFilters.IsHostileOrHealable(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Duel target type
            </summary>
            <param name="targets"></param>
            <param name="target"></param>
            <param name="failedReason"></param>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetFilters.IsCasterBehind(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Is caster behind target?
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetFilters.IsVisible(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetFilters.IsPlayer(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetFilters.IsNotPlayer(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.DefaultTargetFilters.IsWoundedEnough(WCell.RealmServer.Spells.SpellEffectHandler,WCell.RealmServer.Entities.WorldObject,WCell.Constants.Spells.SpellFailedReason@)">
            <summary>
            Only select targets that have at least half of what the effect can heal
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.Targeting.TargetDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.Targeting.TargetDefinition.AddFilter(WCell.RealmServer.Spells.Targeting.TargetFilter)">
            <summary>
            Composites the given filter into the existing filter
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spells.SpellTargetCollection">
            <summary>
            A list of all targets for a Spell
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spells.SpellTargetCollection.m_handlers">
            <summary>
            Further SpellEffectHandlers that are sharing this TargetCollection with the original Handler
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellTargetCollection.#ctor">
            <summary>
            Private ctor used by SpellTargetCollectionPool
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spells.SpellTargetCollection.TargetEvaluator">
            <summary>
            Compares targets if the effect is to select a limited amount of targets from an arbitrary set.
            Mostly used by AI casters.
            For example, AI casters should select the most wounded as target for healing spells.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellTargetCollection.AddOrReplace(WCell.RealmServer.Entities.WorldObject,System.Int32)">
            <summary>
            Adds the given target.
            If an evaluator is set and the limit is reached, replace the worst existing target, if its worse than the new target.
            A *bigger* value returned by the evaluator is worse than a *smaller* one.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellTargetCollection.FindChain(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Spells.Targeting.TargetFilter,System.Boolean,System.Int32)">
            <summary>
            Adds all chained units around the selected unit to the list
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellTargetCollection.ValidateTarget(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Spells.Targeting.TargetFilter)">
            <summary>
            Does default checks on whether the given Target is valid for the current SpellCast
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spells.SpellTargetCollection.RevalidateAll">
            <summary>
            Removes all targets that don't satisfy the effects' constraints
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Extensions">
            <summary>
            Class for all type extension methods.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Extensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all elements from the collection to the hash set.
            </summary>
            <typeparam name="T">the type of the elements</typeparam>
            <param name="set">the hash set to add to\being extended</param>
            <param name="elements">the elements to add</param>
        </member>
        <member name="T:WCell.RealmServer.Factions.Faction">
            <summary>
            TODO: Load faction info completely at startup to avoid synchronization issues
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.Faction.IsPlayer">
            <summary>
            whether this is a Player faction
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.Faction.IsAlliance">
            <summary>
            whether this is the Alliance or an Alliance faction
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.Faction.IsHorde">
            <summary>
            whether this is the Horde or a Horde faction
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.Faction.IsNeutral">
            <summary>
            whether this is a neutral faction (always stays neutral).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.Faction.#ctor">
            <summary>
            Default ctor can be used for customizing your own Faction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.Faction.SetAlliancePlayer">
            <summary>
            Make this an alliance player faction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.Faction.SetHordePlayer">
            <summary>
            Make this a horde player faction
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.FactionEntry.FactionIndex">
            <summary>
            m_reputationIndex
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.FactionTemplateEntry.FactionGroup">
            <summary>
            The Faction-Group mask of this faction.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.FactionTemplateEntry.FriendGroup">
            <summary>
            Mask of Faction-Groups this faction is friendly towards
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.FactionTemplateEntry.EnemyGroup">
            <summary>
            Mask of Faction-Groups this faction is hostile towards
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.FactionMgr.GetFactionGroup(WCell.Constants.RaceId)">
            <summary>
            Returns the FactionGroup of the given race.
            Throws KeyNotFoundException if race is not a valid player-race.
            </summary>
            <param name="race">the race</param>
            <returns>The FactionGroup of the race.</returns>
        </member>
        <member name="T:WCell.RealmServer.Factions.IFactionMember">
            <summary>
            An interface for any WorldObject that can have a Faction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.IFactionMember.IsFriendlyWith(WCell.RealmServer.Factions.IFactionMember)">
            <summary>
            Indicates whether the 2 objects have a good relationship
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.IFactionMember.IsAlliedWith(WCell.RealmServer.Factions.IFactionMember)">
            <summary>
            Indicates whether this Object is in party or otherwise allied with the given obj
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Factions.Reputation.DiscountPercents">
            <summary>
            Discounts indexed by StandingLevel
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.Reputation.#ctor(WCell.RealmServer.Database.ReputationRecord,WCell.RealmServer.Factions.Faction)">
            <summary>
            Loads an existing Reputation from the given Record.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.Value">
            <summary>
            The reputation value
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.StandingLevel">
            <summary>
            Exalted, Honored, Neutral, Hated
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.SpecialItems">
            <summary>
            Whether racial and faction mounts/tabards etc can be purchased.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.HeroicModeAllowed">
            <summary>
            Whether Heroic mode keys can be purchased for Outland dungeons.
            <see href="http://www.wowwiki.com/Heroic"/>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.CanInteract">
            <summary>
            Enough reputation to interact with NPCs of that Faction
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.Hostile">
            <summary>
            Either very bad rep or the player declared war.
            Will cause mobs to attack on sight.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Factions.Reputation.DeclaredWar">
            <summary>
            whether the player actively declared war
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.Reputation.SetValue(System.Int32)">
            <summary>
            Changes the reputation value with a specific Faction.
            Is called by ReputationCollect.SetValue
            </summary>
            <param name="value"></param>
            <returns>Whether hostility changed due to the stending change</returns>
        </member>
        <member name="T:WCell.RealmServer.Factions.ReputationCollection">
            <summary>
            Represents the Reputation between a Player and all his known factions
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.Initialize">
            <summary>
            Initializes initial Factions of the owner (used when new Character is created)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.Load">
            <summary>
            Loads all Factions that this Character already knows from the DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.ResendAllFactions">
            <summary>
            Sends all existing factions to the Client
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.GetOrCreate(WCell.Constants.Factions.FactionReputationIndex)">
            <summary>
            Returns the corresponding Reputation object. Creates a new one
            if the player didn't meet this faction yet.
            </summary>
            <param name="reputationIndex">The repListId of the faction</param>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.Create(WCell.Constants.Factions.FactionReputationIndex)">
            <summary>
            Creates a Reputation object that represents the relation to the given faction, or null
            </summary>
            <param name="factionIndex">The repListId of the faction</param>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.Create(WCell.RealmServer.Factions.Faction)">
            <summary>
            Creates a Reputation object that represents the relation to the given faction, or null
            </summary>
            <param name="faction">The Faction which the Reputation should be with</param>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.DeclareWar(WCell.Constants.Factions.FactionReputationIndex,System.Boolean,System.Boolean)">
            <summary>
            Only called if the player declared war
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.LoveAll">
            <summary>
            For GMs/Testers: Introduces the char to all Factions and sets
            Reputation to max.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.HateAll">
            <summary>
            For GMs/Testers: Introduces the char to all Factions and sets
            Reputation to min (oh boy are they gonna hate you).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.GetDiscountedCost(WCell.Constants.Factions.FactionReputationIndex,System.UInt32)">
            <summary>
            Returns the cost of this item after the reputation discount has been applied.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.OnTalkWith(WCell.RealmServer.Entities.NPC)">
            <summary>
            Called when interacting with an NPC.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Factions.ReputationCollection.GainReputation(WCell.Constants.Factions.FactionId,System.Int32)">
            <summary>
            Increases or Decreases reputation with the given faction.
            </summary>
            <param name="factionId">Faction Id.</param>
            <param name="value">Amount to add or decrease</param>
            <returns></returns>
        </member>
        <member name="F:WCell.RealmServer.Formulas.FallDamageGenerator.DefaultFallDamageCoefficient">
            <summary>
            The coefficient the distance fallen is multiplied by
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.FallDamageGenerator.DefaultFallDamageReduceAmount">
            <summary>
            The amount substracted from the fall damage
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.FallDamageGenerator.DefaultFallDamageRate">
            <summary>
            The coefficient the final fall damage is multiplied by
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.FallDamageGenerator.GetFallDmg">
            <summary>
            The amount of damage inflicted to a character for fall
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Formulas.RageGenerator">
            <summary>
            RageGenerator
            <see href="http://www.wowwiki.com/Formulas:Rage_generation"></see>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Formulas.RageGenerator.GenerateDefaultAttackerRage(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Rage for the attacker of an AttackAction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Formulas.RageGenerator.GenerateDefaultVictimRage(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Rage for the victim of an AttackAction
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Formulas.RegenerationFormulas">
            <summary>
            Determines the amount of base power per level and regenaration speed of all powers
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.RegenerationFormulas.RegenRateFactor">
            <summary>
            The standard factor to be applied to regen on every tick
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.RegenerationFormulas.RegenTickDelayMillis">
            <summary>
            The delay between 2 regeneration ticks in millis
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.RegenerationFormulas.PowerRegenInterruptedCooldown">
            <summary>
            The amount of milliseconds for the time of "Interrupted" power regen
            See: http://www.wowwiki.com/Formulas:Mana_Regen#Five_Second_Rule
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Formulas.RegenerationFormulas.CalculateManaRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            Calculates the amount of power regeneration for the class at a specific level, Intellect and Spirit.
            Changed in 3.1, overrides for casters are redundant.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Formulas.RegenerationFormulas.CalculateRageRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            1 Rage to the client is a value of 10
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Formulas.RestGenerator">
            <summary>
            <see href="http://www.wowwiki.com/Rest"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.RestGenerator.AverageRestingPeriod">
            <summary>
            The amount of time in which a user can gain 5% (100 / <see cref="F:WCell.RealmServer.Formulas.RestGenerator.AverageRestingRatePct"/>) rest in seconds.
            Default: 8 * 3600 = 8 hours.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.RestGenerator.AverageRestingRatePct">
            <summary>
            Average percentage of Rest generated per <see cref="F:WCell.RealmServer.Formulas.RestGenerator.AverageRestingPeriod"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.RestGenerator.GetRestXp">
            <summary>
            the amount of xp to the following level
            </summary>
            <remarks>By default, rest accumulates 4 times faster when in an Inn or other kind of resting area.</remarks>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Formulas.BaseExperienceCalculator">
            <summary>
            Takes Target-level and receiver-level and returns the amount of base-experience to be gained
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Formulas.XpCalculator">
            <summary>
            </summary>
            <returns>The amount of tequired Experience for that level</returns>
        </member>
        <member name="T:WCell.RealmServer.Formulas.XpGenerator">
            <summary>
            Static utility class that holds and calculates Level- and Experience-information.
            Has exchangable Calculator delegates to allow custom xp-calculations.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.DefaultXpLevelFactor">
            <summary>
            The base-factor per level for calculations of XP given by killing NPCs.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.DefaultXpBaseValueAzeroth">
            <summary>
            The default base value for Xp-calculations from NPCs in the old land.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.DefaultXpBaseValueOutland">
            <summary>
            The default base value for Xp-calculations from NPCs in Outland.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.DefaultXpBaseValueNorthrend">
            <summary>
            The default base value for Xp-calculations from NPCs in Northrend.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.ExplorationXpFactor">
            <summary>
            The factor to be applied to Xp that is gained when exploring a new Zone
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.MaxLevelXpCalculator">
            <summary>
            If the level of a Character is greater than what is defined in the <see cref="F:WCell.RealmServer.Formulas.XpGenerator.XpTable"/> and yet smaller than
            the <see cref="F:WCell.RealmServer.RealmServerConfiguration.MaxCharacterLevel"/>, this function will be called to return the experience to gain on that given level.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Formulas.XpGenerator.CombatXpDistributer">
            <summary>
            Change this method in addons to create custom XP calculation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Formulas.XpGenerator.CalcDefaultXp(System.Int32,WCell.RealmServer.Entities.NPC)">
            <summary>
            Takes the base-formular to calculate the Xp to be gained for the receiver.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Formulas.XpGenerator.DistributeCombatXp(WCell.RealmServer.Entities.Character,WCell.Util.INamed,System.Int32)">
            <summary>
            Distributes the given amount of XP over the group of the given Character (or adds it only to the Char, if not in Group).
            </summary>
            <remarks>Requires Map-Context.</remarks>
            <param name="chr"></param>
        </member>
        <member name="M:WCell.RealmServer.Formulas.XpGenerator.GetXpForlevel(System.Int32)">
            <summary>
            Gets the amount of xp, required to gain this level (from level-1)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.NamedWorldZoneLocation">
            <summary>
            Holds an exact World-Location, and also the Zone of the Location
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.Duel">
            <summary>
            Represents the progress of a duel between 2 Characters.
            Most methods require the context of the Flag's map
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.DuelRadius">
            <summary>
            If duelists are further away than the DuelRadius (in yards), the cancel-timer will be started.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.Duel.DefaultStartDelayMillis">
            <summary>
            The delay until a duel starts in milliseconds
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.Duel.DefaultCancelDelayMillis">
            <summary>
            If Duelist leaves the area around the flag for longer than this delay, he/she will loose the duel
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.CheckRequirements(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character)">
            <summary>
            Checks several requirements for a new Duel to start.
            </summary>
            <param name="challenger"></param>
            <param name="rival"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.InitializeDuel(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character)">
            <summary>
            Make sure that the 2 parties may actual duel, by calling <see cref="M:WCell.RealmServer.Misc.Duel.CheckRequirements(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character)"/> before.
            </summary>
            <param name="challenger"></param>
            <param name="rival"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.#ctor(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character,System.Int32,System.Int32)">
            <summary>
            Creates a new duel between the 2 parties.
            </summary>
            <param name="challenger"></param>
            <param name="rival"></param>
            <param name="startDelay"></param>
            <param name="cancelDelay"></param>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.Challenger">
            <summary>
            The Character who challenged the Rival for a Duel
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.Rival">
            <summary>
            The Character who has been challenged for a Duel
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.Flag">
            <summary>
            The Duel Flag
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.StartDelay">
            <summary>
            Delay left in milliseconds until the Duel starts. 
            If countdown did not start yet, will be set to the total delay.
            If countdown is already over, this value is redundant.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.IsActive">
            <summary>
            A duel is active if after the duel engaged, the given startDelay passed
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.IsChallengerInRange">
            <summary>
            whether the Challenger is in range of the duel-flag.
            When not in range, the cancel timer starts.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.Duel.IsRivalInRange">
            <summary>
            whether the Rival is in range of the duel-flag.
            When not in range, the cancel timer starts.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.Initialize">
            <summary>
            Initializes the duel after a new Duel has been proposed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.Accept(WCell.RealmServer.Entities.Character)">
            <summary>
            Starts the countdown (automatically called when the invited rival accepts)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.Start">
            <summary>
            Starts the Duel (automatically called after countdown)
            </summary>
            <remarks>Requires map context</remarks>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.Finish(WCell.Constants.DuelWin,WCell.RealmServer.Entities.Character)">
            <summary>
            Ends the duel with the given win-condition and the given loser
            </summary>
            <param name="loser">The opponent that lost the match or null if its a draw</param>
            <remarks>Requires map context</remarks>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.Update(System.Int32)">
            <summary>
            Updates the Duel
            </summary>
            <param name="dt">the time since the last update in milliseconds</param>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.OnDeath(WCell.RealmServer.Entities.Character)">
            <summary>
            Duel is over due to death of one of the opponents
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.Duel.Dispose">
            <summary>
            Disposes the duel (called automatically when duel ends)
            </summary>
            <remarks>Requires map context</remarks>
        </member>
        <member name="F:WCell.RealmServer.Misc.ExceptionHandler.ExceptionNotificationRank">
            <summary>
            Sends exceptions to online staff with at least the given Rank.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.ExtraInfo">
            <summary>
            Addition to every Character that is a StaffMember to append staff-only related information without wasting extra memory
            on non-staff members.
            TODO: Get rid off this
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ExtraInfo.SelectedGO">
            <summary>
            The currently selected GO of this Character. Set to null to deselect.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ExtraInfo.HandlingTicket">
            <summary>
            The ticket that this Character is currently working on (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IHasRole.Role">
            <summary>
            The RoleGroup of this entity
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.IUser.IsIgnoring(WCell.RealmServer.Misc.IUser)">
            <summary>
            Whether this User ignores the given User
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Misc.IUser.Target">
            <summary>
            The targeted Unit of this User (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IUser.SelectedCommand">
            <summary>
            The command that has been selected by this User
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.LockEntry">
            <summary>
            Represents Lock information that are applied to lockable GOs and Items
            TODO: Check whether we need to send a animations when interaction with certain LockTypes
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.Entries">
            <summary>
            All Lock-entries, indexed by their id
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.OpeningMethods">
            <summary>
            0 or more professions that can be used to open the Lock
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.Keys">
            <summary>
            0 or more key-entries that can be used to open the Lock
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.RequiresKneeling">
            <summary>
            Whether the lock requires kneeling when being used
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.RequiresAttack">
            <summary>
            Whether the user swings at the object when using its lock
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.RequiresVehicle">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.IsUnlocked">
            <summary>
            Whether the lock does not require any skill or key to be opened.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockEntry.CanBeClosed">
            <summary>
            Whether the lock can be closed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.LockEntry.Supports(WCell.Constants.LockInteractionType)">
            <summary>
            Whether this lock can be interacted with, using the given type
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.LockEntry.Close(WCell.RealmServer.Entities.ILockable,WCell.RealmServer.Entities.Character)">
            <summary>
            Close an object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.LockEntry.DisarmTrap(WCell.RealmServer.Entities.ILockable,WCell.RealmServer.Entities.Character)">
            <summary>
            Disarm a trap
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.LockEntry.Loot(WCell.RealmServer.Entities.ILockable,WCell.RealmServer.Entities.Character)">
            <summary>
            Loot a container's contents
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.LockEntry.Open(WCell.RealmServer.Entities.ILockable,WCell.RealmServer.Entities.Character)">
            <summary>
            Open a GameObject
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.LockOpeningMethod">
            <summary>
            Different ways of interacting with a lock
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockOpeningMethod.Index">
            <summary>
            The index within the LockEntry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockOpeningMethod.InteractionType">
            <summary>
            What kind of method is this (we don't use a key)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockOpeningMethod.RequiredSkill">
            <summary>
            The profession required to open this Lock
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockOpeningMethod.RequiredSkillValue">
            <summary>
            Required value in the Profession
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockKeyEntry.Index">
            <summary>
            The index within the LockEntry
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.LockKeyEntry.KeyId">
            <summary>
            Id of the required Key-Item
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.IProcHandler">
            <summary>
            Customizable ProcHandler
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IProcHandler.Owner">
            <summary>
            The one who the proc handler is applied to
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IProcHandler.ProcChance">
            <summary>
            Probability to proc in percent (0-100)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IProcHandler.ProcSpell">
            <summary>
            The Spell to be triggered (if any)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IProcHandler.NextProcTime">
            <summary>
            Time when this proc may be triggered again (or small value, if always)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.IProcHandler.CanBeTriggeredBy(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.IUnitAction,System.Boolean)">
            <summary>
            Whether this handler can trigger the given Proc
            </summary>
            <param name="target"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Misc.ProcHandler">
            <summary>
            Default implementation for IProcHandler
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ProcHandler.StackCount">
            <summary>
            The amount of times that this Aura has been applied
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ProcHandler.ProcChance">
            <summary>
            Chance to proc in %
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.ProcHandler.CanBeTriggeredBy(WCell.RealmServer.Entities.Unit,WCell.RealmServer.Misc.IUnitAction,System.Boolean)">
            <param name="active">Whether the triggerer is the attacker/caster (true), or the victim (false)</param>
        </member>
        <member name="T:WCell.RealmServer.Misc.ProcHandlerTemplate">
            <summary>
            Default implementation for IProcHandler
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ProcHandlerTemplate.StackCount">
            <summary>
            The amount of times that this Aura has been applied
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ProcHandlerTemplate.ProcChance">
            <summary>
            Chance to proc in %
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.ProcHandlerTemplate.MinProcDelay">
            <summary>
            In Milliseconds
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.TriggerSpellProcHandlerTemplate">
            <summary>
            Triggers a spell on proc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.SummonRequest.DefaultTimeout">
            <summary>
            Timeout in seconds
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.TutorialFlags.m_flagData">
            <summary>
            Shares with the Character's record
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.IUnitAction">
            <summary>
            Any kind of Action a Unit can perform
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IUnitAction.Attacker">
            <summary>
            The Attacker or Caster
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IUnitAction.Victim">
            <summary>
            Victim or Target or Receiver
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IUnitAction.IsCritical">
            <summary>
            Whether this was a critical action (might be meaningless for some actions)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.IUnitAction.ReferenceCount">
            <summary>
            Reference count is used to support pooling
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.SimpleUnitAction.ReferenceCount">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.HealAction.IsHot">
            <summary>
            Heal over time
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.AuraAction.ReferenceCount">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.SimpleDamageAction.ReferenceCount">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Misc.DamageAction">
            <summary>
            Contains all information related to any direct attack that deals positive damage
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.DamageAction.DefaultCombatTickDelay">
            <summary>
            During Combat: The default delay in milliseconds between CombatTicks
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.Attacker">
            <summary>
            The Attacker or null if this is not an actual Attack
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.Victim">
            <summary>
            The Unit that is being attacked
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.GetDamagePercent(System.Int32)">
            <summary>
            Returns the given percentage of the applied damage
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.IsDot">
            <summary>
            Damage over time has different implications than normal damage
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Misc.DamageAction.ResistPct">
            <summary>
            Can only be modified in AddDamageMods, not later.
            Value between 0 and 100.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.ReferenceCount">
            <summary>
            Actions that are marked in use, will not be recycled
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.IsWeaponAttack">
            <summary>
            White damage or strike ability (Heroic Strike, Ranged, Throw etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.IsSpellCast">
            <summary>
            Any attack that involves a spell
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.IsMagic">
            <summary>
            Pure spell attack, no weapon involved
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Misc.DamageAction.CanCrit">
            <summary>
            An action can crit if there is no spell involved,
            the given spell is allowed to crit by default,
            or the Attacker has a modifier that allows the spell to crit.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.DoAttack">
            <summary>
            Does a melee/ranged/wand physical attack.
            Calculates resistances/attributes (resilience, hit chance) and takes them into account.
            </summary>
            <returns>ProcHitFlags containing hit result</returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.DoStrike">
            <summary>
            Strikes the target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcBlockDamage">
            <summary>
            Calculated in UnitUpdates.UpdateBlockChance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcGlancingBlowDamageFactor">
            <summary>
            Calculates the damage reduced by a glancing blow.
            Reusable in the case glancing blows also happen against players
            Currently they don't.
            </summary>
            <returns>The random damage reduction factor between 0.01 and 0.99 depending on weapon skill/defense</returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcArmorReductionPrct">
            <summary>
            Calculates the percentage of damage reduction from armor.
            Between 1-7500 (capped at 75%)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcHitChance">
            <summary>
            Gives the chance to hit between 0-10000
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcGlancingBlowChance">
            <summary>
            2.1 calculation (3.30 is ~10% lower (24%))
            Is between 1 - 10000, 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcCrushingBlowChance">
            <summary>
            Calculates the chance of a crushing blow.
            </summary>
            <returns>The chance multiplied by 100, 54% = 5400, 100% = 10000</returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.AddBonusCritChance(System.Int32)">
            <summary>
            After we already know that we did not crit, we want to check
            again against a bonus crit chance.
            
            We use basic laws of probability:
            P(CritWithBonus | NoCrit) = 
            P(CritWithBonus) / P(NoCrit) =
            critBonus / (10000 - origCritChance)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcCritChance">
            <summary>
            Calculates the crit chance between 0-10000
            </summary>
            <returns>The crit chance after taking into account defense, weapon skills, resilience etc</returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcBlockChance">
            <summary>
            See: http://www.wowwiki.com/Formulas:Block
            Calculates the block chance between 1-10000
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcParryChance">
            <summary>
            Calculates the parry chance taking into account the difference between 
            the weapon skill of the attacker and the defense skill of the victim.
            Also see <see cref="M:WCell.RealmServer.Entities.Unit.CalcParryChance(WCell.RealmServer.Entities.Unit)"/>
            </summary>
            <returns>The chance between 1-10000</returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.CalcDodgeChance">
            <summary>
            Calculates the dodge chance taking into account the difference between 
            the weapon skill of the attacker and the defense skill of the victim.
            Also see <see cref="M:WCell.RealmServer.Entities.Unit.CalcDodgeChance(WCell.RealmServer.Entities.WorldObject)"/>
            </summary>
            <returns>The chance between 1-10000</returns>
        </member>
        <member name="M:WCell.RealmServer.Misc.DamageAction.AddDamageMods">
            <summary>
            Adds all damage boni and mali
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.IAttackEventHandler.OnBeforeAttack(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Called before hit chance, damage etc is determined.
            This is not used for Spell attacks, since those only have a single "stage".
            NOT CURRENTLY IMPLEMENTED
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.IAttackEventHandler.OnAttack(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Called on the attacker, right before resistance is subtracted and final damage is evaluated
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Misc.IAttackEventHandler.OnDefend(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Called on the defender, right before resistance is subtracted and final damage is evaluated
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.GossipConversation">
            <summary>
            Represents specific gossip conversation between character and an object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.#ctor(WCell.RealmServer.Gossips.GossipMenu,WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Creates gossip conversation by its fields
            </summary>
            <param name="menu">starting menu</param>
            <param name="chr">character which started the conversation</param>
            <param name="speaker">respondent</param>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.#ctor(WCell.RealmServer.Gossips.GossipMenu,WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.WorldObject,System.Boolean)">
            <summary>
            Creates gossip conversation by its fields
            </summary>
            <param name="menu">starting menu</param>
            <param name="chr">character which started the conversation</param>
            <param name="speaker">respondent</param>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipConversation.CurrentMenu">
            <summary>
            Current menu
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipConversation.Character">
            <summary>
            Character who initiated the conversation
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipConversation.Speaker">
            <summary>
            The speaker that the Character is talking to (usually an NPC)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipConversation.StayOpen">
            <summary>
            If set to true, will always keep the menu open until
            (preferrable some Option) set this to false or the client cancelled it.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.DisplayCurrentMenu">
            <summary>
            Shows current menu
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.HandleSelectedItem(System.UInt32,System.String)">
            <summary>
            Handles selection of item in menu by player
            </summary>
            <param name="itemID">ID of selected item</param>
            <param name="extra">additional parameter supplied by user</param>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.DisplayMenu(WCell.RealmServer.Gossips.GossipMenu)">
            <summary>
            Shows menu to player
            </summary>
            <param name="menu">menu to show</param>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.Cancel">
            <summary>
            Cancels the current conversation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipConversation.Invalidate">
            <summary>
            Closes any open Client menu and sends the CurrentMenu
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.IGossipEntry">
            <summary>
            The Id is used by the client to find this entry in its cache.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.IGossipEntry.IsDynamic">
            <summary>
            dynamic gossip entries don't cache their texts
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Gossips.GossipTextBase.Language">
            <summary>
            $N = Character name
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipEntry.GossipTexts">
            <summary>
            The texts of the StaticGossipEntry DataHolder are actually of type StaticGossipText
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.StaticGossipEntry">
            <summary>
            Cacheable GossipEntry from DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.StaticGossipEntry.IsDynamic">
            <summary>
            GossipEntry's from DB are always cached
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.GossipMenu">
            <summary>
            Represents single menu in conversation with it's items
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipMenu.#ctor(System.UInt32)">
            <summary>
            Constructor initializing menu with body text ID
            </summary>
            <param name="bodyTextID">GossipEntry Id</param>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipMenu.GossipEntry">
            <summary>
            ID of text in the body of this menu
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipMenu.KeepOpen">
            <summary>
            Will keep resending the Gump until deactivated (usually using a Quit button)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipMenu.SetItem(System.Int32,WCell.RealmServer.Gossips.GossipMenuItemBase)">
            <summary>
            Replaces the item at the given index with the given item.
            If index == count, appends item to end.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipMenu.OnDisplay(WCell.RealmServer.Gossips.GossipConversation)">
            <summary>
            Called before menu is sent to Character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Gossips.LocalizedGossipMenuItem.ConfirmText">
            <summary>
            If set, will show an Accept/Cancel dialog with this text to the player
            when selecting this Item.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Gossips.MultiStringGossipMenuItem.ConfirmTexts">
            <summary>
            If set, will show an Accept/Cancel dialog with this text to the player
            when selecting this Item.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Gossips.GossipMenuItem.ConfirmText">
            <summary>
            If set, will show an Accept/Cancel dialog with this text to the player
            when selecting this Item.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.AssociatedMenuItem`1">
            <summary>
            Represents a GossipMenuItem that belongs to a GossipMenu of the given type
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.GossipMenuItemBase">
            <summary>
            Represents action (battlemaster, flightmaster, etc.) gossip item in menu
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Gossips.GossipMenuItemBase.Action">
            <summary>
            Determines if character is elligible for viewing this item and action taken on item selection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.GossipMenuItemBase.SubMenu">
            <summary>
            The <see cref="T:WCell.RealmServer.Gossips.GossipMenu"/> to be shown when selecting this Item
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.QuestMenuItem">
            <summary>
            Represents quest item in menu
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Gossips.QuestMenuItem.Status">
            <summary>
            2 = Available
            4 = Anything else?
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.GossipMgr">
            <summary>
            TODO: Localizations
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipMgr.LoadNPCRelations">
            <summary>
            Automatically called after NPCs are initialized
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.GossipMgr.AddDefaultGossipOptions">
            <summary>
            Add default Gossip options for Vendors etc
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.GossipActionDecider">
            <summary>
            Decides whether the item may be displayed/used, in the given convo
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.IGossipAction">
            <summary>
            A class determining whether an item should be shown to specific character and specifying reaction on
            item selection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Gossips.IGossipAction.Navigates">
            <summary>
            Whether this Action determines the next Action.
            False, if it this Action does not send a GossipMenu.
            True, if this Action determines the next GossipMenu to be sent, itself.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Gossips.IGossipAction.CanUse(WCell.RealmServer.Gossips.GossipConversation)">
            <summary>
            Should item be shown to and used by this conversation's character?
            </summary>
            <returns>true if yes</returns>
        </member>
        <member name="M:WCell.RealmServer.Gossips.IGossipAction.OnSelect(WCell.RealmServer.Gossips.GossipConversation)">
            <summary>
            Handler of item selection
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.LevelRestrictedGossipAction">
            <summary>
            Gossip action. Allows showing of the gossip item only to characters with level higher than specified
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.StaffRestrictedGossipAction">
            <summary>
            Gossip action. Associated Menu item can only be seen by staff members
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Gossips.PlayerRestrictedGossipAction">
            <summary>
            Gossip action. Associated Menu item can only be seen by players that are not staff members
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.AccountDataHandler.SendAccountDataTimes(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Send the unix timestamps of each AccountDataType to the client.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.AccountDataHandler.SendAccountDataTimes(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.Handlers.AccountDataHandler.CacheMask)">
            <summary>
            Send the unix timestamps of each AccountDataType to the client.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.AccountDataHandler.SendAccountData(WCell.RealmServer.Network.IRealmClient,System.UInt32)">
            <summary>
            Sends account data of a specific type to the specified client.
            </summary>
            <param name="client"></param>
            <param name="type"></param>
        </member>
        <member name="T:WCell.RealmServer.Handlers.AchievementHandler">
            <summary>
            Stub class for containing achievement packets
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ArenaTeamHandler.SendArenaTeamQueryResponse(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Battlegrounds.Arenas.ArenaTeam)">
            <summary>
            Sends an arena team query response to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="team">arena team to be sent</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ArenaTeamHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.ArenaTeams.ArenaTeamCommandId,System.String,System.String,WCell.Constants.ArenaTeams.ArenaTeamResult)">
            <summary>
            Sends result of actions connected with arenas
            </summary>
            <param name="client">the client to send to</param>
            <param name="commandId">command executed</param>
            <param name="name">name of player event has happened to</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.ArenaTeams.ArenaTeamResult"/> result code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ArenaTeamHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.ArenaTeams.ArenaTeamCommandId,WCell.Constants.ArenaTeams.ArenaTeamResult)">
            <summary>
            Sends result of actions connected with arenas
            </summary>
            <param name="client">the client to send to</param>
            <param name="commandId">command executed</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.ArenaTeams.ArenaTeamResult"/> result code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.BattlegroundHandler.SendStatusInvited(WCell.RealmServer.Entities.Character)">
            <summary>
            Make sure that <see cref="P:WCell.RealmServer.Battlegrounds.BattlegroundInfo.Invitation"/> is set.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.BattlegroundHandler.SendGroupJoinedBattleground(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.BattlegroundId)">
            <summary>
            "Your group joined Name"
            </summary>
            <param name="battleground"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleJoinChannel(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming channel join request
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleLeaveChannel(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming channel leave request
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleListChannel(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming channel list request
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandlePasswordChange(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming channel password change request
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleCurrentOwnerRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request of current owner
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleOwnerChange(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming owner set request
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleSetModeratorRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of making channel member a moderator
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleUnsetModeratorRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of making channel member a non-moderator
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleMuteRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of muting a channel member
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleUnMuteRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of unmuting a channel member
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleChannelInvite(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a invite to channel packet
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleKickRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of kicking a channel member
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleBanRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of banning a channel member
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleUnbanRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of unbanning a channel member
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleAnnouncementsRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of toggling the announce mode of the channel
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleModerateRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of toggling the moderate mode of the channel
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.HandleMemberCountRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles a request of getting the number of members in a channel
            </summary>
            <param name="client">the client the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendAlreadyOnChannelReply(WCell.RealmServer.Network.IPacketReceiver,System.String,WCell.Core.EntityId)">
            <summary>
            Send the "already on channel" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendBannedReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send the "you are banned" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendWrongPassReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send the "wrong password" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendWrongFaction(WCell.RealmServer.Network.IPacketReceiver,System.String,System.String)">
            <summary>
            Send the "wrong password" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendYouJoinedReply(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Chat.ChatChannel)">
            <summary>
            Send the "you have joined channel" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendNotOnChannelReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send the "you are not on the channel" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendTargetNotOnChannelReply(WCell.RealmServer.Network.IPacketReceiver,System.String,System.String)">
            <summary>
            Send the "name is not on the channel" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendYouLeftChannelReply(WCell.RealmServer.Network.IPacketReceiver,System.String,System.Int32)">
            <summary>
            Send the "you have left the channel" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
            <param name="channelId">Id of official channel in client (or 0 for custom channels)</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendNotModeratorReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send the "you are not a moderator" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendYouInvitedReply(WCell.RealmServer.Network.IPacketReceiver,System.String,System.String)">
            <summary>
            Send the "you have invited ... to channel" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendInvitedMessage(WCell.RealmServer.Network.IPacketReceiver,System.String,WCell.Core.EntityId)">
            <summary>
            Send the "... has invited you to channel" message
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
            <param name="sender">entityid of sender</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendNotOwnerReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send the "you are not an owner" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendMutedReply(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send the "you are muted" reply
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">name of channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendCurrentOwner(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Chat.ChatChannel)">
            <summary>
            Send the name of current of the channel
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">the channel</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendChannelList(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Chat.ChatChannel)">
            <summary>
            Send the list of channel members
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
            <param name="chan">channel to be listed</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendJoinedReplyToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.RealmServer.Chat.ChannelMember)">
            <summary>
            Send the "name has joined channel" reply to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (to check the ignore list)</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendLeftReplyToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId)">
            <summary>
            Send the "name has left channel" reply to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (to check the ignore list)</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendOwnerChangedToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,WCell.Core.EntityId)">
            <summary>
            Send owner changed message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (to check the ignore list)</param>
            <param name="newOwner">new owner</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendPasswordChangedToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId)">
            <summary>
            Send the password changed message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (to check the ignore list)</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendBannedToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,WCell.Core.EntityId)">
            <summary>
            Send the ban message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (aka banner)</param>
            <param name="banned">banned</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendKickedToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,WCell.Core.EntityId)">
            <summary>
            Send the kick message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (aka kicker)</param>
            <param name="kicked">kicked</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendUnbannedToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,WCell.Core.EntityId)">
            <summary>
            Send the unbanned message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (aka unbanner)</param>
            <param name="unbanned">unbanned</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendModerateToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId)">
            <summary>
            Send the moderate status change message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (status changer)</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendAnnouncementToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,System.Boolean)">
            <summary>
            Send the announce status change message to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (status changer)</param>
            <param name="newStatus">new announcements status</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendModeratorStatusToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,WCell.Core.EntityId,System.Boolean)">
            <summary>
            Send the message about change of moderator status of player to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (to check the ignore list)</param>
            <param name="target">one who has changed his status</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendMuteStatusToEveryone(WCell.RealmServer.Chat.ChatChannel,WCell.Core.EntityId,WCell.Core.EntityId,System.Boolean)">
            <summary>
            Send the message about change of muted status of player to everyone
            </summary>
            <param name="chan">name of channel</param>
            <param name="sender">sender (to check the ignore list)</param>
            <param name="target">one who has changed his status</param>
            <param name="newStatus">the new status</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendPacketToChannel(WCell.RealmServer.Chat.ChatChannel,WCell.RealmServer.RealmPacketOut)">
            <summary>
            Send a packet to everyone on a channel.
            </summary>
            <param name="chan">the channel to which the packet is sent</param>
            <param name="packet">the packet to send</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendPacketToChannel(WCell.RealmServer.Chat.ChatChannel,WCell.RealmServer.RealmPacketOut,WCell.Core.EntityId)">
            <summary>
            Send a packet to everyone on a channel that does not ignore the given sender.
            </summary>
            <param name="chan">the channel to which the packet is sent</param>
            <param name="packet">the packet to send</param>
            <param name="sender">sender (to check the ignore list)</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ChannelHandler.SendMemberCountReply(WCell.RealmServer.Network.IPacketReceiver,System.String,System.Byte,System.UInt32)">
            <summary>
            Send a reply to the number of members request
            </summary>
            <param name="client">the client the outdoing packet belongs to</param>
        </member>
        <member name="T:WCell.RealmServer.Handlers.CharacterHandler">
            <summary>
            Contains all kinds of player packets that don't belong to a full sub-system
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Handlers.CharacterHandler.ZoneUpdateDelayMillis">
            <summary>
            Delay (in seconds) to wait until a new zone is considered as discovered (Default: 3s)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Handlers.CharacterHandler.NotifyPlayerStatus">
            <summary>
            Whether to notify everyone on the server when players log in/out
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.HandleCharCreateRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming character creation request.
            TODO: Add protection against char creation/deletion spam
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>        
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendCharCreateReply(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.LoginErrorCode)">
            <summary>
            Sends a character creation reply to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="error">the error code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.CharDeleteRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incmming character deletion request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>        
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendCharDeleteReply(WCell.RealmServer.Network.IRealmClient,WCell.Constants.LoginErrorCode)">
            <summary>
            Sends a character delete reply to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="error">the rror code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.CharEnumRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming character enum request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>        
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendCharEnum(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends the character list to the client.
            </summary>
            <param name="client">the client to send to</param>
            <remarks>They probably meant 'enumeration,' but 'list' would have made so much more sense. :)</remarks>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.HandleStandStateChange(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming stand state change request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendTickQuery(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends a "tick count" packet to the client.
            </summary>
            <param name="client">the client to send to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendTimeSpeed(WCell.RealmServer.Network.IPacketReceiver)">
            <summary>
            Sends the world time speed to the client.
            </summary>
            <param name="chr">the character to send to</param>
            <remarks>This packet tells the client about the "speed" of time in the game world.</remarks>
            <remarks>Usually, this speed is equivalent to real-life.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendTimeSpeed(WCell.RealmServer.Network.IPacketReceiver,System.Single)">
            <summary>
            Sends the world time speed to the client.
            </summary>
            <param name="chr">the character to send to</param>
            <remarks>This packet tells the client about the "speed" of time in the game world.</remarks>
            <remarks>Usually, this speed is equivalent to real-life.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendLevelUpInfo(WCell.RealmServer.Network.IPacketReceiver,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends level up info to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="level">the level of the character</param>
            <param name="hpGain">the HP gained</param>
            <param name="manaGain">the mana gained</param>
            <param name="strBonus">the Strength gained</param>
            <param name="agiBonus">the Agility gained</param>
            <param name="staBonus">the Stamina gained</param>
            <param name="intBonus">the Intellect gained</param>
            <param name="sprBonus">the Spirit gained</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendClearTarget(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.WorldObject)">
            <summary>
            Makes the client un-select it's current target
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.IsNameValid(System.String@)">
            <summary>
            Checks if characters name is valid. Checks for size of name, words in name, invalid symbols.
            If server is set to use blizz like names, name may be adjusted according to blizz rules.
            </summary>
            <param name="characterName">the name of the character to check</param>
            <returns>true if characters name is ok; false otherwise (error codes will contain reason)</returns>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.DoesNameViolate(System.String)">
            <summary>
            Checks if a character name contains any bad words based on configuration rules.
            </summary>
            <param name="characterName">the name of the character to check</param>
            <returns>true if the name contains a bad word; false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.HandleZoneUpdate(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming zone update notification.
            But it only sends the current parent-zone and not the subzone.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.PlayerImediateLogoutRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incomming immediate logout request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.PlayerLogoutRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming logout request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.PlayerLogoutCancel(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming logout cancel request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendPlayerImmediateLogoutReply(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends a "player immediate logout" reply to the client.
            </summary>
            <param name="client">the client to send to</param>
            <remarks>Sent by the server to acknowledge that the logout process is finalized.</remarks>
            <remarks>Sent in response to CMSG_LOGOUT.</remarks>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendLogoutReply(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.Login.LogoutResponseCodes)">
            <summary>
            Sends a logout response to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="error">the error code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendLogoutCancelReply(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends a "logout cancel" reply to the client.
            </summary>
            <param name="client">the client to send to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendEnableBarberShop(WCell.RealmServer.Entities.Character)">
            <summary>
            Tells the client that it's in a barbershop chair.
            </summary>
            <param name="character">The Character.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.HandleAlterAppearance(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming appearance alteration request from a barbershop.
            </summary>
            <param name="client">The IRealmClient.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendBarberShopResult(WCell.RealmServer.Entities.Character,WCell.Constants.NPCs.BarberShopPurchaseResult)">
            <summary>
            Sends the result of a barbershop purchase.
            </summary>
            <param name="chr">The Character.</param>
            <param name="ok">If true, purchase went through, if false, indicates not enough money.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendVerifyWorld(WCell.RealmServer.Entities.Character)">
            <summary>
            Sends SMSG_LOGIN_VERIFY_WORLD (first ingame packet, sends char-location: Seems unnecessary?)
            </summary>
            <param name="chr"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendCinematic(WCell.RealmServer.Entities.Character)">
            <summary>
            Triggers the introduction cinematic if the character is login for the first time
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CharacterHandler.SendPhaseShift(WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Triggers the introduction cinematic if the character is login for the first time
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Handlers.ClientConsoleCommandHandler">
            <summary>
            These commands can be used by GMs through WoW's internal console
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatHandler.HandleAttackStop(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            The client signals stop melee fighting
            </summary>
            <param name="client"></param>
            <param name="packet"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatHandler.SendComboPoints(WCell.RealmServer.Entities.Character)">
            <summary>
            Updates the player's combo-points, will be called automatically whenever the combo points or combotarget change.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendPeriodicAuraLog(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Entities.WorldObject,System.UInt32,System.UInt32,WCell.Constants.Spells.AuraTickFlags,System.Int32)">
            <summary>
            Used for any PeriodicAura (repeating ticks)
            </summary>
            <param name="extra">Always seems to be one</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendPeriodicDamage(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Entities.WorldObject,System.UInt32,WCell.Constants.Spells.AuraTickFlags,System.Int32)">
            <summary>
            Used for Periodic leech effects, mostly Cannibalism
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendSpellMiss(WCell.RealmServer.Spells.SpellCast,System.Boolean,System.Collections.Generic.ICollection{WCell.RealmServer.Spells.MissedTarget})">
            <summary>
            Correct 3.0.9
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendSpellOrDamageImmune(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Entities.ObjectBase,WCell.RealmServer.Entities.ObjectBase,System.Int32,System.Boolean)">
            <summary>
            Correct for 3.0.9
            </summary>
            <param name="client"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="spellId"></param>
            <param name="b1"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendEnergizeLog(WCell.RealmServer.Entities.WorldObject,WCell.RealmServer.Entities.Unit,System.UInt32,WCell.Constants.PowerType,System.Int32)">
            <summary>
            Correct for 3.0.9
            </summary>
            <param name="caster"></param>
            <param name="target"></param>
            <param name="spellId"></param>
            <param name="powerType"></param>
            <param name="value"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendSpellLogExecute(WCell.RealmServer.Entities.ObjectBase,System.UInt32,WCell.Constants.Spells.SpellEffectType,WCell.RealmServer.Entities.ObjectBase,System.UInt32)">
            <summary>
            Correct for 3.0.9
            </summary>
            <param name="target">Optional</param>
            <param name="value">Optional</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendEnvironmentalDamage(WCell.RealmServer.Entities.WorldObject,WCell.Constants.EnviromentalDamageType,System.UInt32)">
            <summary>
            Usually caused by jumping too high, diving too long, standing too close to fire etc
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.CombatLogHandler.SendMagicDamage(WCell.RealmServer.Misc.DamageAction)">
            <summary>
            Any spell and ranged damage
            SMSG_SPELLNONMELEEDAMAGELOG
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Handlers.EmoteHandler">
            <summary>
            Handler class for emote-related packets.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.HandleStartWar(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            User starts/ends war with a faction
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.HandleSetWatchedFaction(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            User watches Faction-status
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.HandleStopWatchingFaction(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Sets the specified faction to the inactive state
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.SendVisible(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.Factions.FactionReputationIndex)">
            <summary>
            Makes the given faction visible to the client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.SendSetAtWar(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Factions.Reputation)">
            <summary>
            Lets player know they are at war with a certain faction.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.SendReputationStandingUpdate(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Factions.Reputation)">
            <summary>
            Sends a reputation update.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.FactionHandler.SendFactionList(WCell.RealmServer.Entities.Character)">
            <summary>
            Sends all known factions to the client (only used right after connecting).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GossipHandler.HandleGossipHello(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles gossip hello packet (client requests Gossip Menu)
            </summary>
            <param name="client">realm client</param>
            <param name="packet">packet incoming</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GossipHandler.HandleGossipSelectOption(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles option selecting in gossip menu
            </summary>
            <param name="client">realm client</param>
            <param name="packet">packet incoming</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GossipHandler.SendPageToCharacter(WCell.RealmServer.Gossips.GossipConversation,System.Collections.Generic.IList{WCell.RealmServer.Gossips.QuestMenuItem})">
            <summary>
            Sends a page to the character
            </summary>
            <param name="chr">recieving character</param>
            <param name="owner">EntityID of sender</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GossipHandler.SendConversationComplete(WCell.RealmServer.Network.IPacketReceiver)">
            <summary>
            Sends a page to the character
            </summary>
            <param name="rcv">recieving character</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GossipHandler.SendGossipPOI(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.GossipPOIFlags,System.Single,System.Single,System.Int32,System.Int32,System.String)">
            <summary>
            Send Point of interest which will then appear on the minimap
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupInviteRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming group invite request (/invite Player)
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupAccept(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming accept on group invite request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupDecline(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming decline on group invite request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupUninviteByName(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on uninviting a Character from the group by name
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.HandleGroupUninviteByGUID(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on uninviting a Character from the group by GUID
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupSetLeader(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on leader change
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupDisband(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming group disband packet (used for leaving party in fact)
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupSetLootMethod(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on loot method change
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.MinimapPing(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming minimap ping
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.RandomRollRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on random roll
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.RaidIconTarget(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on random roll
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.ConvertToRaidRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming convert party to raid request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.ChangeSubgroupRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on moving Character from one subgroup to another
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.ChangeAssistantFlagRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request on changing Assistant flag of specified Character
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.GroupPromoteFlagRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request for changing the Main Tank or Main Assistant flag 
            of specified Character
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.RaidReadyCheck(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request or answer to raid ready check
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.RequestPartyMemberStats(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming request for a group member status
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendGroupUninvite(WCell.RealmServer.Entities.Character)">
            <summary>
            Send Group Uninvite packet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.GroupResultType,WCell.Constants.GroupResult)">
            <summary>
            Sends result of actions connected with groups
            </summary>
            <param name="client">the client to send to</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.GroupResult"/> result code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.GroupResult,System.String)">
            <summary>
            Sends result of actions connected with groups
            </summary>
            <param name="client">the client to send to</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.GroupResult"/> result code</param>
            <param name="name">name of player event has happened to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.GroupResult,WCell.Constants.GroupResultType,System.String)">
            <summary>
            Sends result of actions connected with groups
            </summary>
            <param name="client">the client to send to</param>
            <param name="resultType">The result type</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.GroupResult"/> result code</param>
            <param name="name">name of player event has happened to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendGroupInvite(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Send Group Invite packet
            </summary>
            <param name="client">realm client</param>
            <param name="inviter">nick of player invited you</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendGroupDecline(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Sends group invitation decline
            </summary>
            <param name="client">the client to send to</param>
            <param name="decliner">player who has declined your request</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendRoll(WCell.RealmServer.Network.IPacketReceiver,System.Int32,System.Int32,System.Int32,WCell.Core.EntityId)">
            <summary>
            Sends roll results to the group
            </summary>
            <param name="client">realm client</param>
            <param name="min">minimal value</param>
            <param name="max">maximal value</param>
            <param name="value">value rolled out</param>
            <param name="guid">guid of roller</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendPartyMemberStatsFull(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Groups.GroupMember,WCell.Constants.GroupUpdateFlags)">
            <summary>
            Sends the requested party member stats data to the client
            </summary>
            <param name="client">realm client</param>
            <param name="member">The character whose stats is going to be retrieved</param>
            <param name="flags">The stats to be retrieved from the <paramref name="member"/></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendPartyMemberStats(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Groups.GroupMember,WCell.Constants.GroupUpdateFlags)">
            <summary>
            Sends the requested party member stats data to the client
            </summary>
            <param name="client">realm client</param>
            <param name="member">The character whose stats is going to be retrieved</param>
            <param name="flags">The stats to be retrieved from the <paramref name="member"/></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GroupHandler.SendPartyMemberStatsInternal(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Groups.GroupMember,WCell.Constants.GroupUpdateFlags,WCell.Constants.RealmServerOpCode)">
            <summary>
            Sends the requested party member stats data to the client
            </summary>
            <param name="client">realm client</param>
            <param name="member">The character whose stats is going to be retrieved</param>
            <param name="flags">The stats to be retrieved from the <paramref name="member"/></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Query(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild query
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Roster(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild roster query
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.EventLog(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild roster query
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.InviteRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild invite request (/ginvite Player)
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Accept(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming accept on guild invite request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Decline(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming decline on guild invite request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Leave(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild leave request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Remove(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild member remove request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.ChangeInfo(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild information (one in guild roster) change request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.InfoRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild information (/ginfo) request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.ChangeMOTD(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild MOTD change request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.ChangePublicNote(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming public guild note change request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.ChangeOfficerNote(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming officer guild note change request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.HandleGuildBankActivate(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Called when the GuildBank vault GameObject is clicked
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.AddRank(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming add rank request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.DeleteRank(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming rank remove request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.ChangeRank(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming rank change request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.HandlePromote(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild member promote request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Demote(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild member demote request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.Disband(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild disband request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.ChangeLeader(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming guild leader change request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildQueryResponse(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Guilds.Guild)">
            <summary>
            Sends a guild query response to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="guild">guild to be sent</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildQueryToGuildMembers(WCell.RealmServer.Guilds.Guild)">
            <summary>
            Sends a guild query response to all member of this guild
            </summary>
            <param name="guild">guild to be sent</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildInvite(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends a guild invite packet to a client
            </summary>
            <param name="client">the client to send to</param>
            <param name="inviter">inviter</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildDecline(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Sends guild invitation decline
            </summary>
            <param name="client">the client to send to</param>
            <param name="decliner">player who has declined your request</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildRoster(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Guilds.Guild,System.Boolean)">
            <summary>
            Sends guild roster
            </summary>
            <param name="client">the client to send to</param>
            <param name="guild">guild</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildRosterToGuildMembers(WCell.RealmServer.Guilds.Guild)">
            <summary>
            Sends guild roster to guild members
            </summary>
            <param name="guild">guild</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildInformation(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Guilds.Guild)">
            <summary>
            Sends a guild information to a client
            </summary>
            <param name="client">the client to send to</param>
            <param name="guild">guild</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.Guilds.GuildCommandId,System.String,WCell.Constants.Guilds.GuildResult)">
            <summary>
            Sends result of actions connected with guilds
            </summary>
            <param name="client">the client to send to</param>
            <param name="commandId">command executed</param>
            <param name="name">name of player event has happened to</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.Guilds.GuildResult"/> result code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.Guilds.GuildCommandId,WCell.Constants.Guilds.GuildResult)">
            <summary>
            Sends result of actions connected with guilds
            </summary>
            <param name="client">the client to send to</param>
            <param name="commandId">command executed</param>
            <param name="resultCode">The <see cref="T:WCell.Constants.Guilds.GuildResult"/> result code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendEvent(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents,WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Sends events connected with guilds
            </summary>
            <param name="client">the client to send to</param>
            <param name="guild">guild</param>
            <param name="guildEvent">event that happened</param>
            <param name="affectedMember">The <see cref="T:WCell.RealmServer.Guilds.GuildMember"/> which was affected</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendEventToGuild(WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents)">
            <summary>
            Sends event connected with guilds to all guild members
            </summary>
            <param name="guild">guild</param>
            <param name="guildEvent">event that happened</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendEventToGuild(WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents,WCell.RealmServer.Guilds.GuildMember,WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Sends event connected with guilds to all guild members. Use this one for promotion/demotion events.
            </summary>
            <param name="guild">guild</param>
            <param name="guildEvent">event that happened</param>
            <param name="affectedMember">The <see cref="T:WCell.RealmServer.Guilds.GuildMember"/> which was affected</param>
            <param name="influencer">one who caused this event</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendEventToGuild(WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents,WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            Sends event connected with guilds to all guild members
            </summary>
            <param name="guild">guild</param>
            <param name="guildEvent">event that happened</param>
            <param name="affectedMember">The <see cref="T:WCell.RealmServer.Guilds.GuildMember"/> which was affected</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendEventToGuild(WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends event connected with guilds to all guild members, except one
            </summary>
            <param name="guild">guild</param>
            <param name="guildEvent">event that happened</param>
            <param name="ignoredCharacter">character to be ignored</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendEventToGuild(WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents,WCell.RealmServer.Guilds.GuildMember,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends event connected with guilds to all guild members, except one
            </summary>
            <param name="guild">guild</param>
            <param name="guildEvent">event that happened</param>
            <param name="affectedMember">The <see cref="T:WCell.RealmServer.Guilds.GuildMember"/> which was affected</param>
            <param name="ignoredCharacter">character to be ignored</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.CreateEventPacket(WCell.RealmServer.Guilds.Guild,WCell.Constants.Guilds.GuildEvents,WCell.RealmServer.Guilds.GuildMember,WCell.RealmServer.Guilds.GuildMember)">
            <summary>
            TODO: Fix for 3.3
            </summary>
            <param name="guild"></param>
            <param name="guildEvent"></param>
            <param name="affectedMember"></param>
            <param name="influencer"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Handlers.GuildHandler.SendGuildEventLog(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Guilds.Guild)">
            <summary>
            Sends a guild log to a client
            </summary>
            <param name="client">the client to send to</param>
            <param name="guild">guild</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.InstanceHandler.SendInstanceReset(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.World.MapId)">
            <summary>
            An instance has been reset
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.InstanceHandler.SendInstanceSave(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.World.MapId)">
            <summary>
            An instance has been saved
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.InstanceHandler.SendRequiresRaid(WCell.RealmServer.Network.IPacketReceiver,System.Int32)">
            <summary>
            Starts the kick timer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.InstanceHandler.SendRaidTimerReset(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Stops the kick timer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.InstanceHandler.SendResetFailure(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.World.MapId,WCell.Constants.InstanceResetFailed)">
            <summary>
            Sends the result of an instance reset attempt
            </summary>
            <param name="client"></param>
            <param name="reason"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.InstanceHandler.SendResetWarning(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.World.MapId)">
            <summary>
            Warns a player within the instance that the leader is attempting to reset the instance
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:WCell.RealmServer.Handlers.ItemReceptionType">
            <summary>
            Send in the packet that logs new items
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Handlers.ItemReceptionType.Loot">
            <summary>
            "You looted item:"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Handlers.ItemReceptionType.Receive">
            <summary>
            "You receive item:"
            (When buying an item etc)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Handlers.ItemReceptionType.YouCreated">
            <summary>
            "You created: "
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleAutoEquip(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Auto-equips an item (can be triggered by double click etc)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleUseItem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Use an Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleOpenItem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Open an Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleSwapInvItem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Swap items on the character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleSwapItem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Swap items within bags
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleAutostoreBagItem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Set Ammo
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleSetAmmo(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Set Ammo
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleSplitItem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Split up a stack of items
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.HandleSocketGem(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Socket an item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.SendItemPushResult(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Item,WCell.RealmServer.Items.ItemTemplate,System.Int32,WCell.RealmServer.Handlers.ItemReceptionType)">
            <summary>
            Sends the Item's PushResult (required after adding items).
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.SendCantDoRightNow(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Send a simple "Can't do that right now" message
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.SendInventoryError(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Entities.Item,WCell.RealmServer.Entities.Item,WCell.Constants.Items.InventoryError)">
            <summary>
            item1 and item2 can be null, but item1 must be set in case of YOU_MUST_REACH_LEVEL_N.
            </summary>
            <param name="client"></param>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="error"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.ItemHandler.SendInventoryError(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.Items.InventoryError)">
            <summary>
            item1 and item2 can be null, but item1 must be set in case of YOU_MUST_REACH_LEVEL_N.
            </summary>
            <param name="client"></param>
            <param name="error"></param>
        </member>
        <member name="T:WCell.RealmServer.Handlers.LFGHandler">
            <summary>
            When opening the LFG panel, player sends:
            	CMSG_LFG_GET_PLAYER_INFO
            	CMSG_LFG_GET_PARTY_INFO
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Handlers.LoginHandler.AccountLogin">
            <summary>
            Triggered after an Account logs into the Realm-server
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Handlers.LoginHandler.BeforeLogin">
            <summary>
            Triggered before a client disconnects
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Handlers.LoginHandler.ClientDisconnected">
            <summary>
            Triggered before a client disconnects
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.AuthSessionRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming auth session request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.SendAuthChallenge(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Send packet generated by the server to initialize authentification
            </summary>
            <param name="client">the client to send to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.SendAuthSessionErrorReply(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.LoginErrorCode)">
            <summary>
            Sends an auth session error response to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="error">the error code</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.InviteToRealm(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends an auth session success response to the client.
            </summary>
            <param name="client">the client to send to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.SendAuthQueueStatus(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends the number of currently queued clients.
            </summary>
            <param name="client">the client to send to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.PlayerLoginRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming player login request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>        
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.LoginCharacter(WCell.RealmServer.Network.IRealmClient,System.UInt32)">
            <summary>
            Checks whether the client is allowed to login and -if so- logs it in
            </summary>
            <remarks>Executed in IO-Context.</remarks>
            <param name="client"></param>
            <param name="charLowId"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LoginHandler.SendCharacterLoginFail(WCell.RealmServer.Network.IPacketReceiver,WCell.Constants.LoginErrorCode)">
            <summary>
            Sends a "character login failed" error message to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="error">the actual login error</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.HandleAutoLoot(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Stores a selected item in inventory automatically
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.HandleStoreLoot(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Stores a selected item in the given slot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.HandleLoot(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            A client wants to loot something (usually a corpse)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.HandleLootMoney(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Gold is given automatically in group-looting. Client can only request gold when looting alone.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.HandleLootRelease(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Client finished looting
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.HandleOptOutOfLoot(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Sets the automatic PassOnLoot rolls option.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.LootHandler.SendMoneyNotify(WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Your share of the loot is %d money.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MailHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,System.UInt32,WCell.Constants.MailResult,WCell.Constants.MailError)">
            <summary>
            Sends a responce detailing the results of the client's mail request.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MailHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,System.UInt32,WCell.Constants.MailResult,WCell.Constants.MailError,WCell.Constants.Items.InventoryError)">
            <summary>
            Sends a responce detailing the results of the client's mail request.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MailHandler.SendResult(WCell.RealmServer.Network.IPacketReceiver,System.UInt32,WCell.Constants.MailResult,WCell.Constants.MailError,System.UInt32,System.Int32)">
            <summary>
            Sends a responce detailing the results of the client's mail request.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MailHandler.SendMailList(WCell.RealmServer.Network.IPacketReceiver,System.Collections.Generic.IList{WCell.RealmServer.Mail.MailMessage})">
            <summary>
            Sends a list of mail messages to the client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MailHandler.SendNotify(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Notifies the Client that there is new mail
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Handlers.MiscHandler">
            <summary>
            Packets that don't fit into any other category
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MiscHandler.PingRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming ping request.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MiscHandler.SendPingReply(WCell.RealmServer.Network.IPacketReceiver,System.UInt32)">
            <summary>
            Sends a ping reply to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="sequence">the sequence number sent by client</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MiscHandler.SendMotd(WCell.RealmServer.Network.IPacketReceiver,System.String[])">
            <summary>
            Sends the given list of messages as motd (displays as a regular system-msg)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MiscHandler.SendNotification(WCell.RealmServer.Network.IPacketReceiver,System.String)">
            <summary>
            Flashes a message in the middle of the screen.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.ReadMovementInfo(WCell.RealmServer.RealmPacketIn,WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Unit,System.UInt32@)">
            <summary>
            
            </summary>
            <param name="packet">The packet to read the info from</param>
            <param name="chr">The active character in the client that send the movement packet</param>
            <param name="mover">The unit we want this movement info to affect</param>
            <param name="clientTime">Used to return the read client time</param>
            <returns>A boolean value used to determine broadcasting of this movement info to other clients</returns>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.HandleWorldPortAck(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            The client sends this after map-change (when the loading screen finished)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.HandleRootAck(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            The client sends this after he was rooted
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.SendMonsterMoveTransport(WCell.RealmServer.Entities.Unit,WCell.Util.Graphics.Vector3,WCell.Util.Graphics.Vector3)">
            <summary>
            Move from current position  to
            new position on the Transport (relative to transport)
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.HandleMountSpecialAnim(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Jumping while not moving when mounted
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.ConstructMultiWaypointMovePacket``1(WCell.RealmServer.Entities.Unit,System.Int32,WCell.Constants.NPCs.MonsterMoveFlags,System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Constructs a waypoint packet, starting with the given firstNode (until the end of the LinkedList).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unit"></param>
            <param name="speed">The speed that the Unit should move with in yards/second</param>
            <param name="moveFlags"></param>
            <param name="firstNode"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Handlers.MovementHandler.Send_SMSG_MOVE_ABANDON_TRANSPORT(WCell.RealmServer.Entities.Unit,System.UInt16)">
            <summary>
            TODO: Find the difference between SMSG_MOVE_ABANDON_TRANSPORT and MSG_MOVE_ABANDON_TRANSPORT
            </summary>
            <param name="unit"></param>
            <param name="value"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.NPCHandler.HandleAutoDeposit(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Auto-move item from Inventory to Bank
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.NPCHandler.HandleAutoWithdrawal(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Auto-move item from Bank to Inventory
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.NPCHandler.SendVendorInventoryList(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC,System.Collections.Generic.List{WCell.RealmServer.NPCs.Vendors.VendorItemEntry})">
            <summary>
            Send the vendor's list of items for sale to the client. 
            *All allowable race and class checks should be done prior to calling this method.
            *All checks on number-limited items should also be done prior to calling this method.
            *This method can handle up to 256 items per vendor. If you try to send more items than that, 
            this method will send only the first 256. 
            </summary>
            <param name="client">The client to send the packet to.</param>
            <param name="itemsForSale">An array of items to send to the client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.NPCHandler.SendSellError(WCell.RealmServer.Network.IPacketReceiver,WCell.Core.EntityId,WCell.Core.EntityId,WCell.Constants.Items.SellItemError)">
            <summary>
            Sends a sell-error packet to the client
            </summary>
            <param name="client">The IRealmClient to send the error to.</param>
            <param name="error">A SellItemError</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.PetHandler.HandleSetAction(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="packet"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.PetHandler.SendSpells(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC,WCell.Constants.Pets.PetAction)">
            <summary>
            Sends any kind of extra command-bar to control other entities, such as NPCs, vehicles etc
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.PetHandler.SendStabledPetsList(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Entities.Unit,System.Byte,System.Collections.Generic.List{WCell.RealmServer.NPCs.Pets.PermanentPetRecord})">
            <summary>
            Send the stabled pets list packet to the client
            </summary>
            <param name="receiver">The client to receive the packet.</param>
            <param name="stableMaster">The stable the client is interacting with.</param>
            <param name="numStableSlots">The number of stable slots the character owns.</param>
            <param name="pets">An array of NPCs containing the ActivePet and the StabledPets</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.QueryTimeRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming time query.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.SendQueryTimeReply(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Send a "time query" reply to the client.
            </summary>
            <param name="client">the client to send to</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.NameQueryRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming name query.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.SendNameQueryReply(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Entities.ILivingEntity)">
            <summary>
            Sends a "name query" reply to the client.
            </summary>
            <param name="client">the client to send to</param>
            <param name="entity">the character information to be sent</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.HandleCreatureQueryRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming creature name query.
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param> 
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.HandleNPCTextQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles client's npc text query
            </summary>
            <param name="client">realm client</param>
            <param name="packet">packet incoming</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.SendNPCTextUpdate(WCell.RealmServer.Entities.Character,WCell.RealmServer.Gossips.IGossipEntry)">
            <summary>
            Sends a npc text update to the character
            </summary>
            <param name="character">recieving character</param>
            <param name="text">class holding all info about text</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QueryHandler.SendNPCTextUpdateSimple(WCell.RealmServer.Entities.Character,System.UInt32,System.String,System.String)">
            <summary>
            Sends a simple npc text update to the character
            </summary>
            <param name="character">recieving character</param>
            <param name="id">id of text to update</param>
            <param name="title">gossip window's title</param>
            <param name="text">gossip window's text</param>
        </member>
        <member name="T:WCell.RealmServer.Handlers.QuestHandler">
            <summary>
            Sequence in Quest packets upon completion:
            
            CMSG_QUESTGIVER_COMPLETE_QUEST
            SMSG_QUESTGIVER_OFFER_REWARD
            CMSG_QUESTGIVER_REQUEST_REWARD
            SMSG_QUESTGIVER_QUEST_COMPLETE
            SMSG_QUESTGIVER_QUEST_DETAILS
            CMSG_QUESTGIVER_CHOOSE_REWARD
            CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY
            
            or:
            CMSG_QUESTGIVER_COMPLETE_QUEST
            SMSG_QUESTGIVER_QUEST_COMPLETE
            CMSG_QUESTGIVER_CHOOSE_REWARD
            CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestConfirmAccept(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest confirm accept.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestPOIQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest position of interest query.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverCancel(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver cancel.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest query.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverHello(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver hello.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverRequestReward(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver request reward.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverStatusQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver status query.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverAcceptQuest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver accept quest.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestInvalid(WCell.RealmServer.Entities.Character,WCell.Constants.Quests.QuestInvalidReason)">
            <summary>
            Sends the quest invalid.
            </summary>
            <param name="chr">The character.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestUpdateComplete(WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Sends the quest update complete.
            </summary>
            <param name="chr">The character.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestUpdateFailed(WCell.RealmServer.Entities.Character,WCell.RealmServer.Quests.Quest)">
            <summary>
            Sends the quest update failed.
            </summary>
            <param name="qst">The quest.</param>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestUpdateFailedTimer(WCell.RealmServer.Entities.Character,WCell.RealmServer.Quests.Quest)">
            <summary>
            Sends the quest update failed timer.
            </summary>
            <param name="qst">The QST.</param>
            <param name="chr">The character</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendUpdateInteractionCount(WCell.RealmServer.Quests.Quest,WCell.RealmServer.Entities.ObjectBase,WCell.RealmServer.Quests.QuestInteractionTemplate,System.UInt32,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends the quest update add kill, this should actually cover both GameObject interaction 
            together with killing the objectBase.
            </summary>
            <param name="quest">The QST.</param>
            <param name="chr">The client.</param>
            <param name="obj">The unit.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendUpdateItems(WCell.Constants.Items.ItemId,System.Int32,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends the quest update add item.
            </summary>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestQueryResponse(WCell.RealmServer.Quests.QuestTemplate,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends the quest query response.
            </summary>
            <param name="qt">The quest id.</param>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendDetails(WCell.RealmServer.Entities.IEntity,WCell.RealmServer.Quests.QuestTemplate,WCell.RealmServer.Entities.Character,System.Boolean)">
            <summary>
            Sends the quest giver quest detail.
            </summary>
            <param name="questGiver">The qg.</param>
            <param name="qt">The quest id.</param>
            <param name="chr">The client.</param>
            <param name="acceptable">if set to <c>true</c> [acceptable].</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestGiverOfferReward(WCell.RealmServer.Entities.IEntity,WCell.RealmServer.Quests.QuestTemplate,WCell.RealmServer.Entities.Character)">
            <summary>
            Offers the reward of the given Quest to the given Character.
            When replying the Quest will be complete.
            </summary>
            <param name="questGiver">The qg.</param>
            <param name="qt">The quest id.</param>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendRequestItems(WCell.RealmServer.Quests.IQuestHolder,WCell.RealmServer.Quests.QuestTemplate,WCell.RealmServer.Entities.Character,System.Boolean)">
            <summary>
            Sends SMSG_QUESTGIVER_REQUEST_ITEMS
            </summary>
            <param name="qg">The qg.</param>
            <param name="qt">The qt.</param>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestGiverStatus(WCell.RealmServer.Quests.IQuestHolder,WCell.Constants.Quests.QuestStatus,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends packet, which informs client about IQuestHolder's status.
            </summary>
            <param name="qg">The qg.</param>
            <param name="status">The status.</param>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendComplete(WCell.RealmServer.Quests.QuestTemplate,WCell.RealmServer.Entities.Character)">
            <summary>
            Sends the quest giver quest complete.
            </summary>
            <param name="qt">The quest id.</param>
            <param name="chr">The client.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.SendQuestList(WCell.RealmServer.Quests.IQuestHolder,System.Collections.Generic.List{WCell.RealmServer.Quests.QuestTemplate},WCell.RealmServer.Entities.Character)">
            <summary>
            Sends the quest giver quest list.
            </summary>
            <param name="qHolder">The quest giver.</param>
            <param name="list">The list.</param>
            <param name="chr">The character.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverChooseReward(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles CMSG_QUESTGIVER_CHOOSE_REWARD.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverCompleteQuest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver complete quest.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverQueryQuest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver query quest.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestLogRemoveQuest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest log remove quest.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestgiverStatusMultipleQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the questgiver status multiple query.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestLogSwapQuest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest log swap quest.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.HandleQuestGiverQueryAutoLaunch(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles the quest giver query autolaunch.
            </summary>
            <param name="client">The client.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.QuestHandler.FindAndSendAllNearbyQuestGiverStatuses(WCell.RealmServer.Entities.Character)">
            <summary>
            Finds and sends all surrounding QuestGiver's current Quest-Status to the given Character
            </summary>
            <param name="chr">The <see cref="T:WCell.RealmServer.Entities.Character"/>.</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.RelationHandler.ContactListRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming friend list request
            </summary>
            <param name="client">the client that sent the packet</param>
            <param name="packet">the packet we received</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.RelationHandler.AddFriendRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming add friend request
            </summary>
            <param name="client">the client that sent the packet</param>
            <param name="packet">the packet we received</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.RelationHandler.RemoveFriendRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming remove friend request
            </summary>
            <param name="client">the client that sent the packet</param>
            <param name="packet">the packet we received</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.RelationHandler.SetRelationNoteRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming friend set note request
            </summary>
            <param name="client">the client that sent the packet</param>
            <param name="packet">the packet we received</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.RelationHandler.AddIgnoreRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming add ignore request
            </summary>
            <param name="client">the client that sent the packet</param>
            <param name="packet">the packet we received</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.RelationHandler.RemoveIgnoreRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming remove ignore request
            </summary>
            <param name="client">the client that sent the packet</param>
            <param name="packet">the packet we received</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TalentHandler.SendClearQuery(WCell.RealmServer.Talents.TalentCollection)">
            <summary>
            Sends a request to wipe all talents, which must be confirmed by the player
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TalentHandler.SendTalentGroupList(WCell.RealmServer.Talents.TalentCollection,System.Int32)">
            <summary>
            Sends the client the list of talents
            </summary>
            <param name="hasTalents">The IHasTalents to send the list from</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TaxiHandler.HandleEnable(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Talk to a Taxi Vendor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TaxiHandler.HandleAvailableNodesQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Talk to a Taxi Vendor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TaxiHandler.HandleTaxiActivate(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Fly away
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TaxiHandler.HandleTaxiActivateFar(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Fly far away. (For taxi paths that include more than one stop.)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TaxiHandler.HandleTaxiStatusQuery(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Client asks "Is this TaxiNode activated yet?"
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TaxiHandler.HandleNextTaxiDestination(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Asked by the client upon landing at each stop in a multinode trip
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Handlers.TicketHandler">
            <summary>
            TODO: Check for existing tickets before creating/deleting
            TODO: Always set Character.Ticket and Ticket.Owner correspondingly
            TODO: Commands
            TODO: Save to DB
            TODO: Enable staff to list any ticket that was issued since serverstart and maybe save a backup copy to Ticket archive
            TODO: Attach Tickets to mail system
            TODO: Enforced Help-chat for fast ticket-handling etc
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TicketHandler.SendGetTicketResponse(WCell.RealmServer.Network.IPacketReceiver,WCell.RealmServer.Help.Tickets.Ticket)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="ticket">Can be null</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.TradeHandler.SendTradeUpdate(WCell.RealmServer.Network.IPacketReceiver,System.Boolean,System.UInt32,WCell.RealmServer.Entities.Item[])">
            <summary>
            Sends the new state of the trading window to other party
            </summary>
            <param name="otherParty">Whether this is sending the own info to the other party (or, if false, to oneself)</param>
            <param name="client">receiving party</param>
            <param name="money">new amount of money</param>
            <param name="items">new items</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.WhoHandler.WhoListRequest(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Handles an incoming who list request
            </summary>
            <param name="client">the Session the incoming packet belongs to</param>
            <param name="packet">the full packet</param>
        </member>
        <member name="M:WCell.RealmServer.Handlers.WhoHandler.SendWhoList(WCell.RealmServer.Network.IPacketReceiver,System.Collections.Generic.ICollection{WCell.RealmServer.Entities.Character})">
            <summary>
            Sends to the specified client the Who List based on the given characters
            </summary>
            <param name="client">The client to send the list</param>
            <param name="characters">The list of characters that matched the Who List search</param>
        </member>
        <member name="T:WCell.RealmServer.Handlers.SummonObjectWildEffectHandler">
            <summary>
            Summons an object without owner
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Instances.BaseInstance">
            <summary>
            The base class for all WoW-style "Instances" (Dungeon, Heroic, Raid etc)
            
            TODO:
            - SMSG_INSTANCE_RESET_FAILURE: The party leader has attempted to reset the instance you are in. Please zone out to allow the instance to reset.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.BaseInstance.DefaultInstanceTimeoutMillis">
            <summary>
            The timeout for normal Dungeon instances
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Instances.BaseInstance.CanExpire">
            <summary>
            Whether this instance will ever expire
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Instances.BaseInstance.Difficulty">
            <summary>
            Difficulty of the instance
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Instances.BaseInstance.LastReset">
            <summary>
            The last time this Instance was reset
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.BaseInstance.CanReset(WCell.RealmServer.Entities.Character)">
            <summary>
            Whether this instance can be reset
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.BaseInstance.PerformSave">
            <summary>
            Method is to be overridden by instance implementation
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Instances.DungeonInstanceSettings">
            <summary>
            Used to "flavor" Dungeon instances
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.GlobalInstanceTimer.LoadTimers">
            <summary>
            Load and verify timers
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Instances.IInstanceHolderSet">
            <summary>
            Represents a Group or single Character (who can own an instance)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Instances.IInstanceHolderSet.InstanceLeader">
            <summary>
            The leader
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Instances.IInstanceHolderSet.InstanceLeaderCollection">
            <summary>
            The InstanceInfo of the leader
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.IInstanceHolderSet.ForeachInstanceHolder(System.Action{WCell.RealmServer.Instances.InstanceCollection})">
            <summary>
            Iterates over all the InstanceInfo of all Characters in the set
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.IInstanceHolderSet.GetActiveInstance(WCell.RealmServer.Global.MapTemplate)">
            <summary>
            Gets the Instance of the given Map that this Holder already holds
            or null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Instances.InstanceBinding.Instance">
            <summary>
            Might Return null
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.BindingType.Soft">
            <summary>
            Normal, resettable
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.BindingType.Hard">
            <summary>
            Heroic and Raids
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Instances.InstanceCollection">
            <summary>
            Manages all Instance-relations of a Character.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.InstanceCollection.m_characterId">
            <summary>
            Our character id
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.InstanceCollection.m_character">
            <summary>
            Our character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.InstanceCollection.m_bindings">
            <summary>
            Bindings of normal, resettable instances
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Instances.InstanceCollection.CharacterId">
            <summary>
            EntityId.Low of the Owner of this log
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.BindTo(WCell.RealmServer.Instances.BaseInstance)">
            <summary>
            Binds the instance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.GetBinding(WCell.Constants.World.MapId,WCell.RealmServer.Instances.BindingType)">
            <summary>
            Returns the Cooldown object for the Instance with the given MapId.
            </summary>
            <param name="map">The MapId of the Instance in question.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.GetActiveInstance(WCell.RealmServer.Global.MapTemplate)">
            <summary>
            Checks the list of stored Raid and Heroic instances and the list of recently run Normal 
            instances for a reference to the given map.
            </summary>
            <param name="template">The MapInfo of the Instance in question.</param>
            <returns>The Instance if found, else null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.TryResetInstances">
            <summary>
            Tries to reset all owned Instances.
            Requires to be in Character's context if online.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.SendRaidTimes">
            <summary>
            Sends the list of Raids completed and In progress and when they will reset.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.SendRaidTimes(WCell.RealmServer.Chat.IChatTarget)">
            <summary>
            Sends the list of Raids completed and In progress and when they will reset.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.ForeachBinding(WCell.RealmServer.Instances.BindingType,System.Action{WCell.RealmServer.Instances.InstanceBinding})">
            <summary>
            Warning: Requires Character to be logged in and to be in Character's context.
            Often you might want to use ForeachBinding() instead.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceCollection.RemoveExpiredSoftBindings">
            <summary>
            Updates the List of stored InstanceCooldowns, removing the expired ones.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.InstanceMgr.MaxInstancesPerHour">
            <summary>
            The max amount of different instances that a Character may enter within <see cref="F:WCell.RealmServer.Instances.InstanceMgr.InstanceCounterTime"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.InstanceMgr.DungeonExpiryMinutes">
            <summary>
            Amount of time until a normal empty Instance expires by default
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Instances.InstanceMgr.InstanceCounterTime">
            <summary>
            Players may only enter MaxInstancesPerCharPerHour instances within this cooldown
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.CreateInstance``1(WCell.RealmServer.Entities.Character,WCell.RealmServer.Instances.InstanceTemplate,System.UInt32)">
            <param name="creator">Can be null</param>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.CreateInstance(WCell.RealmServer.Entities.Character,WCell.RealmServer.Instances.InstanceTemplate,System.UInt32)">
            <param name="creator">Can be null</param>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.CreateInstance(WCell.RealmServer.Entities.Character,WCell.Constants.World.MapId)">
            <summary>
            Convinience method for development
            </summary>
            <param name="creator">Can be null</param>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.SetupInstance(WCell.RealmServer.Entities.Character,WCell.RealmServer.Instances.BaseInstance,WCell.RealmServer.Instances.InstanceTemplate,System.UInt32)">
            <param name="creator">Can be null</param>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.EnterInstance(WCell.RealmServer.Entities.Character,WCell.RealmServer.Global.MapTemplate,WCell.Util.Graphics.Vector3)">
            <summary>
            This is called when an area trigger causes entering an instance
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.LeaveInstance(WCell.RealmServer.Entities.Character,WCell.RealmServer.Global.MapTemplate,WCell.Util.Graphics.Vector3)">
            <summary>
            This is called when an area trigger causes leaving an instance
            TODO: Add associations to raid individuals
            TODO: Implement the 5 instances per hour limit, simple but needs the right spot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.GetOfflineInstances(System.UInt32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lowId"></param>
            <param name="autoCreate"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.GetOfflineInstances(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lowId"></param>
            <param name="autoCreate"></param>
            <param name="remove"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Instances.InstanceMgr.RetrieveInstances(WCell.RealmServer.Entities.Character)">
            <summary>
            Gets and removes the InstanceLog for the given Character
            </summary>
            <param name="character"></param>
        </member>
        <member name="T:WCell.RealmServer.Instances.InstanceProgress">
            <summary>
            Defines the progress inside an instance that can also be saved to DB
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Instances.RaidInstanceSettings">
            <summary>
            Used to "flavor" Raid instances
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Modifiers.UnitUpdates">
            <summary>
            Container for methods to update Unit-Fields.
            DEPRECATED: Move to Unit.StatUpdates.cs, Character.StatUpdates.cs and NPC.StatUpdates
            TODO: Get rid of the UpdateHandlers and this whole array of update values (make them properties instead)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateHealthRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            Updates the amount of Health regenerated per regen-tick, independent on the combat state
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateNormalHealthRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            Updates the amount of Health regenerated per regen-tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateCombatHealthRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            Updates the amount of Health regenerated per regen-tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdatePowerRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            Updates the amount of Power regenerated per regen-tick
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateDamage(WCell.RealmServer.Entities.Character,WCell.Constants.Items.InventorySlot)">
            <summary>
            Weapon changed
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateMainDamage(WCell.RealmServer.Entities.Unit)">
            <summary>
            Re-calculates the mainhand melee damage of this Unit
            References:
            http://www.wowwiki.com/Attack_power
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateOffHandDamage(WCell.RealmServer.Entities.Unit)">
            <summary>
            Re-calculates the offhand damage of this Unit
            See http://www.wowwiki.com/Attack_power
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateMainAttackTime(WCell.RealmServer.Entities.Unit)">
            <summary>
            Re-calculates the mainhand melee damage of this Unit
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateOffHandAttackTime(WCell.RealmServer.Entities.Unit)">
            <summary>
            Re-calculates the offhand damage of this Unit
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.UpdateDefense(WCell.RealmServer.Entities.Unit)">
            <summary>
            Increases the defense skill according to your defense rating
            Updates Dodge and Parry chances
            </summary>
            <param name="unit"></param>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.GetMultiMod(System.Single,System.Int32)">
            <summary>
            Applies a percent modifier to the given value:
            0 means unchanged; +x means multiply with x; -x means divide by (1 - x)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.ChangeModifier(WCell.RealmServer.Entities.Unit,WCell.Constants.StatModifierInt,System.Int32)">
            <summary>
            Changes a flat modifier
            </summary>
            <param name="unit"></param>
            <param name="mod"></param>
            <param name="delta"></param>
        </member>
        <member name="M:WCell.RealmServer.Modifiers.UnitUpdates.ChangeModifier(WCell.RealmServer.Entities.Unit,WCell.Constants.StatModifierFloat,System.Single)">
            <summary>
            Changes a multiplier modifier
            </summary>
            <param name="unit"></param>
            <param name="mod"></param>
            <param name="delta"></param>
        </member>
        <member name="T:WCell.RealmServer.Lang.ArrayLocalizer">
            <summary>
            Extension class that gives tools to select array elements, based on ClientLocale
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Lang.ArrayLocalizer.Localize(System.String[],WCell.Constants.ClientLocale,System.Object[])">
            <summary>
            Returns the entry at the index that equals the numeric value of locale
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Lang.ArrayLocalizer.LocalizeWithDefaultLocale(System.String[],System.Object[])">
            <summary>
            Returns the entry at the index that equals the numeric value of the default locale
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Lang.RealmLangKey">
            <summary>
            Keys for localizable strings
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Lang.RealmLocalizer.FormatTimeSecondsMinutes(System.Int32)">
            <summary>
            TODO: Localize (use TranslatableItem)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.ILootable.Loot">
            <summary>
            The Loot that is currently lootable
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.ILootable.LootMoney">
            <summary>
            The amount of money that can be looted.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.ILootable.GetLootId(WCell.Constants.Looting.LootEntryType)">
            <summary>
            The LootId for the given <see cref="T:WCell.Constants.Looting.LootEntryType"/> of this Lootable object.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.ILootable.OnFinishedLooting">
            <summary>
            Is called after this Lootable has been looted empty or its Loot expired
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Looting.Loot">
            <summary>
            Represents a pile of lootable objects and its looters
            
            TODO: Roll timeout (and loot timeout?)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.Looters">
            <summary>
            The set of all who are allowed to loot. 
            If everyone released the Loot, it becomes available to everyone else?
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.Money">
            <summary>
            The total amount of money to be looted
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.Items">
            <summary>
            All items that can be looted.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.Lootable">
            <summary>
            The Container being looted
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.Method">
            <summary>
            The method that determines how to distribute the Items
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.Group">
            <summary>
            The Group who is looting this Loot. 
            If all members of the group release it, the Loot becomes available to everyone else.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.m_freelyAvailableCount">
            <summary>
            Amount of items that are freely available
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.m_moneyLooted">
            <summary>
            Whether money was already looted
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.m_released">
            <summary>
            Whether none of the initial looters is still claiming this.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.Loot.Threshold">
            <summary>
            The least ItemQuality that is decided through rolls/MasterLooter correspondingly.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.TakenCount">
            <summary>
            The amount of Items that have already been taken
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.RemainingCount">
            <summary>
            Amount of remaining items
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.FreelyAvailableCount">
            <summary>
            Amount of items that are freely available to everyone:
            Items that are passed by everyone or that have been left over by the looter whose turn it is in RoundRobin
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.UsesRoundRobin">
            <summary>
            Whether RoundRobin applies (by default applies if LootMethod == RoundRobin or -for items below threshold- when using most of the other methods too)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.IsReleased">
            <summary>
            Whether none of the initial looters is still looking at this (everyone else may thus look at it)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.Loot.IsMoneyLooted">
            <summary>
            Whether the money has already been given out
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.Initialize(WCell.RealmServer.Entities.Character,System.Collections.Generic.IList{WCell.RealmServer.Looting.LooterEntry},WCell.Constants.World.MapId)">
            <summary>
            Adds all initial Looters of nearby Characters who may loot this Loot.
            When all of the initial Looters gave up the Loot, the Loot becomes free for all.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.GiveMoney">
            <summary>
            This gives the money to everyone involved. Will only work the first time its called. 
            Afterwards <c>IsMoneyLooted</c> will be true.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.SendMoney(WCell.RealmServer.Entities.Character,System.UInt32)">
            <summary>
            Gives the receiver the money and informs everyone else
            </summary>
            <param name="receiver"></param>
            <param name="amount"></param>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.CheckFinished">
            <summary>
            Checks whether this Loot has been fully looted and if so, dispose and dismember the corpse or consumable object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.CheckTakeItemConditions(WCell.RealmServer.Looting.LooterEntry,WCell.RealmServer.Looting.LootItem)">
            <summary>
            Returns whether the given looter may loot the given Item.
            Make sure the Looter is logged in before calling this Method.
            
            TODO: Find the right error messages
            TODO: Only give every MultiLoot item to everyone once! Also check for quest-dependencies etc.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.TakeItem(WCell.RealmServer.Looting.LooterEntry,System.UInt32,WCell.RealmServer.Items.BaseInventory,System.Int32)">
            <summary>
            Try to loot the item at the given index of the current loot
            </summary>
            <returns>The looted Item or null if Item could not be taken</returns>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.HandoutItem(WCell.RealmServer.Entities.Character,WCell.RealmServer.Looting.LootItem,WCell.RealmServer.Items.BaseInventory,System.Int32)">
            <summary>
            Hands out the given LootItem to the given Character.
            </summary>
            <remarks>Adds the given container at the given slot or -if not specified- to the next free slot</remarks>
            <param name="chr"></param>
            <param name="lootItem"></param>
            <param name="targetCont"></param>
            <param name="targetSlot"></param>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.RemoveItem(WCell.RealmServer.Looting.LootItem)">
            <summary>
            Marks the given Item as taken and removes it from the list of available Items
            </summary>
            <param name="lootItem"></param>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.Roll(WCell.RealmServer.Entities.Character,System.UInt32,WCell.Constants.Looting.LootRollType)">
            <summary>
            Lets the given Character roll for the item at the given index
            </summary>
            <param name="index"></param>
            <param name="type"></param>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.ForceDispose">
            <summary>
            Disposes this loot, despite the fact that it could still contain something valuable
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.Loot.GiveLoot(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character,System.Byte)">
            <summary>
            Lets the master looter give the item in the given slot to the given receiver
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Looting.LooterEntry">
            <summary>
            TODO: Keep track of roll-results etc
            Every Character has a LooterEntry which represents the interface between a Character and its current Loot
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LooterEntry.Owner">
            <summary>
            The Looter
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LooterEntry.Loot">
            <summary>
            The Loot that the Character is currently looking at
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LooterEntry.TryLoot(WCell.RealmServer.Looting.ILootable)">
            <summary>
            Requires loot to already be generated
            </summary>
            <param name="lootable"></param>
        </member>
        <member name="M:WCell.RealmServer.Looting.LooterEntry.MayLoot(WCell.RealmServer.Looting.Loot)">
            <summary>
            Returns whether this Looter is entitled to loot anything from the given loot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LooterEntry.Release">
            <summary>
            Releases the current loot and (maybe) makes it available to everyone else.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootItem.RandomPropertyId">
            <summary>
            The random id of the Property to be applied to the Item.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootItem.Create(WCell.RealmServer.Items.ItemStackTemplate[])">
            <summary>
            Creates an array of LootItems from the given array of ItemStackDescriptions
            </summary>
            <param name="descs"></param>
            <returns></returns>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootItem.Amount">
            <summary>
            The Amount of the stack of this Item
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootItem.Passed">
            <summary>
            TODO: 
            whether this Item is above Threshold and no one claimed it (meaning its now FFA).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootItem.Decision">
            <summary>
            The current LootDecision determines how distribution of this item is decided
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootItem.Taken">
            <summary>
            whether this Item has already been taken.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootItem.MultiLooters">
            <summary>
            The list of Looters that are guaranteed to get this Item.
            If not null is returned, only these Looters can get this Item.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootItem.AddMultiLooters(System.Collections.Generic.IEnumerable{WCell.RealmServer.Looting.LooterEntry})">
            <summary>
            Adds the given Looters to the list of Looters that are guaranteed to get this Item.
            If there are any MultiLooters, no one else can get this Item.
            </summary>
            <param name="looters"></param>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootEntity.DropChance">
            <summary>
            A value between 0 and 100 to indicate the chance of this Entry to drop
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Looting.LootMgr">
            <summary>
            Static utility and container class for Looting.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.HighestRoll">
            <summary>
            The highest roll that someone can get when rolling for Need before Greed.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.LootRadius">
            <summary>
            Everyone in the Group who is within this Radius, can loot and gets a share of the money
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.LootItemDropFactor">
            <summary>
            The factor to be applied to each Item's drop-chance before determining whether it will drop or not.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.RoundRobinDefault">
            <summary>
            If set, LootItems below threshold always are distributed using RoundRobin rules.
            Set it to false to have FFA rules apply by all default Items below threshold.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.MaxLootCount">
            <summary>
            Maximum amount of <see cref="T:WCell.RealmServer.Looting.LootItem">Items</see> in the loot of one object or corpse.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.DefaultLootRollTimeout">
            <summary>
            The timeout for a LootRoll in milliseconds.
            Default: 1 min
            TODO: Implement timeout timer
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Looting.LootMgr.DefaultMoneyDropFactor">
            <summary>
            The factor by which to multiply the amount of gold available to loot
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.AddEntry(WCell.RealmServer.Looting.LootItemEntry)">
            <summary>
            Adds the new LootItemEntry to the global container.
            Keeps the set of entries sorted by rarity.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.CreateLoot``1(WCell.RealmServer.Looting.ILootable,WCell.RealmServer.Entities.Character,WCell.Constants.Looting.LootEntryType,System.Boolean,WCell.Constants.World.MapId)">
            <summary>
            Creates a new Loot object and returns it or null, if there is nothing to be looted.
            </summary>
            <typeparam name="T"><see cref="T:WCell.RealmServer.Looting.ObjectLoot"/> or <see cref="T:WCell.RealmServer.Looting.NPCLoot"/></typeparam>
            <param name="lootable"></param>
            <param name="initialLooter"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.CreateAndSendObjectLoot(WCell.RealmServer.Looting.ILootable,WCell.RealmServer.Entities.Character,WCell.Constants.Looting.LootEntryType,System.Boolean)">
            <summary>
            Generates loot for Items and GOs. 
            </summary>
            <param name="lootable">The Object or Unit that is being looted</param>
            <returns>The object's loot or null if there is nothing to get or the given Character can't access the loot.</returns>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.GetOrCreateLoot(WCell.RealmServer.Looting.ILootable,WCell.RealmServer.Entities.Character,WCell.Constants.Looting.LootEntryType,System.Boolean)">
            <summary>
            Generates normal loot (usually for dead mob-corpses). 
            Returns null, if the loot is empty.
            </summary>
            <param name="lootable">The Object or Unit that is being looted</param>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.CreateLootItems(System.UInt32,WCell.Constants.Looting.LootEntryType,System.Boolean,System.Collections.Generic.IList{WCell.RealmServer.Looting.LooterEntry})">
            <summary>
            Returns all Items that can be looted off the given lootable
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.CanOpen(WCell.RealmServer.Entities.ILockable,WCell.RealmServer.Entities.Character)">
            <summary>
            Returns whether this lockable can be opened by the given Character
            </summary>
            <param name="lockable"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootMgr.ContainsQuestItemsFor(WCell.RealmServer.Looting.ILootable,WCell.RealmServer.Entities.Character,WCell.Constants.Looting.LootEntryType)">
            <summary>
            Whether the given lootable contains quest items for the given Character when looting with the given type
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Looting.ResolvedLootItemList">
            <summary>
            Necessary for UDB's awful loot-relations
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Looting.LootRollEntry">
            <summary>
            A LootRollEntry consists of the number that was rolled and the type of Roll that the looter decided
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootRollEntry.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />. 
            </returns>
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:WCell.RealmServer.Looting.LootRollProgress">
            <summary>
            Represents the Loot-Progress of one LootItem
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootRollProgress.RemainingParticipants">
            <summary>
            Participants who did not roll yet
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootRollProgress.Rolls">
            <summary>
            The rolls that have been casted so far. The winner will receive this item, once the roll ended.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootRollProgress.IsRollFinished">
            <summary>
            Whether every participant rolled
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Looting.LootRollProgress.HighestParticipant">
            <summary>
            The participant that currently rolled the highest Number - also considering
            need/greed priorities.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootRollProgress.Roll(WCell.RealmServer.Entities.Character,WCell.Constants.Looting.LootRollType)">
            <summary>
            Lets the given Character roll
            </summary>
            <param name="chr"></param>
            <param name="type"></param>
        </member>
        <member name="M:WCell.RealmServer.Looting.LootRollProgress.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:WCell.RealmServer.Looting.ObjectLoot">
            <summary>
            TODO: Implement seperated loot for everyone when looting Quest-objects
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Mail.MailAccount">
            <summary>
            Represents the ingame Mail-Account of this Character
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailAccount.AllMail">
            <summary>
            All Mail that is associated with this character (undelivered, read or unread)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailAccount.Load">
            <summary>
            Loads stored mail from DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Mail.MailAccount.MailBox">
            <summary>
            The currently used MailBox (or null)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailAccount.SendMail(WCell.RealmServer.Database.CharacterRecord,System.String,System.String,WCell.Constants.MailStationary,System.Collections.Generic.ICollection{WCell.RealmServer.Entities.Item},System.UInt32,System.UInt32)">
            <summary>
            Creates and sends a new Mail with the given parameters
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailAccount.GetItemToMail(WCell.Core.EntityId)">
            <summary>
            Returns the corresponding Item, if it can be mailed, else will send error message
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailAccount.GetMail">
            <summary>
            IMPORTANT: Required IO-Queue Context
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailMessage.NextId">
            <summary>
            Returns the next unique Id for a new Item
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailMessage.#ctor">
            <summary>
            Create an exisiting MailMessage
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailMessage.#ctor(System.String,System.String)">
            <summary>
            Create a new MailMessage
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Mail.MailMessage.Body">
            <summary>
            The body of the message
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Mail.MailMessage.IncludedItems">
            <summary>
            The list of included items. 
            Returns null if no items are added.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailMessage.Destroy">
            <summary>
            Delete letter and all containing Items
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailMessage.ReturnToSender">
            <summary>
            Returns to sender or Destroys the mail (if sender doesn't exist)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MaxItemsPerMail">
            <summary>
            Max number of items each player can store in their mailbox.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.DeliverMailInstantly">
            <summary>
            Whether or not to delivery mail instantly for any type of mail.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MinPacketDeliveryDelay">
            <summary>
            Min delivery delay of mail with items or Gold in seconds (Default: 30 minutes)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MaxPacketDeliveryDelay">
            <summary>
            Max delivery delay of mail with items or Gold in seconds (Default: 60 minutes)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MaxMailCount">
            <summary>
            Max number of messages each player can store in their mailbox.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MaxStoredItems">
            <summary>
            Max number of items each player can store in their mailbox.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MailExpiryDelay">
            <summary>
            Max number of days to store regular mail in the mailbox.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MaxCODExpiryDelay">
            <summary>
            Max number of days to store Cash-On_Delivery mail in the mailbox.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.AllowInterFactionMail">
            <summary>
            Whether to allow characters to send mail to characters on the opposite Team.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.MailTextItemTemplate">
            <summary>
            The index of the item template to use for creating permanent mail storage.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Mail.MailMgr.PostagePrice">
            <summary>
            The amount of postage to charge per message sent, in copper.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Mail.MailMgr.ReturnValueMailFor(System.UInt32)">
            <summary>
            Returns all value mail that was sent to the Character with the given Id to their original sender
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Network.AuthenticationClient">
            <summary>
            Provides a client wrapper around the authentication service used for 
            authentication-to-realm server communication.
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Network.AuthenticationClient.Connected">
            <summary>
            Is called when the RealmServer successfully connects to the AuthServer
            </summary>
        </member>
        <member name="E:WCell.RealmServer.Network.AuthenticationClient.Disconnected">
            <summary>
            Is called when the RealmServer disconnects from or loses connection to the AuthServer
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.AuthenticationClient.#ctor">
            <summary>
            Initializes this Authentication Client
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.AuthenticationClient.IsRunning">
            <summary>
            If set to false, will disonnect (if connected) and stop trying to re-connect.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.AuthenticationClient.IsConnected">
            <summary>
            Whether or not the service channel is open.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.AuthenticationClient.Channel">
            <summary>
            The adapter to the authentication service channel.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.AuthenticationClient.ChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.AuthenticationClient.ForceUpdate">
            <summary>
            Notifies the conection maintenance to be re-scheduled immediately. 
            Does not wait for the reconnect attempt to start or finish.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.AuthenticationClient.Connect">
            <summary>
            Must be executed in RealmServer context
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Network.AuthQueue">
            <summary>
            Manages the queue of overflowed clients connecting to the server when it is full.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.AuthQueue.QueuedClients">
            <summary>
            The number of clients currently waiting in the queue.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.AuthQueue.EnqueueClient(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Adds a client to the queue.
            </summary>
            <param name="client">the client to add to the queue</param>
        </member>
        <member name="M:WCell.RealmServer.Network.AuthQueue.ProcessQueuedClients(System.Object)">
            <summary>
            Goes through the queue, pulling out clients for the number of slots available at the time.
            </summary>
            <param name="state">the timer object</param>
        </member>
        <member name="T:WCell.RealmServer.Network.FakePacketMgr">
            <summary>
            A PacketManager to handle packets sent by the server to IRealmClients.
            Use this to register/unregister PacketHandlers that handle packet sent by the server
            to this FakeClient.
            TODO: Consider whether to also enqueue packets on Map threads
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakePacketMgr.HandlePacket(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Attempts to handle an incoming packet. 
            Constraints:
            OpCode must be valid.
            GamePackets cannot be sent if ActiveCharacter == null.
            </summary>
            <param name="client">the client the packet is from</param>
            <param name="packet">the packet to be handled</param>
            <returns>true if the packet handler executed successfully; false otherwise</returns>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.Addons">
            <summary>
            The Addon data for the client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.Account">
            <summary>
            The account on this session.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.IsEncrypted">
            <summary>
            Determines whether the incoming and outgoing packets are encrypted.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.OutOfSyncDelay">
            <summary>
            The amount of time skipped by the client.
            </summary>
            <remarks>Deals with the the way we calculate movement delay.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.TickCount">
            <summary>
            The client tick count.
            </summary>
            <remarks>It is set by opcodes 912/913, and seems to be a client ping sequence that is
            local to the map, and thus it resets to 0 on a map change.  Real usage isn't known.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.ClientTime">
            <summary>
            The local system uptime of the client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.Latency">
            <summary>
            Connection latency between client and server.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.ActiveCharacter">
            <summary>
            The <see cref="T:WCell.RealmServer.Entities.Character" /> that the client is actively playing.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.Info">
            <summary>
            The <see cref="T:WCell.Core.ClientInformation"/> for this client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.ClientSeed">
            <summary>
            The client seed sent by the client during re-authentication.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.FakeRealmClient.ClientDigest">
            <summary>
            The authentication message digest received from the client during re-authentication.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.ReceiveCMSG(WCell.Core.Network.DisposableRealmPacketIn,System.Boolean)">
            <summary>
            Lets the server handle the given packet.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.ReceiveCMSG(WCell.Core.Network.DisposableRealmPacketIn,System.Boolean,System.Boolean)">
            <summary>
            Lets the server handle the given packet.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.ReceiveCMSG(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Lets the server handle the given packet, as though it was sent by this Client.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.ReceiveCMSG(WCell.RealmServer.RealmPacketOut,System.Boolean)">
            <summary>
            Lets the server handle the given packet, as though it was sent by this Client.
            </summary>
            <param name="wait">Whether to wait for the Packet finish processing</param>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.ReceiveCMSG(WCell.RealmServer.RealmPacketOut,System.Boolean,System.Boolean)">
            <summary>
            Lets the server handle the given packet, as though it was sent by this Client.
            </summary>
            <param name="dispose">Whether to dispose the packet after handling</param>
            <param name="wait">Whether to wait for the Packet finish processing</param>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.HandleCMSG(WCell.RealmServer.RealmPacketIn,System.Boolean)">
            <param name="wait">Whether to wait for the Packet to be fully processed</param>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.SendAndWait(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends the given Packet and waits until after it was processed,
            in case that it was enqueued
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.SendAndWait(WCell.RealmServer.RealmPacketOut,System.Boolean)">
            <summary>
            Sends the given Packet and waits until after it was processed,
            in case that it was enqueued
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.Disconnect">
            <summary>
            Shutdown Client and remove from server.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.FakeRealmClient.CreatePacket(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new PacketIn from the buffer of an existing PacketOut
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.IPacketReceiver.Send(WCell.RealmServer.RealmPacketOut)">
            <summary>
            Sends a packet to the target.
            </summary>
            <param name="packet">the packet to send</param>
        </member>
        <member name="T:WCell.RealmServer.Network.IRealmClient">
            <summary>
            The interface for any kind of IRealmClient (can be used to create fake-IRealmClients)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.Server">
            <summary>
            The server this client is serviced by.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.Info">
            <summary>
            The <see cref="T:WCell.Core.ClientInformation">system information</see> for this client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.Addons">
            <summary>
            The compressed addon data sent by the client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.Account">
            <summary>
            The account on this session.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.ActiveCharacter">
            <summary>
            The <see cref="T:WCell.RealmServer.Entities.Character" /> that the client is currently playing.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.IsOffline">
            <summary>
            Whether or not this client is currently offline (not connected anymore)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.IsEncrypted">
            <summary>
            Whether or not communication with this client is encrypted.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.ClientTime">
            <summary>
            The local system uptime of the client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.Latency">
            <summary>
            Connection latency between client and server.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.OutOfSyncDelay">
            <summary>
            The amount of time skipped by the client.
            </summary>
            <remarks>Deals with the the way we calculate movement delay.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.LastClientMoveTime">
            <summary>
            The time that was sent by the Client in the last movement-packet
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.TickCount">
            <summary>
            The client tick count.
            </summary>
            <remarks>It is set by opcodes 912/913, and seems to be a client ping sequence that is
            local to the map, and thus it resets to 0 on a map change.  Real usage isn't known.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.ClientSeed">
            <summary>
            The client seed sent by the client during re-authentication.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.ClientDigest">
            <summary>
            The authentication message digest received from the client during re-authentication.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.IRealmClient.SessionKey">
            <summary>
            The current session key
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.IRealmClient.Disconnect">
            <summary>
            Disconnects the client.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Network.RealmClient">
            <summary>
            Represents a client connected to the realm server
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.Server">
            <summary>
            The server this client is connected to.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.Info">
            <summary>
            The <see cref="T:WCell.Core.ClientInformation">system information</see> for this client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.Addons">
            <summary>
            The compressed addon data sent by the client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.Account">
            <summary>
            The account on this session.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.ActiveCharacter">
            <summary>
            The <see cref="T:WCell.RealmServer.Entities.Character" /> that the client is currently playing.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.IsOffline">
            <summary>
            Whether or not this client is currently logging out.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.IsEncrypted">
            <summary>
            Whether or not communication with this client is encrypted.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.ClientTime">
            <summary>
            The local system uptime of the client.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.Latency">
            <summary>
            Connection latency between client and server.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.OutOfSyncDelay">
            <summary>
            The amount of time skipped by the client.
            </summary>
            <remarks>Deals with the the way we calculate movement delay.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.TickCount">
            <summary>
            The client tick count.
            </summary>
            <remarks>It is set by opcodes 912/913, and seems to be a client ping sequence that is
            local to the map, and thus it resets to 0 on a map change.  Real usage isn't known.</remarks>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.ClientSeed">
            <summary>
            The client seed sent by the client during re-authentication.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.ClientDigest">
            <summary>
            The authentication message digest received from the client during re-authentication.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.RealmClient.#ctor(WCell.RealmServer.RealmServer)">
            <summary>
            Create an realm client for a given server.
            </summary>
            <param name="server">reference to the parent RealmServer</param>
        </member>
        <member name="M:WCell.RealmServer.Network.RealmClient.OnReceive(Cell.Core.BufferSegment)">
            <summary>
            Pass recieved data into the packet buffer and try to parse.
            </summary>
            <param name="_remainingLength">number of bytes waiting to be read</param>
            <returns>false, if there is a part of a packet still remaining</returns>
        </member>
        <member name="M:WCell.RealmServer.Network.RealmClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the given bytes representing a full packet, to the Client
            </summary>
            <param name="packet"></param>
        </member>
        <member name="P:WCell.RealmServer.Network.RealmClient.SessionKey">
            <summary>
            The session key for the latest session of this account.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.RealmClient.Encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts the byte array
            </summary>
            <param name="data">The raw packet data to encrypt</param>
        </member>
        <member name="T:WCell.RealmServer.Network.RealmPacketMgr">
            <summary>
            Manages packet handlers and the execution of them.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Network.RealmPacketMgr.HandlePacket(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn)">
            <summary>
            Attempts to handle an incoming packet. 
            Constraints: OpCode must be valid.
            GamePackets cannot be sent if ActiveCharacter == null or Account == null.
            The packet is disposed after being handled.
            </summary>
            <param name="client">the client the packet is from</param>
            <param name="packet">the packet to be handled</param>
            <returns>true if the packet could be handled or false otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Network.RealmPacketMgr.CheckConstraints(WCell.RealmServer.Network.IRealmClient,WCell.Core.Network.PacketHandler{WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.RealmPacketIn},WCell.RealmServer.RealmPacketIn)">
            <summary>
            Gets the <see cref="T:WCell.Util.Threading.IContextHandler"/> that should handle this incoming packet
            </summary>
            <param name="client"></param>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.Paths.PathVertex">
            <summary>
            A bend or other kind of special location on a <see cref="T:WCell.RealmServer.Taxi.TaxiPath"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Paths.PathVertex.Delay">
            <summary>
            Delay in seconds of how long to stay at this node
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Paths.PathVertex.FromLastNode">
            <summary>
            Normalized vector in direction from the last node
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Paths.PathVertex.TimeFromStart">
            <summary>
            Time from start in millis
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Paths.PathVertex.TimeFromPrevious">
            <summary>
            Time from previous node in millis
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Privileges.PrivilegeMgr">
            <summary>
            Handles the management of role groups, and their permissions.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Privileges.PrivilegeMgr.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.PrivilegeMgr.HighestRole">
            <summary>
            Returns the RoleGroup with the highest Rank.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.PrivilegeMgr.LowestRole">
            <summary>
            Returns the RoleGroup with the highest Rank.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.PrivilegeMgr.RoleGroups">
            <summary>
            All existing RoleGroups
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Privileges.PrivilegeMgr.GetRoleOrDefault(System.String)">
            <summary>
            Gets a role group by name.
            </summary>
            <returns>the RoleGroup if it exists; null otherwise</returns>
        </member>
        <member name="T:WCell.RealmServer.Privileges.RoleGroup">
            <summary>
            Defines a group with specific traits and permissions.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Privileges.RoleGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.Name">
            <summary>
            The name of the role.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.Status">
            <summary>
            RoleStatus indicates the relevance of a role
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.IsStaff">
            <summary>
            Whether the player is a staff-member
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.MaySkipAuthQueue">
            <summary>
            Whether the player can always login, even if the Realm is full
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.ScrambleChat">
            <summary>
            Whether the player's chat will be scrambled
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.AppearAsGM">
            <summary>
            Whether or not the role makes the player a GM.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.AppearAsQA">
            <summary>
            Whether or not the role makes the player a QA.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.Rank">
            <summary>
            The actual Rank of this Role
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.InheritanceList">
            <summary>
            A list of the other roles the role inherits from, permissions-wise.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.CommandNames">
            <summary>
            A list of the names of all allowed Commands.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Privileges.RoleGroup.Commands">
            <summary>
            A list of all allowed Commands.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Program">
            <summary>
            Base class for starting the realm server.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Program.Start">
            <summary>
            Starts up the realm server.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.Archetype">
            <summary>
            An Archetype is the combination of a Race and a Class to define a distinct persona, eg. Orc Warrior, Human Paladin etc
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.Archetype.StartPosition">
            <summary>
            The starting position for the given race.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.Archetype.StartMapId">
            <summary>
            The starting map for the given race.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.Archetype.StartZoneId">
            <summary>
            The starting zone for the given race.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.Archetype.Spells">
            <summary>
            All initial spells of this Archetype
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.Archetype.MaleItems">
            <summary>
            All initial items for males of this Archetype
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.Archetype.FemaleItems">
            <summary>
            All initial items for females of this Archetype
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.Archetype.GetStrength(System.Int32)">
            <summary>
            Gets the BaseStrength at a specific level.
            </summary>
            <param name="level">the level to get the BaseStrength for</param>
            <returns>BaseStrength amount</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.Archetype.GetAgility(System.Int32)">
            <summary>
            Gets the BaseAgility at a specific level.
            </summary>
            <param name="level">the level to get the BaseAgility for</param>
            <returns>BaseAgility amount</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.Archetype.GetStamina(System.Int32)">
            <summary>
            Gets the BaseStamina at a specific level.
            </summary>
            <param name="level">the level to get the BaseStamina for</param>
            <returns>BaseStamina amount</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.Archetype.GetIntellect(System.Int32)">
            <summary>
            Gets the BaseIntellect at a specific level.
            </summary>
            <param name="level">the level to get the BaseIntellect for</param>
            <returns>the BaseIntellect amount</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.Archetype.GetSpirit(System.Int32)">
            <summary>
            Gets the BaseSpirit at a specific level.
            </summary>
            <param name="level">the level to get the BaseSpirit for</param>
            <returns>the BaseSpirit amount</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.PlayerActionButtonEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.ArchetypeMgr.BaseClasses">
            <summary>
            Use Archetypes for any customizations.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.ArchetypeMgr.BaseRaces">
            <summary>
            Use Archetypes for any customizations.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.ArchetypeMgr.Archetypes">
            <summary>
            Use Archetype objects to customize basic settings.
            Index: [class][race]
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.ArchetypeMgr.GetClass(WCell.Constants.ClassId)">
            <summary>
            Returns the Class with the given type
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.ArchetypeMgr.GetRace(WCell.Constants.RaceId)">
            <summary>
            Returns the Race with the given type
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.ArchetypeMgr.GetArchetypeNotNull(WCell.Constants.RaceId,WCell.Constants.ClassId)">
            <summary>
            Returns the corresponding <see cref="T:WCell.RealmServer.RacesClasses.Archetype"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">If Archetype does not exist</exception>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.ArchetypeMgr.GetArchetypes(WCell.Constants.RaceId,WCell.Constants.ClassId)">
            <summary>
            Returns all archetypes with the given race/class combination.
            0 for race or class means all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.ArchetypeMgr.Initialize">
            <summary>
            Note: This step is depending on Skills, Spells and WorldMgr
            </summary>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.BaseClass">
            <summary>
            Defines the basics of a class.
            NOTE that all equations don't take boni from combat ratings into account
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RacesClasses.BaseClass.Id">
            <summary>
            The class type this class represents.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseClass.Settings">
            <summary>
            Basic class settings per level
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseClass.SpellLines">
            <summary>
            All SpellLines of this class
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RacesClasses.BaseClass.DefaultPowerType">
            <summary>
            The PowerType this class uses.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateDodge(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the dodge amount for the class at a specific level and Agility.
            TODO: Find the constant that can be used to get 1 agi = X % dodge (diminishing returns)
            http://wowwiki.com/Dodge
            </summary>
            <param name="level">the player's level</param>
            <param name="agility">the player's Agility</param>
            <returns>the total dodge amount</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateParry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the parry chance from parry rating.
            </summary>
            <param name="level"></param>
            <param name="parryRating"></param>
            <param name="str">Strength, used for DKs</param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateHealthRegen(WCell.RealmServer.Entities.Unit)">
            <summary>
            Calculates the amount of health regeneration for the class at a specific level and Spirit.
            </summary>
            <param name="level">the player's level</param>
            <param name="spirit">the player's Spirit</param>
            <returns>the total health regeneration amount</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateMagicCritChance(System.Int32,System.Int32)">
            <summary>
            Calculates the magic critical chance for the class at a specific level, base Intellect and added Intellect.
            </summary>
            <param name="level">the player's level</param>
            <returns>the total magic critical chance</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateMeleeCritChance(System.Int32,System.Int32)">
            <summary>
            Calculates the melee critical chance for the class at a specific level, base Agility and added Agility.
            TODO: Implement diminishing returns
            </summary>
            <param name="level">the player's level</param>
            <param name="agility">the player's Agility</param>
            <returns>the total melee critical chance</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateRangedCritChance(System.Int32,System.Int32)">
            <summary>
            TODO: Ranged Crit Chance
            http://www.wowwiki.com/Formulas:Critical_hit_chance
            http://www.wowwiki.com/Formulas:Agility
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.CalculateRangedAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates ranged attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total ranged attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.GetHealthForLevel(System.Int32)">
            <summary>
            Gets the total health gained for the class at a specific level. 
            </summary>
            <param name="level">the player's level</param>
            <returns>the total health gained up until the given level</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.BaseClass.InitializeStartingPlayer(WCell.RealmServer.Entities.Character)">
            <summary>
            Runs any needed initialization for a player that has just been created.
            </summary>
            <param name="character">the <see cref="T:WCell.RealmServer.Entities.Character">Character</see> that needs to be initialized</param>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.BaseRace">
            <summary>
            Defines the basics of a race.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.Id">
            <summary>
            The <see cref="T:WCell.Constants.RaceId" /> that this race object represents.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.FactionTemplateId">
            <summary>
            The faction to which players of this Race belong
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.Faction">
            <summary>
            The faction to which players of this Race belong
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.IntroductionMovie">
            <summary>
            The introduction movie (cinematic) for the given race.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.MaleDisplayId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.FemaleDisplayId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.MaleModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.FemaleModel">
            <summary>
            
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RacesClasses.BaseRace.Scale">
            <summary>
            The scale that characters should have with their specific model.
            </summary>
            <remarks>If a model is normally "this big," then we adjust the Scale property to make 
            the character's model appear bigger or smaller than normal, with 1f representing the 
            normal size, reducing it or increasing it to make the character appear smaller or 
            larger, respectively</remarks>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.DeathKnightClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.DeathKnightClass.CalculateParry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deathknights get 25% of their str added as parry rating.
            </summary>
            <param name="level"></param>
            <param name="parryRating"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.DruidClass">
            <summary>
            Defines the basics of the Druid class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.DruidClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.HunterClass">
            <summary>
            Defines the basics of the Hunter class.
            TODO: Needs revising, formulas rechecked.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.HunterClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.HunterClass.CalculateRangedAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates ranged attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total ranged attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.HunterClass.CalculateDodge(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the dodge amount for the class at a specific level and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="agility">the player's Agility</param>
            <returns>the total dodge amount</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.MageClass">
            <summary>
            Defines the basics of the Mage class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.MageClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.PaladinClass">
            <summary>
            Defines the basics of the Paladin class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.PaladinClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.PriestClass">
            <summary>
            Defines the basics of the Priest class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.PriestClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.RogueClass">
            <summary>
            Defines the basics of the Rogue class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.RogueClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.RogueClass.CalculateRangedAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates ranged attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total ranged attack power</returns>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.RogueClass.CalculateDodge(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the dodge amount for the class at a specific level and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="agility">the player's Agility</param>
            <returns>the total dodge amount</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.ShamanClass">
            <summary>
            Defines the basics of the Shaman class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.ShamanClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.WarlockClass">
            <summary>
            Defines the basics of the Warlock class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.WarlockClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RacesClasses.WarriorClass">
            <summary>
            Defines the basics of the Warrior class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RacesClasses.WarriorClass.CalculateMeleeAP(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates attack power for the class at a specific level, Strength and Agility.
            </summary>
            <param name="level">the player's level</param>
            <param name="strength">the player's Strength</param>
            <param name="agility">the player's Agility</param>
            <returns>the total attack power</returns>
        </member>
        <member name="T:WCell.RealmServer.RealmServer">
            <summary>
            Server class for the realm server. Handles all initial
            connections and verifies authentication with the 
            authentication server 
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServer.Configuration">
            <summary>
            The configuration for the realm server.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServer.AuthClient">
            <summary>
            The authentication service client instance.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServer.AcceptedClients">
            <summary>
            Number of clients fully accepted and authenticated.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServer.AuthSeed">
            <summary>
            The randomly-generated seed used for pre-login authentication.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServer.ExternalAddress">
            <summary>
            Can only be used if RealmServerConfiguration.RegisterExternalAddress is true
            or if already connected, else will throw Exception.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.Start">
            <summary>
            Starts the server and begins accepting connections.
            Requires IO-Context.
            Also see <c>StartLater</c>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.ConnectToAuthService">
            <summary>
            Establishes the initial connection with the authentication service.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.RegisterRealm">
            <summary>
            Registers this Realm with the Authentication-Server
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.UpdateRealm">
            <summary>
            Updates this Realm at the Authentication-Server.
            Is called automatically on a regular basis.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.UnregisterRealm">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.OnReceiveUDP(System.Int32,System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Called when a UDP packet is received
            </summary>
            <param name="num_bytes">the number of bytes received</param>
            <param name="buf">byte[] of the datagram</param>
            <param name="ip">the source IP of the datagram</param>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.OnSendTo(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Called when a UDP packet is sent
            </summary>
            <param name="clientIP">the destination IP of the datagram</param>
            <param name="num_bytes">the number of bytes sent</param>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.CreateClient">
            <summary>
            Creates a client object for a newly connected client
            </summary>
            <returns>a new IRealmClient object</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.OnClientConnected(Cell.Core.IClient)">
            <summary>
            Called when a client connects.
            A client cannot connect while the Realm is not connected
            to the AuthServer.
            </summary>
            <param name="client">the client object</param>
            <returns>false to shutdown the server</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.OnClientDisconnected(Cell.Core.IClient,System.Boolean)">
            <summary>
            Called when a client disconnects
            </summary>
            <param name="client">the client object</param>
            <param name="forced">indicates if the client disconnection was forced</param>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.OnClientAccepted(System.Object,System.EventArgs)">
            <summary>
            Called when a login is accepted.
            </summary>
            <param name="sender">the caller of the event</param>
            <param name="args">the arguments of the event</param>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.IsAccountLoggedIn(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.GetLoggedInAccount(System.String)">
            <summary>
            Returns the logged in account with the given name.
            Requires IO-Context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.RegisterAccount(WCell.RealmServer.RealmAccount)">
            <summary>
            Registers the given Account as currently connected.
            Requires IO-Context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.UnregisterAccount(WCell.RealmServer.RealmAccount)">
            <summary>
            Removes the given Account from the list from currently connected Accounts.
            Requires IO-Context.
            </summary>
            <returns>Whether the Account was even flagged as logged in.</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.SetAccountLoggedIn(WCell.RealmServer.RealmAccount,System.Boolean)">
            <summary>
            Updates the AuthServer about the login-status of the account with the given name.
            Accounts that are flagged as logged-in cannot connect again until its unset again.
            Called whenever client connects/disconnects.
            </summary>
            <param name="acc"></param>
            <param name="loggedIn"></param>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.RequestAccountInfo(System.String,System.Byte[])">
            <summary>
            Gets the AccountInfo for the given name from the corresponding logged in account or requests it from the AuthServer
            
            TODO: search by byte[] value
            </summary>
            <param name="requestAddr">If not null, will only return the Account if not banned.</param>
            <remarks>Requires IO-Context.</remarks>
            <returns>The information of the requested account or null if the Account did not exist or the AuthServer could not be reached</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.GetOrRequestAccount(System.String)">
            <summary>
            Gets all information of the account with the given Name.
            </summary>
            <remarks>Requires IO-Context.</remarks>
            <returns>The information of the requested account or null if the Account 
            did not exist or the AuthServer could not be reached</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.GetAuthenticationInfo(System.String)">
            <summary>
            Requests the temporary authentication information of an account.
            </summary>
            <param name="accountName">the account name</param>
            <returns>The request information or null if it did not succeed</returns>
        </member>
        <member name="M:WCell.RealmServer.RealmServer.OnShutdown">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.RealmServerConfiguration">
            <summary>
            Configuration for the realm server
            TODO: Allow to re-load config during runtime (using World-sync)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.RealmServerConfiguration.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="executablePath">The path of the executable whose App-config to load</param>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.Host">
            <summary>
            The host address to listen on for game connections.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.ExternalAddress">
            <summary>
            The address to be sent to the players to connect to.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.Port">
            <summary>
            The port to listen on for game connections.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.RealmName">
            <summary>
            The name of this server
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration._serverType">
            <summary>
            The location of the configuration dir
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.ServerType">
            <summary>
            Type of server
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.Status">
            <summary>
            The status can be Open or Locked (a Locked Realm can only be accessed by Staff members)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.Category">
            <summary>
            The Category of this RealmServer
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.Flags">
            <summary>
            The flags of this RealmServer
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.RegisterExternalAddress">
            <summary>
            Whether or not to try and register the outside-most IP this computer
            goes through as a realm on the authentication server.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.DatabaseType">
            <summary>
            The type of database we're connecting to. (e.g. MySQL, mssql2005, Oracle, etc)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.DBConnectionString">
            <summary>
            The connection string for the authentication server database.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.AuthenticationServerAddress">
            <summary>
            The address of the auth server.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.MaxClientCount">
            <summary>
            The amount of players this server can hold/allows for.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.ClientId">
            <summary>
            The highest supported version
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.CapitalizeCharacterNames">
            <summary>
            whether or not to use blizz like character name restrictions (blizzlike = 'Lama', not blizzlike = 'lAmA').
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.CompressionLevel">
            <summary>
            The level to use for Zlib compression. (1 = fastest, 9 = best compression)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.IngameMinutesPerSecond">
            <summary>
            The speed of time in ingame minute per real-time second.
            If set to one, one minute ingame will pass by in one second.
            Default: 0.016666666666666666f (1/60)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.ContentDirName">
            <summary>
            The directory in which to look for XML and DBC files
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.DBCFolder">
            <summary>
            The directory that holds the DBC files
            </summary>
        </member>
        <member name="P:WCell.RealmServer.RealmServerConfiguration.CacheDir">
            <summary>
            The directory that holds the DBC files
            </summary>
        </member>
        <member name="F:WCell.RealmServer.RealmServerConfiguration.MaxCharacterLevel">
            <summary>
            The highest level, a Character can reach.
            Also see: 
            TODO: Wrap access to *all* level-related arrays
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Res.Resources">
            <summary>
            Wrapper for auto-generated resource class. This allows the the strongly-typed
            resources to be auto-generated, while this class ensures there will always be 
            'Resources' type available to call.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Res.WCell_RealmServer">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.AlreadyRecycledEntityId">
            <summary>
              Looks up a localized string similar to An attempt was made to recycle an EntityId that is already recycled! EntityId: {0} EntityIdType:{1}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.BadAuthenticationProcedure">
            <summary>
              Looks up a localized string similar to Tried to authenticate the client before their account was loaded/initialized!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterAlreadyConnected">
            <summary>
              Looks up a localized string similar to Character EntityId {0} Account {1} tried to connect while already logged in.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterNotFound">
            <summary>
              Looks up a localized string similar to Character EntityId {0} not found in Account {1}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterNullRegister">
            <summary>
              Looks up a localized string similar to Character null, could not register.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterNullUnregister">
            <summary>
              Looks up a localized string similar to Character null, could not unregister.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationAdded">
            <summary>
              Looks up a localized string similar to Relation added successfully: Character=&apos;{0}&apos;({1}), RelatedCharacter=&apos;{2}&apos;({3}), RelationType={4}, RelationResult={5}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationAddedFailed">
            <summary>
              Looks up a localized string similar to Relation add failed: Character=&apos;{0}&apos;({1}), RelatedCharacter=&apos;{2}&apos;({3}), RelationType={4}, RelationResult={5}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationRemoved">
            <summary>
              Looks up a localized string similar to Relation removing succeeded: Character={0}, RelatedCharacter={1}, RelationType={2}, RelationResult={3}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationRemoveFailed">
            <summary>
              Looks up a localized string similar to Relation removing failed: Character={0}, RelatedCharacter={1}, RelationType={2}, RelationResult={3}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationsLoaded">
            <summary>
              Looks up a localized string similar to Loaded {0} character relations of character &apos;{1}&apos; from the DB..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationsLoadFailed">
            <summary>
              Looks up a localized string similar to Error loading the character relations for player &apos;{0}&apos; from the DB ({1}).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationsUnloaded">
            <summary>
              Looks up a localized string similar to Unloaded {0} character relations of character &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterRelationValidationFailed">
            <summary>
              Looks up a localized string similar to Relation validation failed: Character=&apos;{0}&apos;({1}), RelatedCharacter=&apos;{2}&apos;({3}), RelationType={4}, RelationResult={5}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CharacterStillLoggedIn">
            <summary>
              Looks up a localized string similar to Player &apos;{0}&apos; already logged in! Removing them from the online list!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandConfigChanged">
            <summary>
              Looks up a localized string similar to Command configuration changed; reloading!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandMgrCEFailed">
            <summary>
              Looks up a localized string similar to The command manager failed to (re)start! Reason: failed to create the script environment!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandMgrDEFailed">
            <summary>
              Looks up a localized string similar to The command manager failed to (re)start/stop! Reason: failed to destroy the existing script environment!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandMgrLoadFailed">
            <summary>
              Looks up a localized string similar to The command manager failed to (re)start! Reason: failed to load command script files!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandMgrStarted">
            <summary>
              Looks up a localized string similar to The command manager (re)started successfully!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandMgrStopped">
            <summary>
              Looks up a localized string similar to The command manager stopped successfully!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommandModuleDoesntExist">
            <summary>
              Looks up a localized string similar to The specified command module doesn&apos;t exist! Module: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.CommunicationException">
            <summary>
              Looks up a localized string similar to An exception occured within the IPC device when trying to communicate with the AuthServer..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.DatabaseFailure">
            <summary>
              Looks up a localized string similar to There was a catastrophic database failure, server not started.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.DBCFileDoesntExist">
            <summary>
              Looks up a localized string similar to The required DBC file, &apos;{0}&apos;, does not exist!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.DBCLoadFailed">
            <summary>
              Looks up a localized string similar to Failed to load and parse the DBC file, &apos;{0}&apos;!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ErroneousPacketReceived">
            <summary>
              Looks up a localized string similar to Packet received/parsed with erroneous length! Packet ID: {0:X4} Length given: {1}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.FailedToRetrieveAccount">
            <summary>
              Looks up a localized string similar to Failed to retrieve account &apos;{0}&apos; from the AuthServer!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.FatalUnhandledException">
            <summary>
              Looks up a localized string similar to A fatal, unhandled exception was encountered!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.GameTablesLoaded">
            <summary>
              Looks up a localized string similar to GameTables loaded in {0}ms.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.GuildLoaded">
            <summary>
              Looks up a localized string similar to Loaded data for Guild &apos;{0}&apos; from the DB..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.GuildLoadFailed">
            <summary>
              Looks up a localized string similar to Error loading the data for Guild with ID &apos;{0}&apos; from the DB..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.GuildUnload">
            <summary>
              Looks up a localized string similar to Unloaded Guild &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.HandlingPacket">
            <summary>
              Looks up a localized string similar to Handling packet &apos;{0}&apos; with size of {1} bytes..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IllegalRenameAttempt">
            <summary>
              Looks up a localized string similar to Attempt to rename a character not belonging to the client&apos;s account! GUID: &apos;{0}&apos; ({1}).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.InvalidMapMove">
            <summary>
              Looks up a localized string similar to An entity attempted to move to an invalid/non-existent map! Target map: {0} Entity: {1}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IPCProxyCouldntReconnect">
            <summary>
              Looks up a localized string similar to IPC device failed to reconnect to the AuthServer. Is the AuthServer running?.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IPCProxyDisconnected">
            <summary>
              Looks up a localized string similar to IPC device disconnected from AuthServer!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IPCProxyFailed">
            <summary>
              Looks up a localized string similar to IPC device failed to connect to the AuthServer because the AuthServer is probably not running. Retrying in {0} seconds....
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IPCProxyFailedException">
            <summary>
              Looks up a localized string similar to IPC device failed to connect to the AuthServer. Retrying in {0} seconds....
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IPCProxyReconnected">
            <summary>
              Looks up a localized string similar to IPC device successfully reconnected to the AuthServer!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.IPCProxySucceeded">
            <summary>
              Looks up a localized string similar to IPC device successfully connected to the AuthServer!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MailNotOwnerDelete">
            <summary>
              Looks up a localized string similar to Player tried to delete a mail message that is not theirs; possible error or exploit attempt! Player name: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MailSystemHalted">
            <summary>
              Looks up a localized string similar to Mail System Halted.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MailSystemLoaded">
            <summary>
              Looks up a localized string similar to Mail System Started.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MailSystemStart">
            <summary>
              Looks up a localized string similar to Starting Mail System....
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MailSystemStop">
            <summary>
              Looks up a localized string similar to Halting Mail System....
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MapsLoaded">
            <summary>
              Looks up a localized string similar to {0} maps loaded in {1}ms.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.NotFound">
            <summary>
              Looks up a localized string similar to Could not find {0}: {1}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.PacketHandleException">
            <summary>
              Looks up a localized string similar to An exception occured while trying to handle packet! Packet ID: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.PacketIDOutOfRange">
            <summary>
              Looks up a localized string similar to The packet ID was out of range. Possible encryption/decryption corruption..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.PacketLengthMismatch">
            <summary>
              Looks up a localized string similar to Packet reports a length bigger than the amount of data available! Packet ID: {0}, reported length: {1}, available length: {2}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.PacketParseFailed">
            <summary>
              Looks up a localized string similar to Failed to parse packet properly! Given opcode: {0:X4}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.PartitionStartComplete">
            <summary>
              Looks up a localized string similar to Partitioned and started {0} maps in {1}ms.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MapContextNeeded">
            <summary>
              Looks up a localized string similar to Map context required. Add a message to the map to ensure the action is performed within the Map&apos;s context: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MapContextProhibited">
            <summary>
              Looks up a localized string similar to Map context prohibited. Make sure to NOT call this method from within the map context due to deadlock risks or blocking code: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MapStarted">
            <summary>
              Looks up a localized string similar to Map {0} now running!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MapStopped">
            <summary>
              Looks up a localized string similar to Map {0} stopped!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.MapUpdating">
            <summary>
              Looks up a localized string similar to Map is calling method while updating. Make sure to NOT call this and similar methods while a Map is updating: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.RegisteredAllHandlers">
            <summary>
              Looks up a localized string similar to Registered all packet handlers!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.RegisteredHandler">
            <summary>
              Looks up a localized string similar to Registered handler for {0}() for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.RegisterNotRunning">
            <summary>
              Looks up a localized string similar to Trying to register RealmServer while RealmServer is not running..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.RelationManagerStarted">
            <summary>
              Looks up a localized string similar to Relation Manager started.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.RelationManagerStopped">
            <summary>
              Looks up a localized string similar to Relation Manager stopped.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.RenamingCharacter">
            <summary>
              Looks up a localized string similar to Renaming character - original name: &apos;{0}&apos; new name: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ConnectingToAuthServer">
            <summary>
              Looks up a localized string similar to Resetting the IPC connection to the AuthServer!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ScriptEngineRetrieveError">
            <summary>
              Looks up a localized string similar to Error while getting script engine instance! Script engine: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ScriptExecutionError">
            <summary>
              Looks up a localized string similar to Exception encountered during script execution! Script engine: &apos;{0}&apos; Module name: &apos;{1}&apos; Function name: &apos;{2}&apos; {3}Exception: {4}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ScriptLoadFailed">
            <summary>
              Looks up a localized string similar to Failed to load script: {0}!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.SendingPacket">
            <summary>
              Looks up a localized string similar to Sending packet &apos;{0}&apos; with a length of {1}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ServerBaseStartExCaught">
            <summary>
              Looks up a localized string similar to An exception was caught when trying to bind to the listening address! Make sure to check your configuration and verify that the host address and port are valid for this computer..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ServerRulesetLoadFailed">
            <summary>
              Looks up a localized string similar to Failed to load the server ruleset for the given server type: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.StartingServer">
            <summary>
              Looks up a localized string similar to Starting up realm server..
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.StartInit">
            <summary>
              Looks up a localized string similar to Starting/initializing: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.StartInitException">
            <summary>
              Looks up a localized string similar to Exception occured when starting/initializing: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.StopCleanup">
            <summary>
              Looks up a localized string similar to Stopping/cleaning up: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.StopCleanupException">
            <summary>
              Looks up a localized string similar to Exception occured when stopping/cleaning up: {0}.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.WorldMgrFailed">
            <summary>
              Looks up a localized string similar to The world manager failed to start!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.WorldMgrSucceeded">
            <summary>
              Looks up a localized string similar to The world manager started successfully!.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Res.WCell_RealmServer.ZonesLoaded">
            <summary>
              Looks up a localized string similar to {0} zones loaded in {1}ms.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Skills.Skill">
            <summary>
            Represents a Player's progress with a certain skill
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.Skill.m_skills">
            <summary>
            The containing SkillCollection
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.CurrentValue">
            <summary>
            The current value of this skill
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.MaxValue">
            <summary>
            The maximum possible value of this skill not including modifiers
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.ActualValue">
            <summary>
            Returns CurrentValue + Modifier
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.ActualMax">
            <summary>
            Either the original max of this skill or the owner's level * 5, whatever comes first
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.Modifier">
            <summary>
            The modifier to this skill
            Will be red if negative, green if positive
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.ModifierValue">
            <summary>
            Apparently a flat skill-bonus without colored text
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.Record">
            <summary>
            The persistant record that can be saved to/loaded from DB
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.Skill.CurrentTierSpell">
            <summary>
            The spell that represents the current tier
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.CanLearnTier(WCell.Constants.Skills.SkillTierId)">
            <summary>
            Checks whether the given tier can be learned
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.GainRand(System.Int32,System.Int32)">
            <summary>
            Gains up to maxGain skill points with the given chance.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.LearnMax">
            <summary>
            Gains max value of this skill.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.LearnAllAbilities">
            <summary>
            The player learns all abilities of this skill.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.RemoveAllAbilities">
            <summary>
            The player unlearns all abilities of this skill.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.Save">
            <summary>
            Saves all recent changes to this Skill to the DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.Skill.Push">
            <summary>
            Sends this skill instantly to the owner
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Skills.SkillAbility">
            <summary>
            Skill Abilities, any kind of skill-related action 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillAbility.NextSpellId">
            <summary>
            The spell that superceeds this one
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillAbility.NextAbility">
            <summary>
            The Ability that superceeds this one
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillAbility.PreviousAbility">
            <summary>
            The Ability that this one superceeded
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillAbility.ReqTrainPts">
            <summary>
            For pets
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Skills.SkillCollection">
            <summary>
            A collection of all of one <see cref="T:WCell.RealmServer.Entities.Character"/>'s skills.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.GetSkillGainChance(System.Int32,WCell.RealmServer.Skills.Skill)">
            <summary>
            Skill gains up chance formula
            </summary>
            <param name="targetLevel"></param>
            <param name="skill"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.GetLineIfLearnable(WCell.Constants.Skills.SkillId,WCell.Constants.Skills.SkillTierId)">
            <summary>
            If this char is allowed to learn this skill (matching Race, Class and Level) on the given tier, 
            the correspdonding SkillLine will be returned. Returns null if skill cannot be learnt.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.TryLearn(WCell.Constants.Skills.SkillId)">
            <summary>
            Tries to learn the given tier for the given skill (if allowed)
            </summary>
            <returns>Whether it succeeded</returns>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.TryLearn(WCell.Constants.Skills.SkillId,WCell.Constants.Skills.SkillTierId)">
            <summary>
            Tries to learn the given tier for the given skill (if allowed)
            </summary>
            <returns>Whether it succeeded</returns>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Contains(WCell.Constants.Skills.SkillId)">
            <summary>
            Returns whether the given skill is known to the player
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.CheckSkill(WCell.Constants.Skills.SkillId,System.Int32)">
            <summary>
            Returns whether the owner has the given amount of the given skill
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.SkillCollection.FreeProfessions">
            <summary>
            How many professions this character can learn
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.SkillCollection.Item(WCell.Constants.Skills.SkillId)">
            <summary>
            Sets or overrides an existing skill
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.SkillCollection.AvailableSkills">
            <summary>
            All skills that are available to the owner, restricted by Race/Class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.GetOrCreate(WCell.Constants.Skills.SkillId,System.Boolean)">
            <summary>
            Adds a new Skill to this SkillCollection if it is not added yet and allowed for this character (or ignoreRestrictions = true)
            </summary>
            <param name="ignoreRestrictions">Whether to ignore the race, class and level requirements of this skill</param>
            <returns>The existing or new skill or null</returns>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Add(WCell.Constants.Skills.SkillId,System.Boolean)">
            <summary>
            Add a new Skill with initial values to this SkillCollection if it can be added
            </summary>
            <param name="ignoreRestrictions">Whether to ignore the race, class and level requirements of this skill</param>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Add(WCell.RealmServer.Skills.SkillLine,System.Boolean)">
            <summary>
            Adds and returns the given Skill with initial values
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.LearnMax(WCell.Constants.Skills.SkillId)">
            <summary>
            Adds and returns a skill with max values
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Add(WCell.Constants.Skills.SkillId,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Add a new Skill to this SkillCollection if its not a profession or the character still has professions left
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Add(WCell.RealmServer.Skills.SkillLine,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Add a new Skill to this SkillCollection if its not a profession or the character still has professions left (or ignoreRestrictions is true)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Add(WCell.RealmServer.Skills.Skill,System.Boolean)">
            <summary>
            Adds the skill without any checks
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Remove(WCell.Constants.Skills.SkillId)">
            <summary>
            Removes a skill from this character's SkillCollection
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.CreateNew(WCell.RealmServer.Skills.SkillLine,System.UInt32,System.UInt32)">
            <summary>
            Returns a new Skill object
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.FindFreeField">
            <summary>
            Returns the next free Player's skill-field
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.Clear">
            <summary>
            Removes all skills (can also be considered a "reset")
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.LearnAll(System.Boolean)">
            <summary>
            Adds all skills that are allowed for the owner's race/class combination with max value
            </summary>
            <param name="learnAbilities"></param>
        </member>
        <member name="M:WCell.RealmServer.Skills.SkillCollection.LearnAll(WCell.Constants.RaceId,WCell.Constants.ClassId,System.Boolean)">
            <summary>
            Adds all skills of that race/class combination with max value
            </summary>
            <param name="learnAbilities">Whether to also learn all abilities, related to the given skills.</param>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillHandler.MaxAmount">
            <summary>
            The maximum amount of skills allowed (limited by the amount of PlayerUpdateFields for skills)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillHandler.MaxProfessionsPerChar">
            <summary>
            The max amount of professions that every player may learn (Blizzlike: 2)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillHandler.RemoveAbilitiesWithSkill">
            <summary>
            Whether to automatically remove all spells that belong to a skill when removing it.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillHandler.ById">
            <summary>
            All skills, indexed by their id
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillHandler.RaceClassInfos">
            <summary>
            All lists of all Race/Class-specific skillinfos: Use RaceClassInfos[race][class]
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillHandler.AbilitiesBySkill">
            <summary>
            All SkillAbility-lists, indexed by their SkillId
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillLine.Tiers">
            <summary>
            The Skill's "challenge levels"
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillLine.Name">
            <summary>
            The name of this Skill
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillLine.Language">
            <summary>
            The language that this Skill represents (if any).
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillLine.Abandonable">
            <summary>
            1 for professions, else 0 - needed by packets
            Also allows the skill to be unlearned
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillLine.TeachingSpells">
            <summary>
            The Spells that give the different tiers of this Skill
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.SkillLine.InitialValue">
            <summary>
            The initial value of this skill, when it has just been learnt
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.SkillLine.InitialLimit">
            <summary>
            The max-value of the skill when it has just been learnt
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Skills.SkillLine.MaxValue">
            <summary>
            The highest available value for this skill.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Skills.SkillRaceClassFlags">
            <summary>
            Completely unknown set of flags
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Skills.SkillRaceClassInfo">
            <summary>
            Race/Class-restrictions, the Tier and initial amount of a skill.
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillRaceClassInfo.SkillCostIndex">
            <summary>
            SkillCostsData.dbc
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Skills.SkillTiers">
            <summary>
            Represents the requirements that are needed to advance a Skill to the next tier
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillTiers.Costs">
            <summary>
            The cost of each tier
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Skills.SkillTiers.MaxValues">
            <summary>
            The limit of each tier
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.BaseRelation">
            <summary>
            Represents a relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.BaseRelation.CharacterId">
            <summary>
            The Character who created this Relation
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.BaseRelation.RelatedCharacterId">
            <summary>
            The related Character with who this Relation is with
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.BaseRelation.Type">
            <summary>
            The relation type
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.BaseRelation.Note">
            <summary>
            A note describing the relation
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.BaseRelation.RequiresOnlineNotification">
            <summary>
            Indicates if the relation requires sending a notification when a player change 
            its online status
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.BaseRelation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.BaseRelation.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new character relation based on the chars EntityId
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.CharacterSearch">
            <summary>
            Base class used for <see cref="T:WCell.RealmServer.Entities.Character"/> searches.
            <remarks>
            This class provides common character searching criterias, if you need to include your own custom criterias
            just derive from this class and override the <see cref="M:WCell.RealmServer.Interaction.CharacterSearch.IncludeCharacter(WCell.RealmServer.Entities.Character)"/> method.
            By default this class compares the online characters matching the search criterias. If you need to conduct 
            searches on offline or custom Characters, you can do so overriding the <see cref="M:WCell.RealmServer.Interaction.CharacterSearch.GetCharacters"/> method.
            </remarks>
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.CharacterSearch.Name">
            <summary>
            Character name search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.CharacterSearch.EntityId">
            <summary>
            Character <see cref="P:WCell.RealmServer.Interaction.CharacterSearch.EntityId"/> search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.CharacterSearch.MinLevel">
            <summary>
            Character min level search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.CharacterSearch.MaxLevel">
            <summary>
            Character max level search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.CharacterSearch.MaxResultCount">
            <summary>
            The maximum ammount of Characters matching the search criterias to return
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.CharacterSearch.RetrieveMatchedCharacters">
            <summary>
            Retrieves a list of the matched characters based on the search criterias.
            </summary>
            <returns>A list of the matched characters</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.CharacterSearch.GetCharacters">
            <summary>
            Used to retrieve the character list used in the search.
            By default it retrieves the online characters of the <see cref="T:WCell.RealmServer.Global.World"/>.
            Override if you need to search offline characters or custom character lists.
            </summary>
            <returns>The character list to be searched</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.CharacterSearch.IncludeCharacter(WCell.RealmServer.Entities.Character)">
            <summary>
            Used by inheriters to allow custom search criterias to be performed.
            </summary>
            <param name="character">The <see cref="T:WCell.RealmServer.Entities.Character"/> to be checked against custom search criterias.</param>
            <returns>True if the character pass all custom search criterias. False otherwise.</returns>
        </member>
        <member name="T:WCell.RealmServer.Interaction.FriendRelation">
            <summary>
            Represents a friend relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.GroupInviteRelation">
            <summary>
            Represents a group invite relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.GuildInviteRelation">
            <summary>
            Represents a guild invite relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.IBaseRelation.CharacterId">
            <summary>
            The Character who created this Relation
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.IBaseRelation.RelatedCharacterId">
            <summary>
            The related Character with who this Relation is with
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.IBaseRelation.Type">
            <summary>
            The relation type
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.IBaseRelation.Note">
            <summary>
            A note describing the relation
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.IgnoredRelation">
            <summary>
            Represents a friend relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.MutedRelation">
            <summary>
            Represents a friend relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Interaction.PersistedRelation">
            <summary>
            Represents a relationship between two <see cref="T:WCell.RealmServer.Entities.Character"/> entities, persisted in the db.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new character relation based on the chars EntityId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.#ctor(WCell.RealmServer.Database.CharacterRelationRecord)">
            <summary>
            Creates a new character relation based on a <see cref="T:WCell.RealmServer.Database.CharacterRelationRecord"/>
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.SaveToDB">
            <summary>
            Saves this instance to the DB
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.Delete">
            <summary>
            Delete this instance from the database
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.GetAll">
            <summary>
            Retrieves the list of character relations
            </summary>
            <returns>The list of all characters relations.</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.PersistedRelation.GetByCharacterId(System.UInt32)">
            <summary>
            Retrieves the list of character relations of a character
            </summary>
            <param name="charLowId">The character Id</param>
            <returns>The list of relations of the character.</returns>
        </member>
        <member name="T:WCell.RealmServer.Interaction.CharacterRelationType">
            <summary>
            TODO: Clean up
            TODO: Get rid of events and call methods directly to ensure this to be deterministic
            
            Defines all kinds of Relations between Characters, mainly Friends, Ignores, Mutings, Invitations to Groups and Guilds etc.
            Characters can have active Relations (which were triggered by the Character himself) and 
            passive Relations (which are Relations that others established with the corresponding Character).
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.RelationMgr.Lock">
            <summary>
            The lock to synchronize with, when iterating over this Manager's Relations etc.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.RemoveRelations(System.UInt32)">
            <summary>
            Only needed if Character gets removed?
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.GetRelations(System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Retrieves all Relations that the given Character started with others
            </summary>
            <param name="charLowId">The <see cref="T:WCell.Core.EntityId"/> of the character wich relations are requested</param>
            <param name="relationType">The type of the relation</param>
            <returns>The list of the related characters relations.</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.GetPassiveRelations(System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Retrieves all Relations of the given type that others have started with the given Character
            </summary>
            <param name="charLowId">The <see cref="T:WCell.Core.EntityId"/> of the character wich relations are requested</param>
            <param name="relationType">The type of the relation</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.HasPassiveRelations(System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Returns whether the Character with the given low Entityid has any passive relations of the given type
            </summary>
            <param name="charLowId"></param>
            <param name="relationType"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.GetRelation(System.UInt32,System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Retrieves a current relationship between the given characters and the type
            </summary>
            <param name="charId">The first character EntityId</param>
            <param name="relatedCharId">The related character low EntityId</param>
            <param name="relationType">The relationship type</param>
            <returns>A <see cref="T:WCell.RealmServer.Interaction.BaseRelation"/> object representing the relation;
            null if the relation wasnt found.</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.SetRelationNote(System.UInt32,System.UInt32,System.String,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Sets a relation note text
            </summary>
            <param name="charId">The first character EntityId</param>
            <param name="relatedCharId">The related character low EntityId</param>
            <param name="note">The note to be assigned to the relation</param>
            <param name="relationType">The relationship type</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.HasRelation(System.UInt32,System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Returns whether the given char has the given relationType with the given relatedChar
            </summary>
            <param name="charId">The first character EntityId</param>
            <param name="relatedCharId">The related character EntityId</param>
            <param name="relationType">The relationship type</param>
            <returns>True if the relation exist. False otherwise</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.AddRelation(WCell.RealmServer.Entities.Character,System.String,System.String,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Adds a character relation
            </summary>
            <param name="character">The first character in the relation</param>
            <param name="relatedCharName">The related character name</param>
            <param name="note">A note describing the relation. Used for Friend only relation types</param>
            <param name="relationType">The relation type</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.AddRelation(WCell.RealmServer.Interaction.BaseRelation)">
            <summary>
            Adds a character relation
            </summary>
            <param name="relation">The relation to be added</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.RemoveRelation(System.UInt32,System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Removes a character relation
            </summary>
            <param name="relCharId">The related character low <see cref="T:WCell.Core.EntityId"/></param>
            <param name="relationType">The relation type</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.RemoveRelations(System.UInt32,WCell.RealmServer.Interaction.CharacterRelationType)">
            <summary>
            Removes all Relations that the given Character has of the given type.
            </summary>
            <returns>Whether there were any Relations of the given type</returns>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.RemoveRelation(WCell.RealmServer.Interaction.IBaseRelation)">
            <summary>
            Removes a character relation
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.SaveRelations(System.UInt32)">
            <summary>
            Saves all relations of the Character with the given low EntityId
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.OnCharacterLogin(WCell.RealmServer.Entities.Character)">
            <summary>
            Notifies all friends etc
            </summary>
            <param name="character">The character logging in</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.OnCharacterLogout(WCell.RealmServer.Entities.Character)">
            <summary>
            Notifies all friends etc
            </summary>
            <param name="character">The character logging off</param>
        </member>
        <member name="M:WCell.RealmServer.Interaction.RelationMgr.SendRelationList(WCell.RealmServer.Entities.Character,WCell.Constants.Relations.RelationTypeFlag)">
            <summary>
            Sends the specified character relation lists to the specified character
            </summary>
            <param name="character">The character to send the list</param>
            <param name="flag">Flag indicating which lists should be sent to the character</param>
        </member>
        <member name="T:WCell.RealmServer.Interaction.WhoSearch">
            <summary>
            <see cref="T:WCell.RealmServer.Interaction.CharacterSearch"/> derived class customized to perform the Who List search 
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.WhoSearch.GuildName">
            <summary>
            Guild name search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.WhoSearch.Zones">
            <summary>
            Zones search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.WhoSearch.Names">
            <summary>
            Names search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.WhoSearch.Faction">
            <summary>
            Faction search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.WhoSearch.RaceMask">
            <summary>
            Race search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Interaction.WhoSearch.ClassMask">
            <summary>
            Class search filter. If not set this filter is ignored when performing the search.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Interaction.WhoSearch.IncludeCharacter(WCell.RealmServer.Entities.Character)">
            <summary>
            Method used to add custom search criterias. Added Who List custom search criterias to the default ones.
            </summary>
            <param name="character">The <see cref="T:WCell.RealmServer.Entities.Character"/> to be checked against custom search criterias.</param>
            <returns>True if the character pass all custom search criterias. False otherwise.</returns>
        </member>
        <member name="P:WCell.RealmServer.Spawns.ISpawnEntry.RespawnSecondsMin">
            <summary>
            Min Delay in milliseconds until the unit should be respawned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.ISpawnEntry.RespawnSecondsMax">
            <summary>
            Max Delay in milliseconds until the unit should be respawned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.ISpawnEntry.AutoSpawns">
            <summary>
            Whether this Entry spawns automatically (or is spawned by certain events)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnEntry`5.Position">
            <summary>
            The position of this SpawnEntry
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnEntry`5.RespawnSecondsMin">
            <summary>
            Min Delay in milliseconds until the unit should be respawned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnEntry`5.RespawnSecondsMax">
            <summary>
            Max Delay in milliseconds until the unit should be respawned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnEntry`5.AutoSpawns">
            <summary>
            Whether this Entry spawns automatically (or is spawned by certain events)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Spawns.SpawnMgr.SpawnPoolTemplateEntries">
            <summary>
            All entries for SpawnPoolTemplates
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.ISpawnPoint.IsSpawning">
            <summary>
            Whether timer is running and will spawn a new NPC when the timer elapses
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.ISpawnPoint.IsReadyToSpawn">
            <summary>
            Inactive and autospawns
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.ISpawnPoint.IsActive">
            <summary>
            Whether NPC is alread spawned or timer is running
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.ISpawnPoint.SpawnAfter(System.Int32)">
            <summary>
            Restarts the spawn timer with the given delay
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.ISpawnPoint.StopTimer">
            <summary>
            Stops the Respawn timer, if it was running
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.ISpawnPoint.Disable">
            <summary>
            Stops timer and deletes spawnling
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Spawns.SpawnPoint`5">
            <summary>
            Instance of SpawnEntry objects
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPoint`5.ActiveSpawnling">
            <summary>
            The currently active NPC of this SpawnPoint (or null)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPoint`5.IsSpawning">
            <summary>
            Whether timer is running and will spawn a new NPC when the timer elapses
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPoint`5.IsReadyToSpawn">
            <summary>
            Pool active, but spawn inactive and npc autospawns
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPoint`5.IsActive">
            <summary>
            Whether NPC is already spawned or timer is running
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPoint`5.SpawnAfter(System.Int32)">
            <summary>
            Restarts the spawn timer with the given delay
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPoint`5.StopTimer">
            <summary>
            Stops the Respawn timer, if it was running
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPoint`5.Disable">
            <summary>
            Stops timer and deletes spawnling
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPoint`5.SignalSpawnlingActivated(`2)">
            <summary>
            Called when object enters map
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPoint`5.SignalSpawnlingDied(`2)">
            <summary>
            Is called when the given spawn died or was removed from Map.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPool`5.IsFullySpawned">
            <summary>
            Whether all SpawnPoints of this pool are spawned
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPool`5.IsActive">
            <summary>
            Whether this Spawn point is actively spawning.
            Requires map context.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPool`5.GetRandomInactiveSpawnPoint">
            <summary>
            Returns a spawn point that is currently inactive
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPool`5.SpawnFull">
            <summary>
            Spawns NPCs until MaxAmount of NPCs are spawned.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPool`5.SpawnOneNow">
            <summary>
            Spawns an NPC from a random inactive spawn point or returns false, if all SpawnPoints are active
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Spawns.SpawnPool`5.Clear">
            <summary>
            Removes all spawned NPCs from this pool and makes it
            collectable by the GC (if not in Map anymore).
            </summary>
            <remarks>Requires map context</remarks>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPoolTemplate`5.AutoSpawns">
            <summary>
            Whether any SpawnEntry has AutoSpawns set to true
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Spawns.SpawnPoolTemplate`5.EventId">
            <summary>
            It would not make sense to create a pool that contains entries of different events
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Auras.Effects.ModArmorPenetrationHandler">
            <summary>
            Reduces victim armor by the given value in %
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Stats.PerformanceCounters">
            <summary>
            Creates and manages custom WCell performance counters.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Stats.PerformanceCounters.PacketsSentPerSecond">
            <summary>
            Performance counter for the number of packets sent per second.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Stats.PerformanceCounters.PacketsReceivedPerSecond">
            <summary>
            Performance counter for the number of packets received per second.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Stats.PerformanceCounters.TotalBytesSent">
            <summary>
            Performance counter for the total number of bytes sent.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Stats.PerformanceCounters.TotalBytesReceived">
            <summary>
            Performance counter for the total numbers of bytes received.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Stats.PerformanceCounters.NumbersOfClientsInAuthQueue">
            <summary>
            Performance counter for the number of clients in the auth queue.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Stats.PerformanceCounters.Initialize">
            <summary>
            Initializes the performance counters if they haven't already been created.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Stats.RealmStats.StatsPostDelay">
            <summary>
            
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Stats.RealmStatsExtended">
            <summary>
            Handles network statistics and trend tracking.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Talents.PetTalentCollection">
            <summary>
            A TalentCollection for pets, which *must* have:
            1. A Master of type <see cref="T:WCell.RealmServer.Entities.Character"/>
            2. A Record of type <see cref="T:WCell.RealmServer.NPCs.Pets.PermanentPetRecord"/>
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.PetTalentCollection.PetResetTierDecayHours">
            <summary>
            Every 2h, the reset tier drops by one
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.PetTalentCollection.OwnerCharacter">
            <summary>
            Need to make sure that this collection is not used if pet is not owned by character
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.PetTalentCollection.ResetTierDecayHours">
            <summary>
            Every 2 hours count down one tier
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.PlayerTalentCollection.PlayerResetTierDecayHours">
            <summary>
            Every month, the reset tier drops one (but half a month is more than long enough)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.SpecProfile.NewSpecProfile(WCell.RealmServer.Entities.Character,System.Int32)">
            <summary>
            Creates a new SpecProfile and saves it to the db.
            </summary>
            <param name="record">The character or pet that will own the spec profile.</param>
            <returns>The newly created SpecProfile.</returns>
        </member>
        <member name="M:WCell.RealmServer.Talents.SpecProfile.NewSpecProfile(WCell.RealmServer.Entities.Character,System.Int32,System.Byte[])">
            <summary>
            Creates a new SpecProfile and saves it to the db.
            </summary>
            <param name="record">The character or pet that will own the spec profile.</param>
            <returns>The newly created SpecProfile.</returns>
        </member>
        <member name="P:WCell.RealmServer.Talents.SpecProfile.SpecRecordId">
            <summary>
            Primary key. A combination of Character id and TalentGroup.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.SpecProfile.SpecIndex">
            <summary>
            The Id of the Talent Group currently in use.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.SpecProfile.GlyphIds">
            <summary>
            TODO: Move to own table
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.SpecProfile.ActionButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.Talent.ActualRank">
            <summary>
            The actual rank, as displayed in the GUI
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.Talent.Rank">
            <summary>
            Current zero-based rank of this Talent. 
            The rank displayed in the GUI is Rank+1.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.Talent.SetRankSilently(System.Int32)">
            <summary>
            Sets the rank without sending any packets or doing checks.
            Also does not increment spent talent points
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.Talent.Remove(System.Boolean)">
            <summary>
            Removes all ranks of this talent.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Talents.TalentCollection">
            <summary>
            Represents all Talents of a Character or Pet
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.CanLearn(WCell.Constants.Talents.TalentId,System.Int32)">
            <summary>
            Whether the given talent can be learned by this Character
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.CanLearn(WCell.RealmServer.Talents.TalentEntry,System.Int32)">
            <summary>
            Whether the given talent can be learned by an average player.
            Does not check for available Talent points, since that is checked when the Rank is changed.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.Learn(WCell.RealmServer.Talents.TalentEntry,System.Int32)">
            <summary>
            Tries to learn the given talent on the given rank
            </summary>
            <returns>Whether it was learnt</returns>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.LearnAll">
            <summary>
            Learn all talents of your own class
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.LearnAll(WCell.Constants.ClassId)">
            <summary>
            Learns all talents of the given class
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.Set(WCell.Constants.Talents.TalentId,System.Int32)">
            <summary>
            Sets the given talent to the given rank without any checks.
            Make sure that the given TalentId is valid for this Character's class.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.Set(WCell.RealmServer.Talents.TalentEntry,System.Int32)">
            <summary>
            Sets the given talent to the given rank without any checks
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.GetTalent(WCell.Constants.Talents.TalentId)">
            <summary>
            Returns the current rank that this player has of this talent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.GetRank(WCell.Constants.Talents.TalentId)">
            <summary>
            Returns the current rank that this player has of this talent
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.HasTalent(WCell.Constants.Talents.TalentId)">
            <summary>
            Whether this Owner has a certain Talent.
            </summary>
            <param name="id">The TalentId of the Talent</param>
            <returns>True if the Owner has the specified Talent</returns>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.HasTalent(WCell.RealmServer.Talents.Talent)">
            <summary>
            Whether this Owner has a certain Talent.
            </summary>
            <param name="talent">The Talent in question.</param>
            <returns>True if the Owner has the specified Talent</returns>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.RemoveTalents(System.Int32)">
            <summary>
            Removes the given amount of arbitrarily selected talents (always removes higher level talents first)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.ResetAllForFree">
            <summary>
            Resets all talents for free
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.CalculateCurrentResetTier">
            <summary>
            
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.GetResetPrice">
            <summary>
            The amount of copper that it costs to reset all talents.
            Updates the current tier, according to the amount of time passed.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.ResetTalents">
            <summary>
            Returns whether reseting succeeded or if it failed (due to not having enough gold)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentCollection.OwnerCharacter">
            <summary>
            The Owner of this TalentCollection or the owning pet's Master
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentCollection.CurrentSpecIndex">
            <summary>
            The index of the currently used group of talents (one can have multiple groups due to multi spec)
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentCollection.ResetTierDecayHours">
            <summary>
            Amount of hours that it takes the reset price tier to go down by one
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentEntry.Spells">
            <summary>
            Spells indexed by Talent-Rank
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentEntry.RequiredId">
            <summary>
            The id of the talent that must be learnt before this one can be learnt
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentEntry.RequiredRank">
            <summary>
            The required rank of the required talent
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentEntry.RequiredTreePoints">
            <summary>
            Required amount of points spent within the same TalentTree to activate this talent
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentEntry.MaxRank">
            <summary>
            The highest rank that this talent has
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentEntry.FullName">
            <summary>
            Complete name of this talent (includes the FullName of the tree)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentMgr.MaxTabCount">
            <summary>
            Maximum amount of TalentTrees per class (hardcoded in client)
            for some reason pet "Cunning" is on tab 4
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentMgr.PlayerTalentResetPricesPerTier">
            <summary>
            Player talent reset price in copper
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentMgr.PetTalentResetPricesPerTier">
            <summary>
            Pet talent reset price in copper
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentMgr.GetTrees(WCell.Constants.ClassId)">
            <summary>
            Returns all Trees of the given class
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentMgr.GetTree(WCell.Constants.Talents.TalentTreeId)">
            <summary>
            Returns the requested TalentTree
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentMgr.GetEntry(WCell.Constants.Talents.TalentId)">
            <summary>
            Returns the requested TalentEntry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Talents.TalentMgr.Initialize">
            <summary>
            Depends on SpellHandler
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentTree.PetTabIndex">
            <summary>
            For Pet Talents
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentTree.Talents">
            <summary>
            All talents of this tree
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Talents.TalentTree.TotalRankCount">
            <summary>
            Total amount of Talent ranks in this Tree
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Talents.TalentTree.FullName">
            <summary>
            Full name of this tree (includes the name of the Class this Tree belongs to)
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Taxi.TaxiCollection">
            <summary>
            Represents the relationship between the Character and his/her known TaxiNodes
            </summary>
        </member>
        <member name="T:WCell.RealmServer.Taxi.TaxiMgr">
            <summary>
            
            TODO: Cancel flight
            TODO: Save Character's route to DB
            
            Static helper and srcCont class for Taxi-related information (Flight-Paths, Flight-Masters etc) 
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Taxi.TaxiMgr.InterpolationDelayMillis">
            <summary>
            The delay in millis between position updates of Units that are on Taxis.
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Taxi.TaxiMgr.AirSpeed">
            <summary>
            The speed of Units travelling on Taxis in yards/second - Default: 16.
            (The average speed on foot is 7 y/s)
            </summary>
        </member>
        <member name="F:WCell.RealmServer.Taxi.TaxiMgr.AllActiveMask">
            <summary>
            A TaxiNode Mask with all existing nodes activated.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.GetNearestTaxiNode(WCell.Util.Graphics.Vector3)">
            <summary>
            Returns the TaxiNode closest to the given position (within 10 yards)
            </summary>
            <param name="pos">A position given in world coordinates</param>
            <returns>The closest TaxiNode within 10 yards, or null.</returns>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.TryFly(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.NPC,WCell.RealmServer.Global.PathNode[])">
            <summary>
            Sends the given Character on the given Path.
            </summary>
            <param name="chr">The Character to fly around.</param>
            <param name="destinations">An array of destination TaxiNodes.</param>
            <returns>Whether the client was sent on its way.</returns>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.PreFlightCheatChecks(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.Global.PathNode[])">
            <summary>
            Check various character states that disallow flights.
            </summary>
            <param name="client">The IRealmClient requesting the flight.</param>
            <param name="destinations">An array of destination TaxiNodes.</param>
            <returns>True if flight allowed.</returns>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.PreFlightValidPathCheck(WCell.RealmServer.Network.IRealmClient,WCell.RealmServer.Global.PathNode[])">
            <summary>
            Check that a valid path exists between the destinations.
            Also sets the characters TaxiPaths queue with the sequence of valid 
            paths to the final destination.
            </summary>
            <param name="client">The IRealmClient requesting the flight.</param>
            <param name="destinations">An array of destination TaxiNodes.</param>
            <returns>True if a valid path exists.</returns>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.PreFlightMoneyCheck(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Check that the character has enough money to cover the cost of the flight(s).
            Also deducts the cost of the flight from the character.
            </summary>
            <param name="client">The IRealmClient requesting the flight.</param>
            <returns>An array of destination TaxiNodes.</returns>
        </member>
        <member name="P:WCell.RealmServer.Taxi.TaxiMgr.IsNormalSpeed">
            <summary>
            Client-side taxi interpolation gets fishy when exceeding certain speed limits
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.ContinueFlight(WCell.RealmServer.Entities.Unit)">
            <summary>
            Send character down the next leg of a multi-hop trip.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiMgr.InterpolatePosition(WCell.RealmServer.Entities.Unit,System.Int32)">
            <summary>
            Interpolates the position of the given Unit along the Path given the elapsed flight time.
            </summary>
            <param name="elapsedTime">Time that elapsed since the given unit passed by the last PathVertex</param>
        </member>
        <member name="F:WCell.RealmServer.Taxi.TaxiPath.PathTime">
            <summary>
            The total time that it takes to fly on this Path from start to end 
            in millis (equals <see cref="F:WCell.RealmServer.Taxi.TaxiPath.PathLength"/>*<see cref="P:WCell.RealmServer.Taxi.TaxiMgr.AirSpeed"/>)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Taxi.TaxiPath.ToString">
            <summary>
            Returns a partial list of TaxiPathNodes
             that comprise the remainder of the Units Taxi flight.
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeMgr.Propose(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character)">
            <summary>
            Makes initChr propose trading to targetChr
            Call CheckRequirements first
            </summary>
            <param name="initChr">initiator of trading</param>
            <param name="targetChr">traget of trading</param>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeMgr.MayProposeTrade(WCell.RealmServer.Entities.Character,WCell.RealmServer.Entities.Character)">
            <summary>
            Checks requirements for trading between two characters
            </summary>
            <param name="initChr">possible initiator of trading</param>
            <param name="targetChr">possible target of trading</param>
        </member>
        <member name="T:WCell.RealmServer.Trade.TradeWindow">
            <summary>
            Represents the progress of trading between two characters
            Each trading party has its own instance of a TradeWindow
            </summary>
        </member>
        <member name="P:WCell.RealmServer.Trade.TradeWindow.OtherWindow">
            <summary>
            Other party of the trading progress
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.AcceptTradeProposal">
            <summary>
            Accepts the proposition of trade
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.Cancel(WCell.Constants.TradeStatus)">
            <summary>
            Cancels the trade
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.SetTradeItem(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Puts an item into the trading window
            </summary>
            <param name="tradeSlot">slot in the trading window</param>
            <param name="bag">inventory bag number</param>
            <param name="slot">inventory slot number</param>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.ClearTradeItem(System.Byte,System.Boolean)">
            <summary>
            Removes an item from the trading window
            </summary>
            <param name="tradeSlot">slot in the trading window</param>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.SetMoney(System.UInt32,System.Boolean)">
            <summary>
            Changes the amount of money to trade
            </summary>
            <param name="money">new amount of coins</param>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.AcceptTrade(System.Boolean)">
            <summary>
            Accepts the trade
            If both parties have accepted, commits the trade
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.UnacceptTrade(System.Boolean)">
            <summary>
            Unaccepts the trade (usually due to change of traded items or amount of money)
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.StopTrade(WCell.Constants.TradeStatus,System.Boolean)">
            <summary>
            Sends the notification about the change of trade status and stops the trade
            </summary>
            <param name="status">new status</param>
            <param name="notifySelf">whether to notify the caller himself</param>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.CheckMoney">
            <summary>
            Checks if the party has enough money for trade
            If not, unaccepts the trade
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.CheckItems">
            <summary>
            Checks if the party can trade selected items
            If not, unaccepts the trade
            </summary>
            <returns></returns>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.CommitTrade">
            <summary>
            Commits the trade between two parties
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.SendTradeInfo(System.Boolean)">
            <summary>
            Sends new information about the trading process to other party
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Trade.TradeWindow.SendStatus(WCell.Constants.TradeStatus,System.Boolean)">
            <summary>
            Sets new status of trade and sends notification about the change to both parties
            </summary>
            <param name="status">new status</param>
        </member>
        <member name="T:WCell.RealmServer.Transports.TransportEntry">
            <summary>
            Transport Entry
            </summary>
        </member>
        <member name="M:WCell.RealmServer.Transports.TransportEntry.FinalizeDataHolder">
            <summary>
            Is called to initialize the object; usually after a set of other operations have been performed or if
            the right time has come and other required steps have been performed.
            </summary>
        </member>
        <member name="T:WCell.RealmServer.UpdateFields.UpdateFieldHandler">
            <summary>
            Similar to an UpdateMask, it filters out the bits only needed for the player
            </summary>
        </member>
        <member name="T:WCell.RealmServer.UpdateFields.UpdateFieldHandler.DynamicUpdateFieldHandler">
            <summary>
            Handles writing of Dynamic UpdateFields. Be sure to definitely
            *always* write 4 bytes when a Handler is called.
            </summary>
            <param name="obj"></param>
            <param name="receiver"></param>
            <param name="packet"></param>
        </member>
        <member name="M:WCell.RealmServer.UpdateFields.UpdateMask.WriteFull(WCell.Core.Network.PrimitiveWriter)">
            <summary>
            Writes all the blocks to the packet
            </summary>
            <param name="packet">The packet to write to</param>
        </member>
        <member name="M:WCell.RealmServer.UpdateFields.UpdateMask.WriteTo(WCell.Core.Network.PrimitiveWriter)">
            <summary>
            Writes the bit mask of all required fields
            </summary>
            <param name="packet">The packet to write to</param>
        </member>
        <member name="T:WCell.RealmServer.UpdateFields.UpdatePacket">
            <summary>
            TODO: Create fully customizable UpdatePacket class
            </summary>
        </member>
        <member name="M:WCell.RealmServer.UpdateFields.UpdatePacket.SendTo(WCell.RealmServer.Network.IRealmClient)">
            <summary>
            Sends packet (might be compressed)
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
